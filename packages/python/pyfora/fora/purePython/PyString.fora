/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
class {
    //this can be either a FORA string, or a FORA vector of UInt8
    member @m;
    
    //required because the AttributeError clause in the PyObjectBase mixin masks the
    //generated version of this attribute.
    ...(`Member, `@m) { @m };

    //helper function to allow clients to format this for writing to s3.
    //this will eventually be replaced with a more generic model of data import/export
    __pyfora_string_as_paged_vec_of_char__: (
        match (@m) with ({String}) { @m.dataAsVector.paged } (...) { @m.paged }
        );

    static __string_size_limit__: 100000;
    """Construct a string from a FORA string or a vector of char, ensuring that we obey 
    the constraint that strings over the __string_size_limit__ should be held as Vectors.
    """
    static __makestring__: 
    fun({String} s) {
            if (size(s) > __string_size_limit__)
                return PyString(s.dataAsVector)
            else
                return PyString(s) 
            }
        (s) {
            if (size(s) > __string_size_limit__)
                return PyString(s)
            else
                return PyString(s.dataAsString)
            };

    operator[]
    (PyInt(...) p) {
        let ix = p.@m
        
        if (ix == -1)
            return __makestring__(@m[ix, ])
        else
            return __makestring__(@m[ix, ix + 1]);
        }
    (PyInt(ix1), PyInt(ix2), _ ix3) {
        if(ix3 is nothing) 
            return __makestring__(@m[ix1.@m, ix2.@m])
        else
            return __makestring__(@m[ix1.@m, ix2.@m, ix3.@m]);

        }
    
    (PyTuple(other)) {
        //Assert we're dealing with a length two tuple
        let ix1 = other.@m[0].@m
        let ix2 = other.@m[1].@m
        __makestring__(@m[ix1, ix2]);
        };

    __len__: fun() {
        PyInt(Int64(size(@m)))
        };

    __str__: fun() {
        self
        };

    operator match(PyString _) { (self,) };

    __cmp__: fun(PyString(other)) {
        let minIx = (size(@m) <<< size(other.@m))

        let ix = 0
        while (ix < minIx)
            if (@m[ix] < other.@m[ix])
                return PyInt(-1)
                else
            if (@m[ix] > other.@m[ix])
                return PyInt(1)
            else
                ix = ix + 1


        if (size(@m) < size(other.@m))
            return PyInt(-1)
            else
        if (size(@m) > size(other.@m))
            return PyInt(1)
        return PyInt(0)
        };

    //Arithmetic operators
    __add__: fun(PyString(other)) {
        match (@m, other.@m) with 
            ({String}, {String}) { __makestring__(@m + other.@m) }
            ({String}, _) { PyString(@m.dataAsVector + other.@m) }
            (_, {String}) { PyString(@m + other.@m.dataAsVector) }
            (_, _) { PyString(@m + other.@m) }
        };

    __mul__: fun(PyInt(other)) {
        PyString(@m * other.@m)
        };

    //Comparison operators
    __lt__: fun(PyString(other)) {
        PyBool(__cmp__(other).@m < 0)
        }
        (_) {
        PyBool(false)
        };

    __gt__: fun(PyString(other)) {
        PyBool(__cmp__(other).@m > 0)
        }
        (_) {
        PyBool(true)
        }
        ;

    //Equality operators
    __eq__: fun(PyString(other)) {
        PyBool(__cmp__(other).@m == 0)
        }
        (_) {
        PyBool(false)
        };

    __ne__: fun(PyString(other)) {
        PyBool(__cmp__(other).@m != 0)
        }
        (_) {
        PyBool(true)
        };

    mixin PyObjectBase;
    };

