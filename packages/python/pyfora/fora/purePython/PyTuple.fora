/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
class {
    member @m;
    
    //required because the AttributeError clause in the PyObjectBase mixin masks the
    //generated version of this attribute.
    ...(`Member, `@m) { @m };

    ...(`RawGetItemByInt, arg) {
        @m[arg]
        };

    __class__: TupleType;

    __getitem__: PyBoundMethod(self, fun(self, Slice(s)) {
        if (s.step.__class__ is not NoneType)
            throw NotImplementedError(
                PyString("step not yet implemented for tuple slicing")
                )
        return self[s.start.@m, s.stop.@m]
        }
        (self, ix) { self[ix] }
       );

    operator[]
    (PyInt(ix)) {
        self[ix.@m]
        }
    ({Int64} ix) {
        if (ix < -size(@m) or ix >= size(@m))
            throw IndexError(PyString("tuple index out of range"))
        return @m[ix]
        }
    (*args) {
        PyTuple(@m[*args])
        };

    index: PyBoundMethod(self, fun(self, value) {
        for ix in sequence(size(self.@m)) {
            if (Bool(self.@m[ix] == value))
                return PyInt(Int64(ix))
            }
        throw Exception(PyString("value is not in tuple"))
        });

    __iter__: PyBoundMethod(self, fun(self) {
        for x in self.@m
            yield x
        });

    __len__: PyBoundMethod(self, fun(self) {
        PyInt(Int64(size(self.@m)))
        });

    __str__: PyBoundMethod(self, fun(self) {
        if (self.@m is ())
            return PyString('()')

        let res = "("

        for e in self.@m
            res = res + "," + StrType(e).@m

        PyString(res + ")")
        });

    operator match(PyTuple _) { (self,) };

    operator match((#TupleAssign, expectedSize)) { 
        if (size(@m)==expectedSize) 
            return @m  
        if (size(@m) < expectedSize)
            throw ValueError(PyString("need more than " + String(size(@m)) + " values to unpack"))
        else
            throw ValueError(PyString("Too many values to unpack"))
        };

    operator+(PyTuple(other)) {
        PyTuple(@m + other.@m)
        };

    operator iterator() {
        for val in @m
            yield val
        };

    operator in (elt) {
        PyBool(elt in @m)
        };

    convert(Bool _) { @m is not () };

    mixin PyObjectBase;
    };

