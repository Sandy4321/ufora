
script(id="dynamicPopover.html", type="text/ng-template")
  .dynamic-popover(ng-init='shown = false', click-anywhere-but-here='changeVisibility(false)')
    span.placeholder
      | {{ placeholder }}
    .label.label-info(ng-show='buttonVisible != "false" && buttonVisible != false') ...
    div(class='popover angularized fade')
      .arrow
      .popover-content
        .content(ng-if='!scroller') {{ $parent.content }}
        .scroll(ng-if='scroller')
          .content {{ $parent.content }}

script(id="multiSizeRenderer.html", type="text/ng-template")
  .multi-size
    .large(ng-if="::value.mode == 'large'")
      renderer(value='::fullValue')
    .small(ng-if="::value.mode == 'inline'")
      dynamic-popover(scroller='true', button-visible='false')
        renderer(value='::smallValue', popover-placeholder)
        renderer(value='::fullValue', popover-content)

script(id="plotRenderer.html", type="text/ng-template")
  .plot
    .spinner
      .loading-ajax-spinner
    line-plot-renderer(value='::value', 'ng-if'="isLinePlot", 'on-rendered'='processTitleAndAxisLabels')
    bar-plot-renderer(value='::value', 'ng-if'="isBarPlot", 'on-rendered'='processTitleAndAxisLabels')
    scatter-plot-renderer(value='::value', 'ng-if'="isScatterPlot", 'on-rendered'='processTitleAndAxisLabels')
    surface-plot-renderer(value='::value', 'ng-if'="isSurfacePlot", 'on-rendered'='processTitleAndAxisLabels')
    fallback-renderer(value='::value', 'ng-if'="isOtherPlot")

script(id="linePlotRenderer.html", type="text/ng-template")
  div.line-plot
    div(class="plot-results")
    .title.plot-label
    .xaxis.plot-label
    .yaxis.plot-label

script(id="barPlotRenderer.html", type="text/ng-template")
  .HashPlot.bar-plot
    | &nbsp;

script(id="scatterPlotRenderer.html", type="text/ng-template")
  .HashPlot.scatter-plot
    | &nbsp;

script(id="surfacePlotRenderer.html", type="text/ng-template")
  .HashPlot.surface-plot
    | &nbsp;

script(id="javascriptRenderer.html", type="text/ng-template")
  .javascript
    iframe(frameBorder="0", width="100%", scrolling="no")

script(id="vectorRenderer.html", type="text/ng-template")
  // TODO: Implement the real vector renderer logic
  div.table-pane
    table.table.table-condensed.table-bordered.table-hover
      tr(ng-repeat="child in ::value.value")
        td.active-header
          | {{ $index }}
        td.table-cell
          renderer(value="::child")

script(id="objectRenderer.html", type="text/ng-template")
  div.object
    grid-renderer(value='::value', 'ng-if'='isGrid')
    class-renderer(value='::value', 'ng-if'='isClass')

script(id="gridRenderer.html", type="text/ng-template")
  div.table-pane
    table.table.table-condensed.table-bordered
      thead
        tr
          td.active.header &nbsp;
          td('ng-repeat'='header in headers', class='active header') {{ ::header }}
      tbody
        tr('ng-repeat'='row in rows track by row.index')
          td.active.header {{ $index }}
          td('ng-repeat'='col in row.columns track by col.index', class='grid-cell')
            computed-value(value='::col.value', 'ng-if'='!col.stillComputing', 'show-controls'='false', parent-mode='::value.renderer.modes[value.mode]')

script(id="tupleRenderer.html", type="text/ng-template")
  div.table-pane
    table.table.table-condensed.table-bordered.table-hover
      tr
        td.table-cell(ng-repeat="child in ::value.value")
          renderer(value="child")

script(id="dictionaryRenderer.html", type="text/ng-template")
  div.table-pane
    table.table.table-condensed.table-bordered.table-hover
      tr(ng-repeat="child in ::value.value")
        td.active-header
          | {{ child[0] }}
        td.table-cell
          renderer(ng-init="childValue=child[1]", value="childValue")

script(id="jovRenderer.html", type="text/ng-template")
  span.jov
    | {{ jovContent }}

script(id="markdownRenderer.html", type="text/ng-template")
  span.markdown
    | {{ markdownContent }}

script(id="classRenderer.html", type="text/ng-template")
  span.class
    dynamic-popover(placeholder='placeholder', scroller='true')
      .class-content(popover-content, ng-bind-html='content')

script(id="helpRenderer.html", type="text/ng-template")
  span.help(ng-bind-html="helpContent")

script(id="numericRenderer.html", type="text/ng-template")
  span.numeric
    | {{ formattedValue }}{{ suffix }}

script(id="stringRenderer.html", type="text/ng-template")
  span.string
    dynamic-popover(content='content', placeholder='placeholder', scroller='true')

script(id="symbolRenderer.html", type="text/ng-template")
  span.symbol `{{ value.value }}

script(id="tagRenderer.html", type="text/ng-template")
  span.tag &#35;{{ value.value }}

script(id="dateTimeRenderer.html", type="text/ng-template")
  span.date-time
    {{ stringValue }}

script(type="text/ng-template", id="computedValue.html")
    .computed-value-view(id='cv-{{::value.cid}}', data-cvv-hash='{{::value.id}}', ng-init="::currentTab = 'results'")
      .metadata('ng-if'='::showControls == "true"')
        | Line&nbsp;

        span.line-number {{ ::$parent.lineNumber }}
        span &nbsp;&middot;&nbsp;
        a(ng-click="$parent.currentTab = 'results'", class="section-link", ng-class="{tabSelected: $parent.currentTab == 'results'}") Result
        span &nbsp;&middot;&nbsp;
        a(ng-click="$parent.currentTab = 'stats'", class="section-link", ng-class="{tabSelected: $parent.currentTab == 'stats'}") Stats
        span(ng-show="::$parent.downloadUrl") &nbsp;&middot;&nbsp;
        a(ng-href="{{ ::$parent.downloadUrl }}", target="_blank", ng-show="::$parent.downloadUrl") Download
        span &nbsp;&middot;&nbsp;
        a(ng-click="$parent.currentTab = 'help'", class="section-link") Help
        span.is-blocked(ng-show="$parent.hasUnfinishedDependencies")
          &nbsp;&middot;&nbsp; <b>(Waiting on dependencies)</b>
        span.is-out-of-date(ng-show="::$parent.isOutOfDate")
          &nbsp;&middot;&nbsp; <b>(Out of Date)</b>
        &nbsp;&middot;&nbsp; Time to compute:
        span.timer
      .result(ng-show="currentTab == 'results'")
      .stats(ng-show="currentTab == 'stats'")
        table.table.table-condensed.stats-table
          tbody
            tr(ng-repeat="value in stats")
              th.stats-label
                {{ value.title }}
              td(style="padding:0px;padding-left:5px")
                {{ value | foraStats }}
      .stats(ng-show="currentTab == 'help'")
        .help-container(ng-bind-html="help")
      .overlay(ng-show="loading && currentTab == 'results'")
        .loading
          .loading-ajax-spinner
          .label.label-info.worker-count
            ng-pluralize(count="workerCount", when="{'0': '0 cores', 'one': '1 core', 'other': '{} cores'}")
          .label.label-success.cacheload-count(ng-show="cacheCount")
            ng-pluralize(count="cacheCount", when="{'0': '0 data loads', 'one': '1 data load', 'other': '{} data loads'}")
          a.stop(ng-click="::cancelComputation()")
            i.icon-close
