/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "NeighborhoodSpectralTree.hppml"
#include "NeighborhoodTestUtil.hppml"

#include "../../core/Clock.hpp"
#include "../../core/Logging.hpp"
#include "../../core/UnitTest.hpp"
#include "../../core/Memory.hpp"

using std::string;
using namespace Cumulus::PageLayoutCalculator;
using namespace Cumulus::PageLayoutCalculator::NeighborhoodTestUtil;


BOOST_AUTO_TEST_CASE( test_NeighborhoodSpectralTree )
	{
	long cols = 50;
	long rows = 100;

	NeighborhoodSpectralTreeParams params(1);

	params.largestBlockSize() = 1024L * 1024L * 1024L * 20L;

	auto tree = NeighborhoodSpectralTree::construct(params);

	long slices = 10;
	for (long slice = 0; slice < slices; slice++)
		{
		double t0 = curClock();
		for (long r = 0; r < rows; r++)
			for (long c1 = 0; c1 < cols; c1++)
				for (long c2 = 0; c2 < cols; c2++)
					if (c1 < c2 && (hash_type(c1) + hash_type(c2) + hash_type(r))[0] % slices == slice)
						tree->addNeighborhood(
							Neighborhood() + page(r,c1) + page(r,c2) + page(r+1,c1) + page(r+1,c2)
							);

		tree->update();
		LOG_INFO << "Update slice " << slice << " took " << curClock() - t0 
			<< ". " << tree->proximateReplicationFactor() << " and " << tree->outputReplicationFactor()
			<< ". total=" << tree->allNeighborhoodCount();

		BOOST_CHECK(tree->outputReplicationFactor() < 1.25);
		}
	}

BOOST_AUTO_TEST_CASE( test_NeighborhoodSpectralTree_overlap )
	{
	long cols = 30;
	long rows = 60;

	double mem = 5L * 1024 * 1024 * 1024;

	NeighborhoodSpectralTreeParams params(1);

	auto tree = NeighborhoodSpectralTree::construct(params);
	auto tree2 = NeighborhoodSpectralTree::construct(params);

	double incrementalT0 = curClock();

	long slices = 100;
	for (long slice = 0; slice < slices; slice++)
		{
		Ufora::math::Random::Uniform<double> rando(2);

		for (long r = 0; r < rows; r++)
			{
			for (long c1 = slice * 2; c1 < slice * 2 + 2; c1++)
				for (long c2 = slice * 2; c2 < slice * 2 + 2; c2++)
					{
					tree->addNeighborhood(
						Neighborhood() + page(r,c1) + page(r,c2) + page((r+1)%rows,c1) + page((r+1)%rows,c2)
						);
					tree2->addNeighborhood(
						Neighborhood() + page(r,c1) + page(r,c2) + page((r+1)%rows,c1) + page((r+1)%rows,c2)
						);
					}
			}

		tree->update();
		}

	double totalTimeUpdatingIncrementally = curClock() - incrementalT0;

	double wholeTreeT0 = curClock();
	tree2->update();
	double totalTimeUpdatingAllAtOnce = curClock() - wholeTreeT0;

	//updating incrementally shouldn't be much slower than updating all at once.
	//in our original implementation, each update took about .4 seconds
	BOOST_CHECK(totalTimeUpdatingIncrementally < totalTimeUpdatingAllAtOnce * 10);
	}

/*
BOOST_AUTO_TEST_CASE( test_NeighborhoodSpectralTree_overlap )
	{
	long cols = 20;
	long rows = 40;

	double mem = 5L * 1024 * 1024 * 1024;

	NeighborhoodSpectralTreeParams params(1);

	auto tree = NeighborhoodSpectralTree::construct(params);

	Ufora::math::Random::Uniform<double> rando;
	double fracToKeep = .5;

	for (long r = 0; r < rows-1; r++)
		for (long c1 = 0; c1 < cols; c1++)
			for (long c2 = 0; c2 < cols; c2++)
				if (c1 < c2)
					if (rando() < fracToKeep)
						tree->addNeighborhood(
							Neighborhood() + page(r,c1) + page(r,c2) + page((r+1)%rows,c1) + page((r+1)%rows,c2)
							);


	for (long c = 0; c < cols-1; c++)
		for (long r1 = 0; r1 < rows; r1++)
			for (long r2 = 0; r2 < rows; r2++)
				if (r1 < r2)
					if (rando() < fracToKeep)
						{
						tree->addNeighborhood(
							Neighborhood() + page(r1,c) + page(r2,c) + page(r1,(c+1)%cols) + page(r2,(c+1)%cols)
							);
						}

	LOG_INFO << "Replication factor: " << tree->outputReplicationFactor();
	}

namespace {

std::string operator+(std::string s, long l)
	{
	return s + boost::lexical_cast<std::string>(l);
	}

void sep(NeighborhoodSpectrumCalculator& calc)
	{
	for (long k = 0; k < 100; k++)
		calc.updateAllIndicesAndDimensions();

	calc.dumpInOrder(string("out-pos.py"));

	calc.addImage();

	calc.splitByAverageDistance(0, .75);

	for (long k = 0; k < 100; k++)
		calc.updateAllIndicesAndDimensions();

	LOG_INFO << "eigenvalueLow: " << calc.impliedEigenvalue(0, 0);
	LOG_INFO << "eigenvalueHigh: " << calc.impliedEigenvalue(1, 0);
	LOG_INFO << "weights: " << calc.totalWeight(0) << " vs. " << calc.totalWeight(1);
	LOG_INFO << "";

	double extremeWeight = .9999999;

	for (long passes = 0; passes < 100; passes++)
		{
		double totalWeightExchanged = calc.splitWeights(.9999999, 0.0001, 2.0);
		
		calc.updateAllIndicesAndDimensions();

		LOG_INFO << "changed: " << totalWeightExchanged;
		LOG_INFO << "eigenvalueLow: " << calc.impliedEigenvalue(0,0) << " w/ total weight " << calc.totalWeight(0);
		LOG_INFO << "eigenvalueHigh: " << calc.impliedEigenvalue(1,0) << " w/ total weight " << calc.totalWeight(1);
		}

	std::set<Fora::PageId> pages;
	for (long k = 0; k< calc.indexCount();k++)
		if (calc.isActive(k))
			for (auto p: calc.neighborhoodForIndex(k).pages())
				pages.insert(p);

	std::vector<Fora::PageId> pagesSorted;
	for (auto p: pages)
		pagesSorted.push_back(p);
	
	calc.dumpPages(string("out-pos-low-pages.py"), pagesSorted, 0);
	calc.dumpPages(string("out-pos-high-pages.py"), pagesSorted, 1);

	calc.dumpInOrder(string("out-pos-low.py"), 0);
	calc.dumpInOrder(string("out-pos-high.py"), 1);
	}

void sepSimple(NeighborhoodSpectrumCalculator& calc)
	{
	for (long k = 1; k < 500; k++)
		{
		for (long x = 0; x < 100; x++)
			calc.updateAllIndicesAndDimensions();
		
		LOGGER_TEST_T log = LOGGER_TEST;

		log << k * 100 << ": ";
		for (long d = 0; d < calc.dimensionCount(); d++)
			log << calc.impliedEigenvalue(0,d) << "  ";

		calc.dumpInOrder(string("out-pos-") + k + ".py");
		calc.dump(string("out-pos-") + k + "-ordered.py");
		}
	}
}

pair<NeighborhoodSet, NeighborhoodSet> splitUsingSpectrum(NeighborhoodSet ns)
	{
	NeighborhoodSpectrumCalculator calc(1);

	for (auto n: ns.allNeighborhoods())
		calc.addNeighborhood(n);

	calc.updateUntilEigenvaluesHaveStabilized();

	NeighborhoodSet n1, n2;

	for (long k = 0; k < calc.indexCount();k++)
		if (calc.isActive(k))
			{
			if (calc.position(0,k,0) > 0.0)
				n1.addNeighborhood(calc.neighborhoodForIndex(k));
			else
				n2.addNeighborhood(calc.neighborhoodForIndex(k));
			}

	return make_pair(n1, n2);
	}

BOOST_AUTO_TEST_CASE( test_NeighborhoodSpectralTree_group_separation )
	{
	long cols = 100;

	for (double ratio = 0.001; ratio < .10; ratio += 0.001)
		{	
		NeighborhoodSet ns;

		Ufora::math::Random::Uniform<double> rando(1);

		long added = 0;
		for (long c1 = 0; c1 < cols; c1++)
			{
			if (c1 + 1 < cols)
				ns.addNeighborhood(Neighborhood()+page(0,c1)+page(0,c1+1));
			for (long c2 = 0; c2 < cols; c2++)
				if (c1+1 < c2 && rando() < ratio)
					ns.addNeighborhood(Neighborhood()+page(0,c1)+page(0,c2));
			}

		pair<NeighborhoodSet, NeighborhoodSet> lr = splitUsingSpectrum(ns);

		auto lrL = splitUsingSpectrum(lr.first);
		auto lrR = splitUsingSpectrum(lr.second);

		LOG_INFO 
			<< "With " << ns.allNeighborhoods().size() / float(cols) * 2 << " per col, "
			<< lr.first.bytesInPages() / 1024 / 1024.0 
			<< " and " << lr.second.bytesInPages() / 1024 / 1024.0
			<< " make excess of " 
			<< (lr.first.bytesInPages() + lr.second.bytesInPages()) / 1024 / 1024.0
			<< " = "
			<< (lr.first.bytesInPages() + lr.first.bytesInPages()) / double(ns.bytesInPages())
			<< ". subratios="
			<< (lrL.first.bytesInPages() + lrL.second.bytesInPages()) / double(lr.first.bytesInPages())
			<< " and "
			<< (lrR.first.bytesInPages() + lrR.second.bytesInPages()) / double(lr.second.bytesInPages())
			;
		}
	}


BOOST_AUTO_TEST_CASE( test_NeighborhoodSpectralTree_overlap_eigenvalue_search )
	{
	for (long rows = 10; rows < 50; rows++)
		for (long cols = rows; cols < rows+2; cols++)
			{
			NeighborhoodSpectrumCalculator calc(10);

			for (long r = 0; r < rows-1; r++)
				for (long c1 = 0; c1 < cols; c1++)
					for (long c2 = 0; c2 < cols; c2++)
						if (c1 < c2)
							{
							calc.addNeighborhood(
								Neighborhood() + page(r,c1) + page(r,c2) + page( (r+1) % rows,c1) + page((r+1)%rows,c2) + page(-1,-1)
								);
							}

			for (long c = 0; c < cols-1; c++)
				for (long r1 = 0; r1 < rows; r1++)
					for (long r2 = 0; r2 < rows; r2++)
						if (r1 < r2)
							{
							Neighborhood n = Neighborhood() + page(r1,c) + page(r2,c) + page(r1,(c+1)%cols) + page(r2,(c+1)%cols) + page(-1,-1);

							if (!calc.hasNeighborhood(n))
								calc.addNeighborhood(n);
							}

			for (long updates = 0; updates < 3; updates++)
				{
				for (long x = 0; x < 1000; x++)
					calc.updateAllIndicesAndDimensions();

				LOGGER_TEST_T log = LOGGER_TEST;
				log << rows << " and " << cols << ", update " << updates << ": ";

				for (long ix = 0; ix < calc.dimensionCount(); ix++)
					if (ix == 0)
						log << calc.impliedEigenvalue(0,ix) << "   ";
					else
						log << (calc.impliedEigenvalue(0,ix) - calc.impliedEigenvalue(0,ix-1)) << "   ";

				calc.dumpInOrder(string("out-pos-") + rows + "x" + cols + "-" + updates + ".py");
				}
			}
	}

BOOST_AUTO_TEST_CASE( test_NeighborhoodSpectralTree_overlap_eigenvalue_rotation )
	{
	long rows = 20;
	long cols = 20;

	NeighborhoodSpectrumCalculator calc(10);

	for (long r = 0; r < rows-1; r++)
		for (long c1 = 0; c1 < cols; c1++)
			for (long c2 = 0; c2 < cols; c2++)
				if (c1 < c2)
					{
					calc.addNeighborhood(
						Neighborhood() + page(r,c1) + page(r,c2) + page( (r+1) % rows,c1) + page((r+1)%rows,c2)
						);
					}

	for (long c = 0; c < cols-1; c++)
		for (long r1 = 0; r1 < rows; r1++)
			for (long r2 = 0; r2 < rows; r2++)
				if (r1 < r2)
					{
					Neighborhood n = Neighborhood() + page(r1,c) + page(r2,c) + page(r1,(c+1)%cols) + page(r2,(c+1)%cols);

					if (!calc.hasNeighborhood(n))
						calc.addNeighborhood(n);
					}

	for (long x = 0; x < 1000; x++)
		calc.updateAllIndicesAndDimensions();

	//now look for a rotation in the first two eigenvectors that separates optimally
	for (long k = 0; k < 50; k++)
		{
		calc.rotateFirstTwoDimensions(3.1415926 * 2.0 / 50.0);
		LOG_INFO << k << ": " << calc.totalMinDistanceAmongstFirstTwoDimensions();
		calc.dumpInOrder(string("out-pos-rotated-") + k + ".py");
		}
	}

BOOST_AUTO_TEST_CASE( test_NeighborhoodSpectralTree_overlap_eigenvalue_pairs )
	{
	long rows = 36;
	long cols = 40;

	NeighborhoodSpectrumCalculator calc(10);

	Ufora::math::Random::Uniform<double> rando;

	double ratio = .10;

	for (long r = 0; r < rows-1; r++)
		for (long c1 = 0; c1 < cols; c1++)
			for (long c2 = 0; c2 < cols; c2++)
				if (c1 < c2 && rando() < ratio)
					{
					calc.addNeighborhood(
						Neighborhood() + page(r,c1) + page(r,c2) + page( (r+1) % rows,c1) + page((r+1)%rows,c2)
						);
					}

	for (long c = 0; c < cols-1; c++)
		for (long r1 = 0; r1 < rows; r1++)
			for (long r2 = 0; r2 < rows; r2++)
				if (r1 < r2 && rando() < ratio)
					{
					Neighborhood n = Neighborhood() + page(r1,c) + page(r2,c) + page(r1,(c+1)%cols) + page(r2,(c+1)%cols);

					if (!calc.hasNeighborhood(n))
						calc.addNeighborhood(n);
					}

	for (long dim = 0; dim < calc.dimensionCount();dim++)
		{
		double lastEV = 0.0;
		for (long pass = 0; pass < 20;pass++)
			{
			for (long x = 0; x < 100; x++)
				calc.updateIndicesInDimension(0, dim);
			double newEV = calc.impliedEigenvalue(0, dim);

			if (std::abs(newEV - lastEV) < 0.0000001)
				break;

			lastEV = newEV;
			LOG_INFO << "pass " << pass*100 << ", dim " << dim << " = " << newEV;
			}
		}

	calc.dumpInOrder("out.py");

	ofstream s("out_distances.py");

	std::vector<long> v1;
	v1.push_back(0);
	
	std::vector<long> v2;
	v2.push_back(calc.bestDimensionToAdd(v1, v2));

	s << "groups=[";

	for (long passes = 0; passes < 4; passes++)
		{
		if (passes > 0)
			{
			v1.push_back(calc.bestDimensionToAdd(v2,v1));
			v2.push_back(calc.bestDimensionToAdd(v1, v2));
			}

		s << "[";

		for (long ix = 0; ix < calc.indexCount();ix++)
			if (calc.isActive(ix))
				s << calc.bestDimensionGroupFor(ix, v1, v2) << ",";

		s << "],\n";
		}
	s << "]\n";

	LOG_INFO << "Dims are: " << v1 << " and " << v2;

	for (long d1 = 0; d1 < calc.dimensionCount(); d1++)
		{
		LOGGER_TEST_T log = LOGGER_TEST;

		for (long d2 = 0; d2 < calc.dimensionCount(); d2++)
			log << std::fixed << std::setprecision(3) << calc.correlationBetweenSquaredPositions(0, d1, d2) << "    ";
		}

	calc.addImage();


	for (long ix = 0; ix < calc.indexCount();ix++)
		if (calc.isActive(ix))
			if (calc.bestDimensionGroupFor(ix, v1, v2) == 1)
				{
				calc.setWeight(0, ix, .99);
				calc.setWeight(1, ix, .01);
				}
			else
				{
				calc.setWeight(0, ix, .01);
				calc.setWeight(1, ix, .99);
				}

	calc.setDimensions(3);

	for (long k = 0; k < 10; k++)
		calc.updateAllIndicesAndDimensions();

	calc.dumpInOrder("out-1-0.py", 0, 0.1);
	calc.dumpInOrder("out-2-0.py", 1, 0.1);

	for (long k = 0; k < 20; k++)
		{
		calc.splitWeights();

		for (long k = 0; k < 10; k++)
			calc.updateAllIndicesAndDimensions();
		}

	calc.dumpInOrder("out-1-1.py", 0, 0.1);
	calc.dumpInOrder("out-2-1.py", 1, 0.1);
	}

BOOST_AUTO_TEST_CASE( test_NeighborhoodSpectralTree_overlap_columns )
	{
	long cols = 30;
	long rows = 100;

	NeighborhoodSpectrumCalculator calc(10);

	for (long r = 0; r < rows-1; r++)
		for (long c = 0; c < cols; c++)
			calc.addNeighborhood(
				Neighborhood() + page(r,c) + page(r,0) + page(r+1, c) + page(r+1,0)
				);

	sepSimple(calc);
	}


BOOST_AUTO_TEST_CASE( test_NeighborhoodSpectralTree_overlap_2 )
	{
	long cols = 20;
	long rows = 40;

	NeighborhoodSpectrumCalculator calc(10);

	for (long r = 0; r < rows-1; r++)
		for (long c1 = 0; c1 < cols; c1++)
			for (long c2 = 0; c2 < cols; c2++)
				if (c1 < c2)
					{
					calc.addNeighborhood(
						Neighborhood() + page(r,c1) + page(r,c2) + page( (r+1) % rows,c1) + page((r+1)%rows,c2)
						);
					}

	for (long c = 0; c < cols-1; c++)
		for (long r1 = 0; r1 < rows; r1++)
			for (long r2 = 0; r2 < rows; r2++)
				if (r1 < r2)
					{
					calc.addNeighborhood(
						Neighborhood() + page(r1,c) + page(r2,c) + page(r1,(c+1)%cols) + page(r2,(c+1)%cols)
						);
					}
	
	sepSimple(calc);
	}

BOOST_AUTO_TEST_CASE( test_NeighborhoodSpectralTree_overlap_3 )
	{
	long cols = 15;

	Ufora::math::Random::Uniform<double> rando(1);

	NeighborhoodSpectrumCalculator calc(2);

	for (long r = 0; r < cols-1; r++)
		for (long d = 0; d < cols-1; d++)
			for (long c1 = 0; c1 < cols; c1++)
				for (long c2 = 0; c2 < cols; c2++)
					if (c1 < c2)
						{
						if (rando() < .5)
						calc.addNeighborhood(
							Neighborhood() + 
								page(r,c1,d) + page(r,c2,d) + 
								page(r+1,c1,d) + page(r+1,c2,d) + 
								page(r,c1,d+1) + page(r,c2,d+1) + 
								page(r+1,c1,d+1) + page(r+1,c2,d+1)
							);
						}

	for (long r = 0; r < cols-1; r++)
		for (long d = 0; d < cols-1; d++)
			for (long c1 = 0; c1 < cols; c1++)
				for (long c2 = 0; c2 < cols; c2++)
					if (c1 < c2)
						{
						if (rando() < .5)
						calc.addNeighborhood(
							Neighborhood() + 
								page(c1,r,d) + page(c2,r,d) + 
								page(c1,r+1,d) + page(c2,r+1,d) + 
								page(c1,r,d+1) + page(c2,r,d+1) + 
								page(c1,r+1,d+1) + page(c2,r+1,d+1)
							);
						}

	for (long r = 0; r < cols-1; r++)
		for (long d = 0; d < cols-1; d++)
			for (long c1 = 0; c1 < cols; c1++)
				for (long c2 = 0; c2 < cols; c2++)
					if (c1 < c2)
						{
						if (rando() < .5)
						calc.addNeighborhood(
							Neighborhood() + 
								page(r,d,c1) + page(r,d,c2) + 
								page(r+1,d,c1) + page(r+1,d,c2) + 
								page(r,d+1,c1) + page(r,d+1,c2) + 
								page(r+1,d+1,c1) + page(r+1,d+1,c2)
							);
						}

	sep(calc);
	}

BOOST_AUTO_TEST_CASE( test_NeighborhoodSpectralTree_overlap_4 )
	{
	long pageCount = 100;

	Ufora::math::Random::Uniform<double> rando(1);

	NeighborhoodSpectrumCalculator calc(2);

	for (long p1 = 0; p1 < pageCount; p1++)
		for (long p2 = 0; p2 < pageCount; p2++)
			if (p1 < p2)
				calc.addNeighborhood(Neighborhood() + page(p1,0) + page(p2,0));

	sep(calc);
	}
*/
