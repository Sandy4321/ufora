/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "NeighborhoodsOnMachines.hppml"

namespace Cumulus {
namespace PageLayoutCalculator {

class ShortTermPageLayoutCalculator {
public:
	ShortTermPageLayoutCalculator(
				const std::set<MachineId>& inMachines,
				const std::map<MachineId, int64_t>& inMachineSizes,
				const NeighborhoodsOnMachines& currentLayout, 
				const NeighborhoodsOnMachines& longTermTarget,
				NeighborhoodsOnMachines& targetLayout,
				double maxRatioToAdd,
				double maxFractionOfMemoryToUseAtOnce
				) :
			mMachines(inMachines),
			mMachineSizes(inMachineSizes),
			mCurrentLayout(currentLayout),
			mTargetLayout(targetLayout),
			mLongTermLayout(longTermTarget),
			mMaxRatioToAdd(maxRatioToAdd),
			mMemoryRatio(maxFractionOfMemoryToUseAtOnce),
			mMaxBytesToAdd(250 * 1024 * 1024)
		{
		}

	void initialize()
		{
		//we want to update our target layout given this long-term layout. In general, we need
		//to meet the following constraints:

		//1. we have a maximum number of pages we can add to a machine at a time
		//2. if a page is added to a machine in the current target, but hasn't been realized
		//		on the target, we can't remove it
		//3. if a page is present anywhere in the target layout, we can't drop it
		//4. we want to add pages to machines in the order they present in the long-term target
		//5. we don't want to drop any pages unless we have a good reason to do so

		targetLayoutBecomesCurrentLayoutPlusUnmetAdds();

		initializeAddRemoveSets();
		}

	void update()
		{
		//fix any overloaded machines
		for (auto m: mMachines)
			tryToFixMachineOverload(m);

		while (true)
			{
			bool any = false;
			for (auto m: mMachines)
				if (tryToFixMachineOverload(m))
					any = true;
				
			for (auto m: mMachines)
				if (addAPageTo(m))
					any = true;

			if (!any)
				break;
			}
		}

	void ensurePageIsMaintainedOnSystem(Fora::PageId p)
		{
		mPagesToNotDropEverywhere.insert(p);
		}

	bool tryToRealize(Neighborhood n, MachineId machine)
		{
		return tryToRealize(n, null() << machine);
		}

	bool tryToRealize(Neighborhood n)
		{
		return tryToRealize(n, null());
		}

	bool tryToRealize(Neighborhood n, Nullable<MachineId> preferredMachine)
		{
		Smallest<MachineId> bestMachine;

		for (auto m: mMachines)
			{
			int64_t bytesRequired = bytesNeededToAdd(n, m);

			if (!isOverloaded(m))
				bestMachine.observe(m, preferredMachine && m == *preferredMachine ? -1 : bytesRequired);
			}

		if (bestMachine.smallest())
			{
			MachineId m = *bestMachine.smallest();

			for (auto p: n.pages())
				{
				if (!pageIsExternalAndAlreadyBeingAdded(p))
					{
					if (!mTargetLayout.pageIsOnMachine(p, m))
						addPageToTarget(p, m);
					ensurePageStaysOnTarget(p, m);
					}
				}

			tryToFixMachineOverload(m);

			return true;
			}

		return false;
		}

	int64_t bytesNeededToAdd(Neighborhood n, MachineId m) const
		{
		int64_t res = 0;

		for (auto p: n.pages())
			if (!mTargetLayout.pageIsOnMachine(p, m))
				res += p.bytecount();

		return res;
		}

	void initializeAddRemoveSets()
		{
		for (auto m: mMachines)
			{
			mPagesToTryAdding[m] = mLongTermLayout.pageAddOrder(m);
			for (auto ixAndPage: mPagesToTryAdding[m])
				mPagesAnywhereInLongTermLayout.insert(ixAndPage.second);
			}

		for (auto m: mMachines)
			{
			for (auto p: mCurrentLayout.neighborhoodsForMachine(m).allPages())
				if (!mLongTermLayout.neighborhoodsForMachine(m).containsPage(p) && 
						mUnmetAdds[m].find(p) == mUnmetAdds[m].end())
					{
					if (mPagesAnywhereInLongTermLayout.find(p) == 
								mPagesAnywhereInLongTermLayout.end())
						mPagesToDropUnderPressure[m].insert(p);
					else
						mPagesToMoveToAnotherMachineUnderPressure[m].insert(p);
					}
			}
		}

	bool tryToFixMachineOverload(MachineId m)
		{
		bool didAnything = false;

		while (isOverloaded(m))
			if (!removePageFrom(m))
				return didAnything;
			else
				didAnything = true;

		return didAnything;
		}

	bool addAPageTo(MachineId m)
		{
		if (!canAddPageTo(m))
			return false;

		auto& toTry = mPagesToTryAdding[m];

		while (toTry.size())
			{
			Fora::PageId p = toTry.begin()->second;

			if (pageIsExternalAndAlreadyBeingAdded(p) || 
						mTargetLayout.neighborhoodsForMachine(m).containsPage(p))
				toTry.erase(toTry.begin());
			else
				{
				addPageToTarget(p, m);

				tryToFixMachineOverload(m);

				return true;
				}
			}

		return false;
		}

	bool pageIsExternalAndAlreadyBeingAdded(Fora::PageId p) const
		{
		if (p.isInternal())
			return false;

		return !mCurrentLayout.pageIsOnAnyMachine(p) && mTargetLayout.pageIsOnAnyMachine(p);
		}

	bool removePageFrom(MachineId m)
		{
		if (removePageFromMachineWithoutMoving(m))
			return true;

		return removePageFromMachineWithMoving(m);
		}

	bool removePageFromMachineWithMoving(MachineId m)
		{
		auto& candidates = mPagesToMoveToAnotherMachineUnderPressure[m];

		for (auto candidate: candidates)
			{
			for (auto otherMachine: mMachines)
				if (otherMachine != m && mTargetLayout.neighborhoodsForMachine(otherMachine).containsPage(candidate))
					{
					removePageFromTarget(candidate, m);
					candidates.erase(candidate);
					return true;
					}
					else
				if (otherMachine != m && !isOverloaded(otherMachine) && 
						mLongTermLayout.neighborhoodsForMachine(otherMachine)
							.containsPage(candidate))
					{
					removePageFromTarget(candidate, m);
					candidates.erase(candidate);
					if (!mTargetLayout.neighborhoodsForMachine(otherMachine).containsPage(candidate))
						addPageToTarget(candidate, otherMachine);
					return true;
					}
			}

		return false;
		}

	bool removePageFromMachineWithoutMoving(MachineId m)
		{
		auto& candidates = mPagesToDropUnderPressure[m];

		while (candidates.size())
			{
			Fora::PageId p = *candidates.begin();
			candidates.erase(p);

			if (mPagesToNotDropEverywhere.find(p) == mPagesToNotDropEverywhere.end() ||
					mTargetLayout.someMachineHoldingExcept(p, m))
				{
				removePageFromTarget(p, m);

				return true;
				}
			}

		return false;
		}

	bool canAddPageTo(MachineId m)
		{
		if (mMachineAdds[m] > std::max<int64_t>(sizeFor(m) * mMaxRatioToAdd, mMaxBytesToAdd))
			return false;

		return !isOverloaded(m);
		}

	bool isOverloaded(MachineId m)
		{
		if (bytesOnMachine(m) > sizeFor(m))
			return true;

		return false;
		}
	
	int64_t bytesOnMachine(MachineId m) const
		{
		int64_t res = mTargetLayout.bytesOnMachine(m);

		auto it = mTaskBytesAllocated.find(m);
		if (it == mTaskBytesAllocated.end())
			return res;
		else
			return res + it->second;
		}

	int64_t sizeFor(MachineId m) const
		{
		auto it = mMachineSizes.find(m);

		if (it == mMachineSizes.end())
			return 0;
		
		return it->second * mMemoryRatio;
		}

	void targetLayoutBecomesCurrentLayoutPlusUnmetAdds()
		{
		for (auto machine: mMachines)
			for (auto page: mTargetLayout.neighborhoodsForMachine(machine).allPages())
				if (!mCurrentLayout.neighborhoodsForMachine(machine).containsPage(page))
					mUnmetAdds[machine].insert(page);

		mTargetLayout = mCurrentLayout;

		for (auto machine: mMachines)
			for (auto page: mUnmetAdds[machine])
				addPageToTarget(page, machine);
		}

	void ensurePageStaysOnTarget(Fora::PageId page, MachineId machine)
		{
		mPagesToDropUnderPressure[machine].erase(page);
		mPagesToMoveToAnotherMachineUnderPressure[machine].erase(page);
		}

	void addPageToTarget(Fora::PageId page, MachineId machine)
		{
		mTargetLayout.addNeighborhood(machine, Neighborhood(page));
		mMachineAdds[machine] += page.bytecount();
		}

	void removePageFromTarget(Fora::PageId page, MachineId machine)
		{
		mTargetLayout.dropNeighborhood(machine, Neighborhood(page));
		}

private:
	std::map<MachineId, int64_t> mMachineAdds;

	int64_t mMaxBytesToAdd;

	std::map<MachineId, std::map<long, Fora::PageId> > mPagesToTryAdding;

	std::map<MachineId, std::set<Fora::PageId> > mPagesToDropUnderPressure;

	std::map<MachineId, std::set<Fora::PageId> > mPagesToMoveToAnotherMachineUnderPressure;

	std::map<MachineId, int64_t> mTaskBytesAllocated;

	const NeighborhoodsOnMachines& mCurrentLayout;

	const NeighborhoodsOnMachines& mLongTermLayout;

	std::map<MachineId, std::set<Fora::PageId> > mUnmetAdds;

	NeighborhoodsOnMachines& mTargetLayout;

	std::set<MachineId> mMachines;

	double mMaxRatioToAdd;

	double mMemoryRatio;

	const std::map<MachineId, int64_t>& mMachineSizes;

	std::set<Fora::PageId> mPagesAnywhereInLongTermLayout;

	std::set<Fora::PageId> mPagesToNotDropEverywhere;
};

}
}
