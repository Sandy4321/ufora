/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "../ComputationId.hppml"
#include "NeighborhoodsOnMachines.hppml"
#include "NeighborhoodChanges.hppml"
#include "GroupTrackingNeighborhoodSpectralTreeWatcher.hppml"

namespace Cumulus {

namespace PageLayoutCalculator {

/****************************

NeighborhoodLoadHistory

Tracks the loads placed on a set of neighborhoods. Some of these are in a history,
and some of these are currently active. We maintain a set of net adds and deletes

*****************************/

const static double aSmallNumber = 0.00000000000001;
const static double minimumLoadLevel = 0.0001;

class NeighborhoodLoadHistory {
public:
	@type Load = double computeSeconds, long count {
	public:
		Load& operator+=(const Load& otherLoad)
			{
			*this = *this + otherLoad;
			return *this;
			}

		Load& operator-=(const Load& otherLoad)
			{
			*this = *this - otherLoad;
			return *this;
			}

		Load operator+(Load otherLoad) const
			{
			return Load(
				computeSeconds() + otherLoad.computeSeconds(),
				count() + otherLoad.count()
				);
			}

		Load operator-(Load otherLoad) const
			{
			return Load(
				computeSeconds() - otherLoad.computeSeconds(),
				count() - otherLoad.count()
				);
			}

		Load operator-() const
			{
			return Load(-computeSeconds(), -count());
			}

		bool isEmpty() const
			{
			return count() == 0;
			}
	};

	class Block {
	public:
		Block() :
		 		mTotalSecondsElapsed(0)
			{
			}

		void addLoad(Neighborhood n, double load)
			{
			mTotalSecondsElapsed += load;
			mLoadPerNeighborhood[n] += load;

			if (!mGroupIdMap.hasKey(n))
				mNeighborhoodsWithoutGroupMap.insert(n);
			else
				mLoadPerFirstGroupLevel[mGroupIdMap.getValue(n)] += load;
			}

		double totalSecondsElapsed() const
			{
			return mTotalSecondsElapsed;
			}

		void observeGroupChange(Neighborhood n, GroupId g)
			{
			mNeighborhoodsWithoutGroupMap.erase(n);

			double existingLoad = 0.0;

			auto loadIt = mLoadPerNeighborhood.find(n);
			if (loadIt != mLoadPerNeighborhood.end())
				existingLoad = loadIt->second;

			if (mGroupIdMap.hasKey(n))
				{
				GroupId oldGroup = mGroupIdMap.getValue(n);
				mGroupIdMap.drop(n);
				if (!mGroupIdMap.hasValue(oldGroup))
					mLoadPerFirstGroupLevel.erase(oldGroup);
				else
					mLoadPerFirstGroupLevel[oldGroup] -= existingLoad;
				}

			mGroupIdMap.set(n,g);

			mLoadPerFirstGroupLevel[g] += loadIt->second;
			}

		void dropNeighborhood(Neighborhood n)
			{
			mNeighborhoodsWithoutGroupMap.erase(n);

			auto it = mLoadPerNeighborhood.find(n);
			
			double load = 0.0;
			if (it != mLoadPerNeighborhood.end())
				{
				load = it->second;
				mLoadPerNeighborhood.erase(it);
				}

			mTotalSecondsElapsed -= load;

			if (mGroupIdMap.hasKey(n))
				{
				GroupId g = mGroupIdMap.getValue(n);
				mLoadPerFirstGroupLevel[g] -= load;

				mGroupIdMap.drop(n);

				if (!mGroupIdMap.hasValue(g))
					mLoadPerFirstGroupLevel.erase(g);
				}
			}

		const std::map<GroupId, double>& loadPerFirstGroupLevel() const
			{
			return mLoadPerFirstGroupLevel;
			}

		const std::map<Neighborhood, double>& loadPerNeighborhood() const
			{
			return mLoadPerNeighborhood;
			}

		const std::map<Neighborhood, GroupId>& groupIdMap() const
			{
			return mGroupIdMap.getKeyToValue();
			}

		Nullable<Neighborhood> neighborhoodNeedingGroup() const
			{
			if (!mNeighborhoodsWithoutGroupMap.size())
				return null();
			return null() << *mNeighborhoodsWithoutGroupMap.begin();
			}

		const std::set<Neighborhood>& neighborhoodsWithoutGroup() const
			{
			return mNeighborhoodsWithoutGroupMap;
			}

		void rewriteNeighborhood(Neighborhood from, Neighborhood to)
			{
			auto it = mLoadPerNeighborhood.find(from);
			if (it == mLoadPerNeighborhood.end())
				return;

			double load = it->second;

			dropNeighborhood(from);

			addLoad(to, load);
			}

	private:
		std::map<Neighborhood, double> mLoadPerNeighborhood;

		MapWithIndex<Neighborhood, GroupId> mGroupIdMap;

		std::set<Neighborhood> mNeighborhoodsWithoutGroupMap;

		std::map<GroupId, double> mLoadPerFirstGroupLevel;

		double mTotalSecondsElapsed;
	};

	NeighborhoodLoadHistory(double inBlockSizeInSeconds = 120.0) :
			mAccumulatedLoad(0),
			mBlockSizeInSeconds(inBlockSizeInSeconds)
		{
		}

	void setBlockSizeInSeconds(double in)
		{
		mBlockSizeInSeconds = in;
		}

	const std::deque<boost::shared_ptr<Block> >& getBlocks() const
		{
		return mBlocks;
		}

	Neighborhood loadedNeighborhoodForComputation(ComputationId id) const
		{
		return mActiveLoadNeighborhoods.getValue(id);
		}

	void updateBlockLoads(
			const GroupTrackingNeighborhoodSpectralTreeWatcher& treeWatcher
			)
		{
		for (const auto& neighborhoodAndNewGroup: treeWatcher.neighborhoodsMovedOrAdded())
			{
			Neighborhood n = neighborhoodAndNewGroup.first;
			Nullable<GroupId> source = neighborhoodAndNewGroup.second.first;
			Nullable<GroupId> dest = neighborhoodAndNewGroup.second.second;

			if (dest)
				for (auto& blockPtr: mNeighborhoodsToBlocks.getValues(n))
					blockPtr->observeGroupChange(n,*dest);
			}
		}

	void setComputationLoad(
				ComputationId computationId, 
				Neighborhood neighborhood, 
				double loadInSeconds
				)
		{
		if (neighborhood.pages().size() == 0)
			{
			dropComputationLoad(computationId);
			return;
			}

		if (mActiveLoads.find(computationId) != mActiveLoads.end())
			dropComputationLoad(computationId);

		Load load(loadInSeconds, 1);

		mActiveLoads[computationId] = load;
		mActiveLoadNeighborhoods.set(computationId, neighborhood);

		incrementLoad(neighborhood, load);
		}

	//this level of load was actually observed
	void observeActualLoad(
				Neighborhood neighborhood,
				double loadInSeconds
				)
		{
		if (neighborhood.pages().size() == 0)
			return;

		bool isNew = mTotalLoad.find(neighborhood) == mTotalLoad.end();

		Load load(loadInSeconds, 1);

		if (!mBlocks.size() || mBlocks.back()->totalSecondsElapsed() > mBlockSizeInSeconds)
			mBlocks.push_back(boost::shared_ptr<Block>(new Block()));

		mBlocks.back()->addLoad(neighborhood, loadInSeconds);
		mNeighborhoodsToBlocks.insert(neighborhood, mBlocks.back());

		incrementLoad(neighborhood, load);
		}

	void dropComputationLoad(ComputationId id)
		{
		auto it = mActiveLoads.find(id);

		if (it == mActiveLoads.end())
			return;

		Load load = it->second;

		decrementLoad(mActiveLoadNeighborhoods.getValue(id), load);

		mActiveLoads.erase(it);
		mActiveLoadNeighborhoods.drop(id);
		}

	NeighborhoodChanges& getChanges()
		{
		return mChanges;
		}

	double accumulatedLoadInSeconds() const
		{
		return mAccumulatedLoad;
		}

	const std::map<ComputationId, Load>& activeLoads() const
		{
		return mActiveLoads;
		}

	const std::map<Neighborhood, Load>& totalLoadPerNeighborhood() const
		{
		return mTotalLoad;
		}

	void pageDroppedAcrossSystem(Fora::PageId page)
		{
		std::set<ComputationId> compsToDrop;

		for (auto n: mPagesToNeighborhoods[page])
			for (auto c: mActiveLoadNeighborhoods.getKeys(n))
				compsToDrop.insert(c);

		for (auto c: compsToDrop)
			dropComputationLoad(c);
	
		std::set<Neighborhood> neighborhoodsToDrop = mPagesToNeighborhoods[page];

		for (auto n: neighborhoodsToDrop)
			{
			decrementLoad(n, mTotalLoad[n]);
			for (auto blockPtr: mNeighborhoodsToBlocks.getValues(n))
				blockPtr->dropNeighborhood(n);
			mNeighborhoodsToBlocks.dropKey(n);
			}
		}

	bool hasPageAnywhere(Fora::PageId page) const
		{
		return mPagesToNeighborhoods.find(page) != mPagesToNeighborhoods.end();
		}

	long neighborhoodsHoldingPage(Fora::PageId page) const
		{
		auto it = mPagesToNeighborhoods.find(page);

		if (it == mPagesToNeighborhoods.end())
			return 0;

		return it->second.size();
		}

	const MapWithIndex<ComputationId, Neighborhood>& activeLoadNeighborhoods() const
		{
		return mActiveLoadNeighborhoods;
		}

	const std::map<Fora::PageId, std::set<Neighborhood> >& pagesToNeighborhoods() const
		{
		return mPagesToNeighborhoods;
		}
	
private:
	void rewriteNeighborhood(Neighborhood from, Neighborhood to)
		{
		for (auto p: from.pages())
			{
			auto& neighborhoods = mPagesToNeighborhoods[p];

			neighborhoods.erase(from);

			if (neighborhoods.size() == 0)
				mPagesToNeighborhoods.erase(p);
			}
		
		for (auto p: to.pages())
			mPagesToNeighborhoods[p].insert(to);

		std::set<boost::shared_ptr<Block> > blocks = mNeighborhoodsToBlocks.getValues(from);
		mNeighborhoodsToBlocks.dropKey(from);

		for (auto b: blocks)
			{
			mNeighborhoodsToBlocks.insert(to, b);
			b->rewriteNeighborhood(from, to);
			}

		std::set<ComputationId> comps = mActiveLoadNeighborhoods.getKeys(from);
		mActiveLoadNeighborhoods.dropValue(from);
		for (auto c: comps)
			mActiveLoadNeighborhoods.set(c, to);

		if (mTotalLoad.find(to) == mTotalLoad.end())
			mChanges.addNeighborhood(to);
		mChanges.dropNeighborhood(from);

		mTotalLoad[to] += mTotalLoad[from];
		mTotalLoad.erase(from);
		}

	void incrementLoad(Neighborhood n, Load load)
		{
		lassert(load.count() > 0);

		bool isNew = mTotalLoad.find(n) == mTotalLoad.end();

		mTotalLoad[n] += load;
		mAccumulatedLoad += load.computeSeconds();

		if (isNew)
			{
			mChanges.addNeighborhood(n);

			for (auto p: n.pages())
				mPagesToNeighborhoods[p].insert(n);
			}
		}

	void decrementLoad(Neighborhood n, Load load)
		{
		mTotalLoad[n] -= load;

		if (mTotalLoad[n].isEmpty())
			{
			mTotalLoad.erase(n);

			mChanges.dropNeighborhood(n);

			for (auto p: n.pages())
				{
				mPagesToNeighborhoods[p].erase(n);
				if (mPagesToNeighborhoods[p].size() == 0)
					mPagesToNeighborhoods.erase(p);
				}
			}

		mAccumulatedLoad -= load.computeSeconds();
		}

	std::map<Fora::PageId, std::set<Neighborhood> > mPagesToNeighborhoods;

	double mBlockSizeInSeconds;

	std::deque<boost::shared_ptr<Block> > mBlocks;

	TwoWaySetMap<Neighborhood, boost::shared_ptr<Block> > mNeighborhoodsToBlocks;

	std::map<ComputationId, Load> mActiveLoads;

	MapWithIndex<ComputationId, Neighborhood> mActiveLoadNeighborhoods;

	std::map<Neighborhood, Load> mTotalLoad;

	NeighborhoodChanges mChanges;

	double mAccumulatedLoad;
};

}
}
