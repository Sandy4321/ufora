/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "NeighborhoodSpectrumCalculator.hppml"
#include "NeighborhoodTestUtil.hppml"
#include "../../core/math/StatisticsAccumulator.hpp"
#include "../../core/UnitTest.hpp"
#include "../../core/Clock.hpp"
#include "../../core/Logging.hpp"

namespace Ufora {

namespace {

const static double tolerance = 0.000001;

}

using namespace Cumulus::PageLayoutCalculator;

using namespace NeighborhoodTestUtil;

BOOST_AUTO_TEST_SUITE( test_NeighborhoodSpectrumCalculator )

BOOST_AUTO_TEST_CASE( test_r_squared )
	{
	NeighborhoodSpectrumCalculator graph(1);

	long nodeCount = 50;

	for (long k = 0; k < nodeCount; k++)
		graph.addNeighborhood(
			Neighborhood()
				 + page(k,0)
			);

	graph.updateUntilEigenvaluesHaveStabilized();

	LOG_INFO << "empty: " << graph.rSquared(0) << ". top eigenvalue: " << graph.impliedEigenvalue(0, 0);

	for (long k = 0; k < nodeCount; k++)
		graph.addNeighborhood(
			Neighborhood()
				 + page(k,0)
				  + page((k+1)%nodeCount,0)
			);

	graph.updateUntilEigenvaluesHaveStabilized();

	LOG_INFO << "cycle: " << graph.rSquared(0) << ". top eigenvalue: " << graph.impliedEigenvalue(0, 0);

	for (long k = 0; k < nodeCount; k++)
		for (long k1 = 0; k1 < nodeCount; k1++)
			graph.addNeighborhood(
				Neighborhood()
					 + page(k,0)
					  + page(k1,0)
				);

	graph.updateUntilEigenvaluesHaveStabilized();

	LOG_INFO << "Dense: " << graph.rSquared(0) << ". top eigenvalue: " << graph.impliedEigenvalue(0, 0);

	for (long k = 0; k < nodeCount; k++)
		for (long k1 = 0; k1 < nodeCount; k1++)
			for (long k2 = 0; k2 < nodeCount; k2++)
				graph.addNeighborhood(
					Neighborhood()
						 + page(k,0)
						  + page(k1,0)
						  + page(k2,0)
					);

	graph.updateUntilEigenvaluesHaveStabilized();

	LOG_INFO << "Superdense: " << graph.rSquared(0) << ". top eigenvalue: " << graph.impliedEigenvalue(0, 0);

	NeighborhoodSpectrumCalculator graph2(1);
	long rows = 20;
	long cols = 10;
	for (long r = 0; r < rows-1; r++)
		for (long c1 = 0; c1 < cols; c1++)
			for (long c2 = 0; c2 < cols; c2++)
				if (c1 < c2)
					graph2.addNeighborhood(
						Neighborhood() + page(r,c1) + page(r,c2) + page((r+1)%rows,c1) + page((r+1)%rows,c2)
						);


	for (long c = 0; c < cols-1; c++)
		for (long r1 = 0; r1 < rows; r1++)
			for (long r2 = 0; r2 < rows; r2++)
				if (r1 < r2)
					{
					graph2.addNeighborhood(
						Neighborhood() + page(r1,c) + page(r2,c) + page(r1,(c+1)%cols) + page(r2,(c+1)%cols)
						);
					}

	graph2.updateUntilEigenvaluesHaveStabilized();

	LOG_INFO << "2dGrid: " << graph2.rSquared(0) << ". top eigenvalue: " << graph2.impliedEigenvalue(0, 0);
	}

BOOST_AUTO_TEST_CASE( test_basic )
	{
	NeighborhoodSpectrumCalculator graph(4);

	long nodeCount = 100;

	for (long k = 0; k < nodeCount; k++)
		graph.addNeighborhood(
			Neighborhood()
				 + page(k,0)
				  + page((k+1)%nodeCount,0)
			);

	double t0 = curClock();

	for (long k = 0; k < 100;k++)
		graph.updateAllIndicesAndDimensions();

	for (long dim1 = 0; dim1 < 3; dim1++)
		{
		//note that because BOOST_CHECK_CLOSE uses percentage differences,
		//we need to offset everything by 1 so that values close to zero make sense
		BOOST_CHECK_CLOSE(graph.meanOfDimension(0, dim1) + 1.0, 1.0, tolerance);

		for (long dim2 = 0; dim2 < 3; dim2++)
			{
			BOOST_CHECK_CLOSE(
				1.0 + graph.dimensionDotProduct(0, dim1, dim2), 
				dim1 == dim2 ? 2.0 : 1.0, 
				tolerance
				);
			}
		}

    for (long k = 0; k < nodeCount; k++)
        {
        Nullable<long> closest = graph.closestNodeTo(k);

        BOOST_CHECK(closest);
        BOOST_CHECK( ((k + 1) % nodeCount == (*closest) ||
                k == (*closest+1) % nodeCount));
        }
	}

BOOST_AUTO_TEST_CASE( test_one_line_convergence )
	{
	double t0 = curClock();

	NeighborhoodSpectrumCalculator graph1(3);

	NeighborhoodSpectrumCalculator graph2(3);

	long nodeCount = 10000;

	for (long k = 0; k < nodeCount; k++)
		if (k % 100 != 0)
			graph1.addNeighborhood(
				Neighborhood()
					 + page(k,0)
					  + page(k+1,0)
				);

	graph2.copyFrom(graph1);

	LOG_INFO << "Setup: " << curClock() - t0;
	t0 = curClock();

	LOG_INFO << "Adding nodes: " << curClock() - t0;
	t0 = curClock();
	
	for (long k = 0; k < 100; k++)
		graph1.updateAllIndicesAndDimensions(0);

	LOG_INFO << "Calibrate graph1: " << curClock() - t0;
	t0 = curClock();
	
	long vectorsPerBlock = 2;
	long blocks = 6;

	for (long block = 0; block < blocks; block++)
		{
		graph2.addRandomPathsPerNeighborhood(
			20,
			vectorsPerBlock,
			block == 0 ? 0 : .75,
			block - 1
			);
		}

	LOG_INFO << "Create graph2 sparse representation: " << curClock() - t0;
	t0 = curClock();
	
	for (long pass = blocks-1; pass >= 0; pass--)
		{
		for (long k = 0; k < 5; k++)
			graph2.updateAllIndicesAndDimensions(0, .75, pass);
		}
		
	LOG_INFO << "Calibrate graph2: " << curClock() - t0;
	t0 = curClock();
	
	graph1.dumpInOrder("out-1.py");
	graph2.dumpInOrder("out-2.py");
	}

BOOST_AUTO_TEST_SUITE_END( )

}

