/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "NeighborhoodSpectralTreeDense.hppml"

namespace Cumulus {

namespace PageLayoutCalculator {

NeighborhoodSpectralTreeDense::NeighborhoodSpectralTreeDense(const NeighborhoodSpectralTreeParams& params) : 
		NeighborhoodSpectralTree(params),
		mSpectrum(new NeighborhoodSpectrumCalculator(1, 1)),
		mIsDirty(false),
		mSplitPoint(0),
		mAddsSinceLastUpdate(0)
	{
	}

int64_t NeighborhoodSpectralTreeDense::bytesInPages() const
	{
	return mSpectrum->bytesInPages();
	}

int64_t NeighborhoodSpectralTreeDense::bytesInNeighborhoods() const
	{
	return mSpectrum->bytesInNeighborhoods();
	}

int64_t NeighborhoodSpectralTreeDense::neighborhoodCount() const
	{
	return mSpectrum->neighborhoodCount();
	}

int64_t NeighborhoodSpectralTreeDense::pageCount() const
	{
	return mSpectrum->pageCount();
	}

bool NeighborhoodSpectralTreeDense::hasPage(Fora::PageId p) const
	{
	return mSpectrum->hasPage(p);
	}

void NeighborhoodSpectralTreeDense::addNeighborhood(const Neighborhood& inNeighborhood)
	{
	if (mSubtrees.size())
		{
		mSpectrum->addNeighborhood(inNeighborhood, false);

		long index = mSpectrum->indexForNeighborhood(inNeighborhood);

		double oldProximateRF = proximateReplicationFactor();

		//pick the closest group
		long group = mSpectrum->position(0,index,0) > mSplitPoint ? 1 : 0;

		mSubtrees[group]->addNeighborhood(inNeighborhood);

		mIndexToGroupMap.set(index,group);

		if (proximateReplicationFactor() > oldProximateRF)
			mIsDirty = true;
		}
	else
		{
		mSpectrum->addNeighborhood(inNeighborhood, true);

		mAddsSinceLastUpdate += inNeighborhood.bytecount();

		//we're a leaf neighborhood, so add us to the neighborhood groups
		if (mParams.neighborhoodChanges())
			mParams.neighborhoodChanges()->neighborhoodPlacedInLeafGroup(inNeighborhood, mGroupId);
		}
	}

void NeighborhoodSpectralTreeDense::dropNeighborhood(const Neighborhood& inNeighborhood)
	{
	if (mSubtrees.size())
		{
		long index = mSpectrum->indexForNeighborhood(inNeighborhood);

		long whichGroup = mIndexToGroupMap.getValue(index);

		mSubtrees[whichGroup]->dropNeighborhood(inNeighborhood);

		mIndexToGroupMap.drop(index);

		if (mSubtrees[0]->bytesInPages() * 5 < 
					mSubtrees[1]->bytesInPages() || 
				mSubtrees[1]->bytesInPages() * 5 < 
					mSubtrees[0]->bytesInPages())
			mIsDirty = true;
		}
	else
		{
		if (mParams.neighborhoodChanges())
			mParams.neighborhoodChanges()->neighborhoodRemovedFromLeafGroup(inNeighborhood, mGroupId);
		}
	
	mSpectrum->dropNeighborhood(inNeighborhood);

	if (bytesInPages() <= mParams.smallestBlockSize() && mSubtrees.size())
		collapseToSimpleTree();
	}

void NeighborhoodSpectralTreeDense::dropNeighborhoods(const std::set<Neighborhood>& inNeighborhoods)
	{
	if (mSubtrees.size())
		{
		std::set<Neighborhood> left, right;

		for (auto n: inNeighborhoods)
			{
			long index = mSpectrum->indexForNeighborhood(n);

			long whichGroup = mIndexToGroupMap.getValue(index);

			if (whichGroup == 0)
				left.insert(n);
				else
			if (whichGroup == 1)
				right.insert(n);
			else
				{
				lassert(false);
				}

			mIndexToGroupMap.drop(index);
			}

		if (left.size())
			mSubtrees[0]->dropNeighborhoods(left);
		if (right.size())
			mSubtrees[1]->dropNeighborhoods(right);

		if (mSubtrees[0]->bytesInPages() * 5 < 
					mSubtrees[1]->bytesInPages() || 
				mSubtrees[1]->bytesInPages() * 5 < 
					mSubtrees[0]->bytesInPages())
			mIsDirty = true;
		}
	else
		{
		for (auto n: inNeighborhoods)
			if (mParams.neighborhoodChanges())
				mParams.neighborhoodChanges()->neighborhoodRemovedFromLeafGroup(n, mGroupId);
		}
	
	mSpectrum->dropNeighborhoods(inNeighborhoods);

	if (bytesInPages() <= mParams.smallestBlockSize() && mSubtrees.size())
		collapseToSimpleTree();
	}

void NeighborhoodSpectralTreeDense::collapseToSimpleTree()
	{
	for (auto g: mSubtrees)
		if (mParams.neighborhoodChanges())
			mParams.neighborhoodChanges()->groupDestroyed(g->groupId());

	mSubtrees.clear();
	mIndexToGroupMap.clear();

	if (mParams.neighborhoodChanges())
		for (long k = 0; k < mSpectrum->indexCount();k++)
			if (mSpectrum->isActive(k))
				mParams.neighborhoodChanges()->neighborhoodPlacedInLeafGroup(
					mSpectrum->neighborhoodForIndex(k),
					mGroupId
					);
	}

void NeighborhoodSpectralTreeDense::update(bool forceFullUpdate)
	{
	if (!mSubtrees.size())
		{
		if (bytesInPages() > mParams.largestBlockSize())
			createGroups();
			else
		if (mSpectrum->activeIndexCount() > 1)
			{
			if (mAddsSinceLastUpdate / bytesInPages() > .25)
				{
				mAddsSinceLastUpdate = 0;

				mSpectrum->updateUntilEigenvaluesHaveStabilized(0, 0.0001, 100);
				if (mSpectrum->rSquared(0) > .99)
					createGroups();
				}
			}
		}

	if (!mSubtrees.size())
		return;

	if (wantsRebalance() || forceFullUpdate)
		rebalance();

	long subgroupsWithChildren = mIndexToGroupMap.getValueToKeys().size();

	if (subgroupsWithChildren > 1)
		{
		for (auto subtree: mSubtrees)
			subtree->update(forceFullUpdate);
		}
	}

bool NeighborhoodSpectralTreeDense::wantsRebalance()
	{
	if (!mSubtrees.size())
		return false;

	if (mSubtrees[0]->bytesInPages() * 5 < 
				mSubtrees[1]->bytesInPages())
		return true;

	if (mSubtrees[1]->bytesInPages() * 5 < 
				mSubtrees[0]->bytesInPages())
		return true;

	if (mIsDirty)
		return true;
	
	if (proximateReplicationFactor() < 1.0001)
		return false;

	return mProximateRfAtLastRebalance - proximateReplicationFactor() > 0.01;
	}

bool NeighborhoodSpectralTreeDense::hasNeighborhood(const Neighborhood& inNeighborhood)
	{
	return mSpectrum->hasNeighborhood(inNeighborhood);
	}

namespace {

double mean(
			const std::vector<bool>& active,
			const std::vector<long>& which,
			const std::vector<double>& pos,
			long index
			)
	{
	double res = 0;
	long ct = 0;

	for (long k = 0; k < active.size(); k++)
		if (active[k] && which[k] == index)
			{
			res += pos[k];
			ct++;
			}

	if (ct)
		return res / ct;
	return 0;
	}

double mean(
			const std::vector<bool>& active,
			const std::vector<double>& pos,
			double splitPoint,
			bool low
			)
	{
	double res = 0;
	long ct = 0;

	for (long k = 0; k < active.size(); k++)
		if (active[k] && (low && pos[k] < splitPoint || (!low) && pos[k] > splitPoint))
			{
			res += pos[k];
			ct++;
			}

	if (ct)
		return res / ct;

	return 0;
	}
			
double verySimpleKMeans(
				const std::vector<bool>& active,
				const std::vector<double>& pos,
				double curSplitPoint
				)
	{
	while (true)
		{
		double newSplit = 
			(mean(active,pos,curSplitPoint, true) + mean(active,pos,curSplitPoint, false)) / 2.0;

		if (std::abs(newSplit - curSplitPoint) < 0.000001)
			return newSplit;

		curSplitPoint = newSplit;
		}

	lassert(false);
	}


double verySimpleKMeans(
				const std::vector<bool>& active,
				const std::vector<long>& which,
				const std::vector<double>& pos
				)
	{
	double curSplit = 
		(mean(active,which,pos,0) + mean(active,which,pos,1)) / 2.0;

	return verySimpleKMeans(active, pos, curSplit);
	}

}

void NeighborhoodSpectralTreeDense::rebalance()
	{
	mIsDirty = false;

	double initialRF = proximateReplicationFactor();

	double t0 = curClock();
	
	bool updatedExpensively = false;

	mSpectrum->updateUntilEigenvaluesHaveStabilized(0, 0.0001, 100);
	long moved = 0;

	std::vector<bool> isActive;
	std::vector<long> which;
	std::vector<double> pos;

	isActive.resize(mSpectrum->indexCount());
	which.resize(mSpectrum->indexCount());
	pos.resize(mSpectrum->indexCount());

	//perform a simple 1-d k-means where k=2
	for (long k = 0; k < mSpectrum->indexCount(); k++)
		if (mSpectrum->isActive(k))
			{
			isActive[k] = true;
			which[k] = mIndexToGroupMap.getValue(k);
			pos[k] = mSpectrum->position(0,k,0);
			}

	mSplitPoint = verySimpleKMeans(isActive,which,pos);

	for (long k = 0; k < mSpectrum->indexCount(); k++)
		if (mSpectrum->isActive(k))
			{
			long properIndex = mSpectrum->position(0,k,0) > mSplitPoint ? 1:0;
			long currentIndex = mIndexToGroupMap.getValue(k);

			if (currentIndex != properIndex)
				{
				moved++;
				Neighborhood n = mSpectrum->neighborhoodForIndex(k);

				lassert_dump(
					mSubtrees[currentIndex]->hasNeighborhood(n), 
					"can't find " << prettyPrintString(n) << " in " << currentIndex
					);
				
				mSubtrees[currentIndex]->dropNeighborhood(n);
				mSubtrees[properIndex]->addNeighborhood(n);

				mIndexToGroupMap.set(k, properIndex);
				}
			}

	if (proximateReplicationFactor() > 1.5 && bytesInPages() < mParams.largestBlockSize())
		collapseToSimpleTree();

	if (updatedExpensively)
		mProximateRfAtLastExpensiveUpdate = proximateReplicationFactor();

	mProximateRfAtLastRebalance = proximateReplicationFactor();

	LOG_DEBUG << "Rebalancing tree " << mGroupId.getInteger() 
		<< " with " << mSpectrum->indexCount() << " neighborhoods covering "
		<< bytesInPages() / 1024 / 1024.0 / 1024.0 << " GB"
		<< ". proximateRF from " << initialRF << "->" << proximateReplicationFactor() 
		<< ". moved=" << moved
		<< ". expensive=" << (updatedExpensively ? "true":"false")
		<< ". elapsed=" << curClock() - t0 
		;
	}

void NeighborhoodSpectralTreeDense::updateSplitPoint()
	{
	//get position 0
	std::vector<pair<double, long> > posAndIndex;

	for (long k = 0; k < mSpectrum->indexCount(); k++)
		if (mSpectrum->isActive(k))
			posAndIndex.push_back(make_pair(mSpectrum->position(0,k,0), k));

	std::sort(posAndIndex.begin(), posAndIndex.end());

	boost::unordered_map<Fora::PageId, long> remainingPageCounts, curPageCounts;
	int64_t remainingPageBytes = 0, curPageBytes = 0;

	for (auto elt: posAndIndex)
		{
		Neighborhood n = mSpectrum->neighborhoodForIndex(elt.second);
		for (auto p: n.pages())
			{
			remainingPageCounts[p] += 1;
			if (remainingPageCounts[p] == 1)
				remainingPageBytes += p.bytecount();
			}
		}

	int64_t totalPageBytes = remainingPageBytes;

	Smallest<double> bestSplitPoint;
	for (auto elt: posAndIndex)
		{
		Neighborhood n = mSpectrum->neighborhoodForIndex(elt.second);
		for (auto p: n.pages())
			{
			curPageCounts[p] += 1;

			if (curPageCounts[p] == 1)
				curPageBytes += p.bytecount();

			remainingPageCounts[p] -= 1;

			if (remainingPageCounts[p] == 0)
				remainingPageBytes -= p.bytecount();
			}

		double splitQuality = 0.0;

		if (remainingPageBytes > 0 && curPageBytes > 0)
			{
			double excessBytes = std::max<long>(1, curPageBytes + remainingPageBytes - totalPageBytes);

			splitQuality = excessBytes / std::min(curPageBytes, remainingPageBytes);

			bestSplitPoint.observe(elt.first, splitQuality);
			}
		}
	
	mSplitPoint = *bestSplitPoint.smallest();
	}

void NeighborhoodSpectralTreeDense::createGroups()
	{
	double t0 = curClock();
	lassert(neighborhoodCount());

	mSpectrum->reseedPositions();
	mSpectrum->updateUntilEigenvaluesHaveStabilized(0, 0.0001, 100);
	
	mSubtrees.push_back(NeighborhoodSpectralTree::constructDense(mParams));
	mSubtrees.push_back(NeighborhoodSpectralTree::constructDense(mParams));

	for (long k = 0; k < mSpectrum->indexCount(); k++)
		if (mSpectrum->isActive(k))
			{
			Neighborhood n = mSpectrum->neighborhoodForIndex(k);

			long which = mSpectrum->position(0,k,0) > mSplitPoint ? 1 : 0;
			
			if (mParams.neighborhoodChanges())
				mParams.neighborhoodChanges()->neighborhoodRemovedFromLeafGroup(n, mGroupId);
			
			mSubtrees[which]->addNeighborhood(n);
			
			mIndexToGroupMap.set(k,which);
			}

	LOG_DEBUG << "Creating spectrum in " << mGroupId.getInteger() << " with " 
		<< mSpectrum->indexCount() << " values took " << curClock() - t0;

	mProximateRfAtLastExpensiveUpdate = proximateReplicationFactor();
	mProximateRfAtLastRebalance = proximateReplicationFactor();
	}

}

}
