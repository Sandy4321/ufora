/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "NeighborhoodSpectralTree.hppml"

namespace Cumulus {

namespace PageLayoutCalculator {

class GroupTrackingNeighborhoodSpectralTreeWatcher : public NeighborhoodSpectralTreeWatcher {
public:
	boost::shared_ptr<GroupTrackingNeighborhoodSpectralTreeWatcher> clone() const
		{
		boost::shared_ptr<GroupTrackingNeighborhoodSpectralTreeWatcher> res;

		res.reset(new GroupTrackingNeighborhoodSpectralTreeWatcher(*this));

		return res;
		}

	void groupCreated(GroupId g)
		{
		mGroupsCreated.insert(g);
		}

	void groupDestroyed(GroupId g)
		{
		mGroupImageCache.erase(g);

		if (mGroupsCreated.find(g) == mGroupsCreated.end())
			mGroupsDestroyed.insert(g);
		else
			mGroupsCreated.erase(g);

		mPageCounts.erase(g);
		}

	void neighborhoodPlacedInLeafGroup(Neighborhood n, GroupId group)
		{
		mGroupImageCache.erase(group);
		
		for (auto p: n.pages())
			mPageCounts[group][p]++;

		neighborhoodChange(n).second = null() << group;
		mAllNeighborhoods[n] = group;
		}

	void neighborhoodRemovedFromLeafGroup(Neighborhood n, GroupId group)
		{
		for (auto p: n.pages())
			{
			mPageCounts[group][p]--;
			if (mPageCounts[group][p] == 0)
				mPageCounts[group].erase(p);
			}
		
		neighborhoodChange(n).second = null();
		mAllNeighborhoods.erase(n);
		}

	bool hasNeighborhood(const Neighborhood& n) const
		{
		return mAllNeighborhoods.find(n) != mAllNeighborhoods.end();
		}

	const map<Neighborhood, GroupId>& allNeighborhoods() const
		{
		return mAllNeighborhoods;
		}

	const map<Neighborhood, pair<Nullable<GroupId>, Nullable<GroupId> > >& 
				neighborhoodsMovedOrAdded() const
		{
		return mNeighborhoodChanged;
		}

	const set<GroupId>& groupsDestroyed() const
		{
		return mGroupsDestroyed;
		}

	void clearChanges()
		{
		mNeighborhoodChanged.clear();
		mGroupsDestroyed.clear();
		mGroupsCreated.clear();
		}

	Neighborhood neighborhoodToGroupImage(const Neighborhood& n) const
		{
		return groupToImage(groupContaining(n));
		}

	GroupId groupContaining(const Neighborhood& n) const
		{
		auto it = mAllNeighborhoods.find(n);

		lassert(it != mAllNeighborhoods.end());

		return it->second;
		}

	Neighborhood groupToImage(GroupId g) const
		{
		auto cacheIt = mGroupImageCache.find(g);
		if (cacheIt != mGroupImageCache.end())
			return cacheIt->second;
		
		auto it = mPageCounts.find(g);

		lassert_dump(it != mPageCounts.end(), "can't find group " << g.getInteger());

		Neighborhood n;

		for (auto pAndC: it->second)
			n = n + pAndC.first;

		mGroupImageCache[g] = n;

		return n;
		}

	void applyTo(GroupTrackingNeighborhoodSpectralTreeWatcher& other)
		{
		for (auto g: mGroupsCreated)
			other.groupCreated(g);
		for (auto g: mGroupsDestroyed)
			other.groupDestroyed(g);
		for (auto nAndChange: mNeighborhoodChanged)
			{
			Neighborhood n = nAndChange.first;
			Nullable<GroupId> source = nAndChange.second.first;
			Nullable<GroupId> dest = nAndChange.second.second;

			if (source != dest)
				{
				if (source)
					other.neighborhoodRemovedFromLeafGroup(n, *source);
				if (dest)
					other.neighborhoodPlacedInLeafGroup(n, *dest);
				}
			}
		}	

private:
	pair<Nullable<GroupId>, Nullable<GroupId> >& neighborhoodChange(Neighborhood n)
		{
		auto it = mNeighborhoodChanged.find(n);
		if (it != mNeighborhoodChanged.end())
			return it->second;

		auto it2 = mAllNeighborhoods.find(n);
		if (it2 != mAllNeighborhoods.end())
			mNeighborhoodChanged[n].first = mNeighborhoodChanged[n].second = null() << it2->second;

		return mNeighborhoodChanged[n];
		}

	std::set<GroupId> mGroupsDestroyed;

	std::set<GroupId> mGroupsCreated;

	map<GroupId, boost::unordered_map<Fora::PageId, long> > mPageCounts;

	map<Neighborhood, GroupId> mAllNeighborhoods;

	mutable map<GroupId, Neighborhood> mGroupImageCache;

	map<Neighborhood, pair<Nullable<GroupId>, Nullable<GroupId> > > mNeighborhoodChanged;
};

}

}
