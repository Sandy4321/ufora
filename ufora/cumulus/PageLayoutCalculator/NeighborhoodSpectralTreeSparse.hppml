/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "NeighborhoodSpectralTree.hppml"
#include "../../core/containers/TwoWaySetMap.hpp"

namespace Cumulus {

namespace PageLayoutCalculator {

class NeighborhoodSpectralTreeSparse : public NeighborhoodSpectralTree {
public:
	NeighborhoodSpectralTreeSparse(const NeighborhoodSpectralTreeParams& params);

	void addNeighborhood(const Neighborhood& inNeighborhood);

	void dropNeighborhood(const Neighborhood& inNeighborhood);

	void dropNeighborhoods(const std::set<Neighborhood>& inNeighborhoods);

	bool hasNeighborhood(const Neighborhood& inNeighborhood);

	void update(bool forceFullUpdate = false);

	int64_t bytesInPages() const;

	int64_t pageCount() const;

	int64_t bytesInNeighborhoods() const;

	int64_t neighborhoodCount() const;

	bool hasPage(Fora::PageId p) const;

private:
	bool noPagesOverlapping(const Neighborhood& inNeighborhood);

	void createNewGroup(const Neighborhood& inNeighborhood);

	void addNeighborhoodToGroup(const Neighborhood& inNeighborhood, long groupIx);

	int64_t newBytesInGroupIfAdded(long group, const Neighborhood& in);

	double groupFractionOfNonuniquePages(long groupIndex);

	//returns the groupId of the merged group. Group ids may move around
	long mergeGroups(long groupOne, long groupTwo);

	//returns the groupId of the merged group. Group ids may move around
	long mergeGroupWithSomething(long groupOne);

	void deleteGroup(long groupIndex);

	void dropNeighborhoodFromGroup(const Neighborhood& inNeighborhood, long groupIx);

	void dropNeighborhoodsFromGroup(const std::set<Neighborhood>& inNeighborhoods, long groupIx);

	MapWithIndex<Neighborhood, long> mNeighborhoodToSubgroup;

	TwoWaySetMap<Fora::PageId, long> mPagesToSubgroups;

	map<long, uint32_t> mSubgroupUniquePages;

	map<long, uint32_t> mSubgroupNonuniquePages;

	std::set<long> mGroupsNeedingUpdate;

	int64_t mTotalPageBytes;

	int64_t mTotalNeighborhoodBytes;
};

}

}
