/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "../../core/containers/MapWithIndex.hpp"
#include <set>
#include "../PageLayoutCalculator/Neighborhood.hppml"

namespace Cumulus {

namespace PageLayoutCalculator {

/****************************

NeighborhoodChanges

Tracks a set of changes to a set of neighborhoods. 

If a Neighborhood appears within a rename, then it may
not also appear as an add or a drop.

*****************************/

class NeighborhoodChanges {
public:
	void addNeighborhood(Neighborhood n)
		{
		lassert(!n.isEmpty());
		lassert(!mRenames.hasValue(n));

		if (mRenames.hasKey(n))
			{
			Neighborhood to = mRenames.getValue(n);
			mRenames.drop(n);

			addNeighborhood(to);
			return;
			}

		if (mDropped.find(n) != mDropped.end())
			mDropped.erase(n);
		else
			mAdded.insert(n);
		}

	void dropNeighborhood(Neighborhood n)
		{
		lassert(!n.isEmpty());
		
		if (mAdded.find(n) != mAdded.end())
			mAdded.erase(n);
			else
		if (mRenames.hasValue(n))
			{
			Neighborhood from = *mRenames.getKeys(n).begin();

			mRenames.drop(from);
			mDropped.insert(from);
			}
		else
			mDropped.insert(n);
		}

	void renameNeighborhood(Neighborhood from, Neighborhood to)
		{
		lassert(!from.isEmpty());
		lassert(!to.isEmpty());
		lassert(from != to);

		if (mAdded.find(from) != mAdded.end())
			{
			mAdded.erase(from);
			addNeighborhood(to);
			return;
			}
		lassert(mAdded.find(to) == mAdded.end());
		lassert(mDropped.find(from) == mDropped.end());

		//if we have already dropped the target we can model this as
		//undroppin the target and dropping the source
		if (mDropped.find(to) != mDropped.end())
			{
			mDropped.erase(to);
			dropNeighborhood(from);
			return;
			}

		lassert(!mRenames.hasValue(to));
		lassert(!mRenames.hasKey(from));

		if (mRenames.hasValue(from))
			{	
			Neighborhood source = *mRenames.getKeys(from).begin();
			mRenames.dropValue(from);
			from = source;
			}

		if (mRenames.hasKey(to))
			{
			Neighborhood target = mRenames.getValue(to);
			mRenames.drop(to);
			to = target;
			}

		if (from != to)
			mRenames.insert(from, to);
		}

	void clear()
		{
		mAdded.clear();
		mDropped.clear();
		mRenames.clear();
		}

	template<class T>
	void applyTo(T& to)
		{
		for (auto a: mAdded)
			to.addNeighborhood(a);

		for (auto d: mDropped)
			to.dropNeighborhood(d);

		for (auto fromAndTo: mRenames.getKeyToValue())
			to.renameNeighborhood(fromAndTo.first, fromAndTo.second);
		}

	size_t size() const
		{
		return mAdded.size() + mDropped.size() + mRenames.size();
		}

	const set<Neighborhood>& added() const
		{
		return mAdded;
		}

	const set<Neighborhood>& dropped() const
		{
		return mDropped;
		}

	const MapWithIndex<Neighborhood, Neighborhood>& renamed() const
		{
		return mRenames;
		}

private:
	std::set<Neighborhood> mAdded;

	std::set<Neighborhood> mDropped;

	MapWithIndex<Neighborhood, Neighborhood> mRenames;
};

}
}
