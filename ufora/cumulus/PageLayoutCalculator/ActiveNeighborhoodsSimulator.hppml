/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "ActiveNeighborhoods.hppml"
#include "NeighborhoodTestUtil.hppml"

namespace Cumulus {

namespace PageLayoutCalculator {

namespace ActiveNeighborhoodsSimulator {

/****************************

ActiveNeighborhoodsSimulator

Simulates a set of calculations accessing pages, laying pages out according to
ActiveNeighborhoods.

*****************************/

@type ComputationEvent = 
		double timeElapsed, 
		Neighborhood currentNeighborhood, 
		ImmutableTreeSet<Fora::PageId> pagesCreated
{
public:
	ComputationEvent reading(Neighborhood n) const
		{
		ComputationEvent c = *this;
		c.currentNeighborhood() = n;
		return c;
		}

	ComputationEvent creating(Fora::PageId p) const
		{
		ComputationEvent c = *this;
		c.pagesCreated() = c.pagesCreated() + p;
		return c;
		}
};

@type Computation = 
		ComputationId id,
		ImmutableTreeVector<ComputationEvent> events,
		ImmutableTreeSet<ComputationId> prerequisites
{
public:
	Computation(ComputationId inID)
		{
		id() = inID;
		}

	Computation(long index)
		{
		id() = ComputationId::CreateIdForTesting(hash_type(index));
		}

	Computation with(ComputationEvent event) const
		{ 
		Computation c = *this;
		c.events() = c.events() + event;
		return c;
		}
		
	Computation withPrerequisite(Nullable<ComputationId> id) const
		{ 
		if (!id)
			return *this;
		
		Computation c = *this;
		c.prerequisites() = c.prerequisites() + *id;
		return c;
		}
		
	Computation withPrerequisite(ComputationId id) const
		{ 
		Computation c = *this;
		c.prerequisites() = c.prerequisites() + id;
		return c;
		}
		
	Computation withPrerequisite(long id) const
		{ 
		Computation c = *this;
		c.prerequisites() = c.prerequisites() + 
			ComputationId::CreateIdForTesting(hash_type(id));
		return c;
		}

	Computation withNewEvent(double elapsed) const
		{ 
		Computation c = *this;
		c.events() = c.events() + ComputationEvent(elapsed, Neighborhood(), emptyTreeSet());
		return c;
		}
		
	Computation creating(Fora::PageId page) const
		{ 
		Computation c = *this;
		lassert(c.events().size());

		c.events() = c.events().slice(0, c.events().size()-1) + 
			c.events().back().creating(page);
			
		return c;
		}
		
	Computation reading(Neighborhood n) const
		{ 
		Computation c = *this;
		lassert(c.events().size());

		c.events() = c.events().slice(0, c.events().size()-1) + 
			c.events().back().reading(n);
			
		return c;
		}
};

macro_defineCppmlComparisonOperators(Computation);

@type SimulationParameters = 
	double diskMBPerSecond,
	double networkMBPerSecond,
	double timeToMoveComputation,
	double expectedSchedulerUpdateTime,
	double delayBetweenSchedulerUpdates,
	double maxTimestamp,
	long maxEventCount
	;


@type Resource = 
	-|	Disk of MachineId
	-|	Network of MachineId
	-|	CPU of MachineId machine, long cpuIndex
	-|	Scheduler of ()
	;

@type Task = 
		WriteToDisk of MachineId machine, Fora::PageId page
	-|	ReadPage of MachineId machine, Fora::PageId page, bool diskAsWellAsNetwork
	-|	Compute of ComputationId computation, long eventIndex
	-|	SchedulerExecuting of ()
	-|	SchedulerBlocking of ()
	;

@type Event = 
	-|	PageAdded of MachineId machine, Fora::PageId page
	-|	PageDropped of MachineId machine, Fora::PageId page
	-|	ComputationFinished of MachineId machine, ComputationId computation
	-|	ComputationCreated of MachineId machine, ComputationId computation
	-|	MoveComputation of MachineId fromMachine, MachineId toMachine, ComputationId computation
	-|	TaskStarted of Resource r, Task task
	-|	TaskFinished of Resource r, Task task
with
	double timestamp
	;

macro_defineCppmlComparisonOperators(Resource);

@type RunningTask = double timeStart, double timeStop, Task task, Resource resource;

class MemoryContentsAndBlockedComputations {
public:
	const NeighborhoodsOnMachines& getMachineRamContents() const
		{
		return mMachineRamContents;
		}

	void addMachine(MachineId m)
		{
		mMachineRamContents.addMachine(m);
		}

	void addNeighborhood(MachineId m, const Neighborhood& n)
		{
		mMachineRamContents.addNeighborhood(m, n);

		std::set<ComputationId> computationsToCheck;
		for (auto page: n.pages())
			for (auto c: mComputationPages.getKeys(page))
				computationsToCheck.insert(c);

		for (auto c: computationsToCheck)
			checkComputation_(c);
		}

	void dropNeighborhood(MachineId m, const Neighborhood& n)
		{
		mMachineRamContents.dropNeighborhood(m, n);

		std::set<ComputationId> computationsToCheck;
		for (auto page: n.pages())
			for (auto c: mComputationPages.getKeys(page))
				computationsToCheck.insert(c);

		for (auto c: computationsToCheck)
			checkComputation_(c);
		}

	void addComputation(ComputationId id, MachineId machine, Neighborhood deps)
		{
		lassert(mComputationDependencies.find(id) == mComputationDependencies.end());

		mComputations.set(id, machine);

		for (auto page: deps.pages())
			mComputationPages.insert(id, page);

		mComputationDependencies[id] = deps;

		checkComputation_(id);
		}

	size_t computationCount() const
		{
		return mComputations.size();
		}

	void computationScheduled(ComputationId id)
		{
		mComputations.discard(id);
		mComputationPages.dropKey(id);
		mComputationDependencies.erase(id);
		mComputationsComputableAndAlreadyOn.dropKey(id);
		mComputationsComputableOn.dropKey(id);
		}

	Nullable<ComputationId> computationComputableOnlyOn(
										MachineId machine,
										Ufora::math::Random::Uniform<double>& ioRandom
										)
		{
		if (!mComputationsComputableOn.getKeys(machine).size())
			return null();

		std::vector<ComputationId> comps;

		for (auto comp: mComputationsComputableOn.getKeys(machine))
			if (mComputationsComputableOn.getValues(comp).size() == 1)
				comps.push_back(comp);

		if (comps.size())
			return null() << comps[ioRandom() * comps.size()];

		return null();
		}

	Nullable<ComputationId> computationComputableAndAlreadyOn(
										MachineId machine,
										Ufora::math::Random::Uniform<double>& ioRandom
										)
		{
		if (!mComputationsComputableAndAlreadyOn.getKeys(machine).size())
			return null();

		long ct = mComputationsComputableAndAlreadyOn.getKeys(machine).size();

		long which = ct * ioRandom();

		auto it = mComputationsComputableAndAlreadyOn.getKeys(machine).begin();

		while (which)
			{	
			it++;
			which--;
			};

		return null() << *it;
		}

	Nullable<pair<ComputationId, MachineId> > computationComputableOn(
										MachineId machine,
										Ufora::math::Random::Uniform<double>& ioRandom
										)
		{
		if (!mComputationsComputableOn.getKeys(machine).size())
			return null();

		long ct = mComputationsComputableOn.getKeys(machine).size();

		long which = ct * ioRandom();

		auto it = mComputationsComputableOn.getKeys(machine).begin();

		while (which)
			{	
			it++;
			which--;
			};

		return null() << make_pair(*it, mComputations.getValue(*it));
		}

	long computableComputations() const
		{
		return mComputationsComputableOn.getKeysToValues().size();
		}

private:
	void checkComputation_(ComputationId id)
		{
		Neighborhood deps = mComputationDependencies[id];

		mComputationsComputableOn.dropKey(id);
		mComputationsComputableAndAlreadyOn.dropKey(id);

		for (auto machine: mMachineRamContents.machinesContainingOrCovering(deps))
			mComputationsComputableOn.insert(id, machine);

		MachineId machine = mComputations.getValue(id);

		if (mComputationsComputableOn.contains(id, machine))
			mComputationsComputableAndAlreadyOn.insert(id, machine);
		}

	NeighborhoodsOnMachines mMachineRamContents;

	map<ComputationId, Neighborhood> mComputationDependencies;

	MapWithIndex<ComputationId, MachineId> mComputations;

	TwoWaySetMap<ComputationId, MachineId> mComputationsComputableOn;

	TwoWaySetMap<ComputationId, MachineId> mComputationsComputableAndAlreadyOn;

	TwoWaySetMap<ComputationId, Fora::PageId> mComputationPages;
};

class Simulation {
public:
	Simulation(SimulationParameters params) :
			mParams(params),
			mCurrentTimestamp(0),
			mTotalBytesMovedOnNetwork(0),
			mTotalSecondsOfComputeElapsed(0.0),
			mBytesReadFromDisk(0),
			mBytesWrittenToDisk(0),
			mCurentlyComputingComputationCount(0)
		{
		mAllResources.insert(Resource::Scheduler());
		}

	void addMachine(MachineId machine, int64_t memorySize, int64_t cores)
		{
		mRamContentsAndBlockedComputations.addMachine(machine);
		mMachineMemory[machine] = memorySize;
		mMachineCoreCounts[machine] = cores;
		mMachines.insert(machine);

		for (long k = 0; k < cores; k++)
			mAllResources.insert(Resource::CPU(machine, k));

		mAllResources.insert(Resource::Disk(machine));
		mAllResources.insert(Resource::Network(machine));

		mActiveNeighborhoods.addMachine(machine);
		mActiveNeighborhoods.setMachineUsableMemory(machine, memorySize, cores);
		}

	void addComputations(ImmutableTreeVector<Computation> computations)
		{
		for (auto computation: computations)
			addComputation(computation);
		}

	void addComputations(ImmutableTreeSet<Computation> computations)
		{
		for (auto computation: computations)
			addComputation(computation);
		}

	void addComputationToMachine(ComputationId id, MachineId machine, Neighborhood n)
		{
		mActiveNeighborhoods.setComputationLoad(id, n, 0.0);
		mRamContentsAndBlockedComputations.addComputation(id, machine, n);
		}

	void addComputation(Computation comp)
		{
		mComputationDefinitions[comp.id()] = comp;

		if (allDependenciesMet(comp))
			{
			MachineId machine = bestMachineFor(comp);
			
			addComputationToMachine(
				comp.id(), 
				machine, 
				comp.events()[0].currentNeighborhood()
				);
			}
		else
			{
			for (auto dep: comp.prerequisites())
				if (!isCompleted(dep))
					mComputationsBlockedOn.insert(comp.id(), dep);
			}
		}

	void runSimulation()
		{
		while (!simulationIsComplete(true))
			stepSimulationForward();
		}

	double currentTimestamp() const
		{
		return mCurrentTimestamp;
		}

	double totalSecondsOfComputeElapsed() const
		{
		return mTotalSecondsOfComputeElapsed;
		}

	int64_t totalNetworkBytesMoved() const
		{
		return mTotalBytesMovedOnNetwork;
		}

	int64_t totalBytesInRamAcrossCluster() const
		{
		int64_t bytes = 0;

		for (auto machine: mMachines)
			for (auto page: currentLayout().neighborhoodsForMachine(machine).pageVec())
				bytes += page.bytecount();

		return bytes;
		}

	int64_t totalBytesReadFromDisk() const
		{
		return mBytesReadFromDisk;
		}

	int64_t totalBytesWrittenToDisk() const
		{
		return mBytesWrittenToDisk;
		}

	int64_t totalBytesReadOrWrittenToDisk() const
		{
		return mBytesReadFromDisk + mBytesWrittenToDisk;
		}

	ImmutableTreeSet<Fora::PageId> allPagesInRam() const
		{
		ImmutableTreeSet<Fora::PageId> pages;

		for (auto machine: mMachines)
			for (auto page: currentLayout().neighborhoodsForMachine(machine).pageVec())
				pages = pages + page;

		return pages;
		}

	ImmutableTreeSet<Fora::PageId> allPagesOnDisk() const
		{
		return ImmutableTreeSet<Fora::PageId>(mPagesOnDisk);
		}

	const std::vector<Event>& allEvents() const
		{
		return mAllEvents;
		}

	const NeighborhoodsOnMachines& currentLayout() const
		{
		return mRamContentsAndBlockedComputations.getMachineRamContents();
		}

	bool simulationIsComplete(bool allowLimits = false)
		{
		if (allowLimits)
			if (mAllEvents.size() > mParams.maxEventCount() || 
							mCurrentTimestamp > mParams.maxTimestamp())
				return true;

		if (mRamContentsAndBlockedComputations.computationCount())
			return false;

		for (auto resourceAndTask: mTasksExecuting)
			if (!resourceAndTask.first.isScheduler())
				return false;

		return true;
		}

private:
	void stepSimulationForward()
		{
		dropUnusedPages();

		//first, fill resources with work
		std::vector<pair<double, Resource> > fillable;

		for (auto resource: mAllResources)
			if (mTasksExecuting.find(resource) == mTasksExecuting.end())
				fillable.push_back(make_pair(mRandom(), resource));
		std::sort(fillable.begin(), fillable.end());

		for (auto randAndResource: fillable)
			tryToActivateResource(randAndResource.second);

		//then, step the simulation forward - search for the smallest next timestamp
		//in the tasks update
		Smallest<RunningTask> nextTimestamp;

		for (auto resourceAndRunningTask: mTasksExecuting)
			nextTimestamp.observe(
				resourceAndRunningTask.second,
				resourceAndRunningTask.second.timeStop()
				);

		if (nextTimestamp.smallest())
			{
			if (int(mCurrentTimestamp) != int(nextTimestamp.smallest()->timeStop()))
				{
				LOG_DEBUG << mCurrentTimestamp << ". " 
					<< "TotalEvents = " << mAllEvents.size() << ". "
					<< "compute=" << totalSecondsOfComputeElapsed() << ". "
					<< "network=" << totalNetworkBytesMoved() / 1024 / 1024.0 << " MB. "
					<< "disk=" << totalBytesReadOrWrittenToDisk() / 1024 / 1024.0 << " MB. "
					<< "computationCount=" << mRamContentsAndBlockedComputations.computationCount() << ". "
					<< "overloaded=" << overloadedMachineCount() << ". "
					<< "computable=" << mRamContentsAndBlockedComputations.computableComputations()
										 + mCurentlyComputingComputationCount << "."
					;
				}
				
			mCurrentTimestamp = nextTimestamp.smallest()->timeStop();

			std::set<Resource> resourcesThatAreDone;
			for (auto resourceAndRunningTask: mTasksExecuting)
				if (resourceAndRunningTask.second.timeStop() == mCurrentTimestamp)
					resourcesThatAreDone.insert(resourceAndRunningTask.first);

			for (auto r: resourcesThatAreDone)
				taskCompleted(
					mTasksExecuting[r].task(),
					r
					);
			}
		}

	void updateActiveNeighborhoodsLongtermLayout()
		{
		auto problem = mActiveNeighborhoods.checkOutLongTermPageLayoutCalculation();
		problem->updateLayout();
		mActiveNeighborhoods.checkInUpdatedLongTermPageLayoutCalculation(problem);
		}

	void taskCompleted(Task task, Resource resource)
		{
		mAllEvents.push_back(
			Event::TaskFinished(mCurrentTimestamp, resource, task)
			);

		mTasksExecuting.erase(resource);

		@match Resource(resource)
			-| Scheduler() ->> {
				@match Task(task)
					-|	SchedulerExecuting() ->> {
						updateCurrentlyRunningComputationLoads();
						mActiveNeighborhoods.setMemoryContents(currentLayout());

						double t0 = curClock();
						LOG_DEBUG << mCurrentTimestamp 
							<< ". Parallelism so far: " << mTotalSecondsOfComputeElapsed / mCurrentTimestamp 
							<< ". Seconds: " << mTotalSecondsOfComputeElapsed
							<< ". Computable tasks: " << 
									mRamContentsAndBlockedComputations.computableComputations()
										 + mCurentlyComputingComputationCount
							;

						for (auto machine: mMachines)
							LOG_DEBUG << "\t" << machine << " -- " 
								<< mActiveNeighborhoods.targetLayout()
										.neighborhoodsForMachine(machine)
										.bytesInPages() / 1024 / 1024.0 / 1024.0 
								<< " GB"
								<< ". seconds=" 
								<< mComputeSecondsElapsedPerMachine[machine]
								;

						updateActiveNeighborhoodsLongtermLayout();

						mActiveNeighborhoods.rebalance();

						mLastActiveNeighborhoodsUpdateTimestamp = mCurrentTimestamp;
						}
					-|	SchedulerBlocking() ->> {
						}
					-| _ ->> { lassert_dump(false, prettyPrintString(task)); }
				}
			-| CPU(machine, _) ->> {
				@match Task(task)
					-| Compute(compId, eventIndex) ->> {
						computationFinished(compId, machine, eventIndex);
						}
					-| _ ->> { lassert_dump(false, prettyPrintString(task)); }
				}
			-| _ ->> {}
		}

	//ensure that the ActiveNeighborhoods simulation has a model of all running computations. We
	//crudely assume that every computation will run for as long as it has been running so far
	void updateCurrentlyRunningComputationLoads()
		{
		for (auto resourceAndTask: mTasksExecuting)
			@match Resource(resourceAndTask.first)
				-| CPU(machine, ix) ->> {
					@match Task(resourceAndTask.second.task())
						-| Compute(computation, eventIx) ->> {
							ComputationEvent computationEvent = 
								mComputationDefinitions[computation].events()[eventIx];

							double timeElapsed = mCurrentTimestamp - resourceAndTask.second.timeStart();

							mActiveNeighborhoods.setComputationLoad(
								computation, 
								computationEvent.currentNeighborhood(),
								timeElapsed
								);
							}
					}
				-| _ ->> {}
				;
		}

	void computationFinished(ComputationId comp, MachineId m, long eventIndex)
		{
		ComputationEvent computationEvent = mComputationDefinitions[comp].events()[eventIndex];

		mTotalSecondsOfComputeElapsed += computationEvent.timeElapsed();
		mComputeSecondsElapsedPerMachine[m] += computationEvent.timeElapsed();
		mCurentlyComputingComputationCount--;
		
		//create any relevant pages
		auto pages = computationEvent.pagesCreated();

		for (auto p: pages)
			{
			mRamContentsAndBlockedComputations.addNeighborhood(m, Neighborhood(p));

			mActiveNeighborhoods.observeActualLoad(
				Neighborhood(p),
				//assume the page was created halfway through
				computationEvent.timeElapsed() / 2.0
				);

			mAllEvents.push_back(
				Event::PageAdded(mCurrentTimestamp, m, p)
				);
			}

		//see what neighborhoods the computation just used and mark the load in the simulation
		if (computationEvent.currentNeighborhood().pages().size())
			mActiveNeighborhoods.observeActualLoad(
				computationEvent.currentNeighborhood(),
				computationEvent.timeElapsed()
				);

		mActiveNeighborhoods.dropComputationLoad(comp);

		//now, see if the computation finished.
		if (eventIndex + 1 < mComputationDefinitions[comp].events().size())
			//nope - add it back to the computing set
			{
			addComputationToMachine(
				comp,
				m, 
				mComputationDefinitions[comp].events()[eventIndex + 1].currentNeighborhood()
				);
			}
		else
			{
			//mark it complete and see who else is computable
			mAllEvents.push_back(Event::ComputationFinished(mCurrentTimestamp, m, comp));

			std::set<ComputationId> possiblyActive = mComputationsBlockedOn.getKeys(comp);
			if (possiblyActive.size())
				{
				mComputationsBlockedOn.dropValue(comp);
				for (auto possible: possiblyActive)
					if (mComputationsBlockedOn.getValues(possible).size() == 0)
						{
						//this computation is now active on machine 'm'
						addComputationToMachine(
							possible, 
							m, 
							mComputationDefinitions[possible].events()[0].currentNeighborhood()
							);
						
						mAllEvents.push_back(
							Event::ComputationCreated(mCurrentTimestamp, m, possible)
							);
						}
				}
			}
		}

	bool machineIsOverloaded(MachineId machine) const
		{
		int64_t bytes = machineMemoryLimit(machine);

		return currentLayout().neighborhoodsForMachine(machine).bytesInPages() >= bytes;
		}

	long overloadedMachineCount() const
		{
		long res = 0;

		for (auto m: mMachines)
			res += (machineIsOverloaded(m) ? 1:0);

		return res;
		}


	void tryToActivateResource(Resource r)
		{
		@match Resource(r)
			-| Scheduler() ->> {
				if (mCurrentTimestamp == mLastActiveNeighborhoodsUpdateTimestamp)
					scheduleTask(r, Task::SchedulerBlocking(), mParams.delayBetweenSchedulerUpdates());
				else
					scheduleTask(r, Task::SchedulerExecuting(), mParams.expectedSchedulerUpdateTime());
				}
			-| CPU(machine, index) ->> {
				if (machineIsOverloaded(machine))
					return;

				//see if there are any computations to execute
				Nullable<ComputationId> computation = 
					mRamContentsAndBlockedComputations
						.computationComputableAndAlreadyOn(
							machine, 
							mRandom
							);


				if (computation)
					{
					scheduleComputation(r, *computation);
					return;
					}

				//see if there are any other computations we could execute
				Nullable<pair<ComputationId, MachineId> > computationAndMachine = 
					mRamContentsAndBlockedComputations.computationComputableOn(machine, mRandom);

				if (computationAndMachine)
					{
					moveAndScheduleComputation(
								computationAndMachine->first, 
								computationAndMachine->second, 
								r
								);
					return;
					}
				}
			-| Disk(machine) ->> {
				findSomeTaskForMachineDisk(machine);
				}
			-| Network(machine) ->> {
				findSomeTaskForMachineNetwork(machine);
				}
			-| _ ->> {
				}
		}

	void dropUnusedPages()
		{
		//first see if there is a page we want to drop to disk 
		for (auto machine: mMachines)
			{
			std::set<Fora::PageId> toDrop;

			for (auto page: currentLayout().neighborhoodsForMachine(machine).pageVec())
				if (machineDoesntWantPage(machine, page))
					if (droppablePageCanBeDroppedImmediately(machine, page))
						toDrop.insert(page);

			for (auto p: toDrop)
				{
				mAllEvents.push_back(
					Event::PageDropped(mCurrentTimestamp, machine, p)
					);
				mRamContentsAndBlockedComputations.dropNeighborhood(machine, Neighborhood(p));
				}
			}
		}
	
	void findSomeTaskForMachineNetwork(MachineId machine)
		{
		//see if there is a page we want to load. This simple version of the simulation doesn't worry about
		//the network card of the machine we're reading from.
		for (auto page: mActiveNeighborhoods.targetLayout().neighborhoodsForMachine(machine).pageVec())
			if (!currentLayout().neighborhoodsForMachine(machine).pageVec().contains(page) && 
					(currentLayout().someMachineHoldingExcept(page, machine) || 
							mPagesOnDisk.find(page) != mPagesOnDisk.end())
					)
				{
				bool loadedFromDisk = !currentLayout().someMachineHoldingExcept(page, machine);

				mTotalBytesMovedOnNetwork += page.bytecount();

				if (loadedFromDisk)
					mBytesReadFromDisk += page.bytecount();

				scheduleTask(
					Resource::Network(machine), 
					Task::ReadPage(machine, page, loadedFromDisk), 
					(loadedFromDisk ? page.bytecount() / 1024.0 / 1024.0 / mParams.diskMBPerSecond() : 0) + 
						page.bytecount() / 1024.0 / 1024.0 / mParams.networkMBPerSecond(),
					0.0
					);

				mAllEvents.push_back(
					Event::PageAdded(mCurrentTimestamp, machine, page)
					);

				mRamContentsAndBlockedComputations.addNeighborhood(machine, Neighborhood(page));
				return;
				}
		}

	bool machineDoesntWantPage(MachineId machine, Fora::PageId page)
		{
		if (mActiveNeighborhoods.targetLayout().neighborhoodsForMachine(machine).pageVec().contains(page))
			return false;

		if (!mActiveNeighborhoods.currentLayout().neighborhoodsForMachine(machine).pageVec().contains(page))
			return false;

		return true;
		}

	bool droppablePageCanBeDroppedImmediately(MachineId machine, Fora::PageId page)
		{
		if (mPagesOnDisk.find(page) != mPagesOnDisk.end())
			return true;

 		if (currentLayout().someMachineHoldingExcept(page, machine))
 			return true;

 		return false;
		}

	bool droppablePageNeedsToWriteToDisk(MachineId machine, Fora::PageId page)
		{
		//no need to write to disk if it's already there
		if (mPagesOnDisk.find(page) != mPagesOnDisk.end())
			return false;

		//if the page is held elsewhere, we can just drop it - no need to write to disk
		if (currentLayout().someMachineHoldingExcept(page, machine))
			return false;

		//if the page is held elsewhere in the target layout, don't drop it
		if (mActiveNeighborhoods.targetLayout().someMachineHoldingExcept(page, machine))
			return false;

		return true;
		}

	void findSomeTaskForMachineDisk(MachineId machine)
		{
		//first see if there is a page we want to drop to disk 
		for (auto page: currentLayout().neighborhoodsForMachine(machine).pageVec())
			if (machineDoesntWantPage(machine,page) && droppablePageNeedsToWriteToDisk(machine, page))
				{
				//no other machine contains it - we need to write it to disk. expunge it immediately and 
				//lock the disk
				scheduleTask(
					Resource::Disk(machine), 
					Task::WriteToDisk(machine, page), 
					page.bytecount() / 1024.0 / 1024.0 / mParams.diskMBPerSecond(),
					0.0
					);
				
				mBytesWrittenToDisk += page.bytecount();

				mPagesOnDisk.insert(page);

				mAllEvents.push_back(
					Event::PageDropped(mCurrentTimestamp, machine, page)
					);

				mRamContentsAndBlockedComputations.dropNeighborhood(machine, Neighborhood(page));
				return;
				}
		}

	void moveAndScheduleComputation(ComputationId comp, MachineId sourceMachine, Resource r)
		{
		scheduleComputation(r, comp, mParams.timeToMoveComputation());
		
		mAllEvents.push_back(
			Event::MoveComputation(mCurrentTimestamp, sourceMachine, r.getCPU().machine(), comp)
			);
		}

	void scheduleComputation(Resource cpu, ComputationId computation, double offset = 0.0)
		{
		long eventIndex = mComputationEventsCompleted[computation];

		ComputationEvent toExecute = mComputationDefinitions[computation].events()[eventIndex];

		mRamContentsAndBlockedComputations.computationScheduled(computation);

		mCurentlyComputingComputationCount++;

		scheduleTask(
			cpu, 
			Task::Compute(computation, eventIndex), 
			toExecute.timeElapsed(),
			offset
			);

		mComputationEventsCompleted[computation]++;
		}

	void scheduleTask(Resource r, Task t, double timeToSpend, double startTimeOffset = 0.0)
		{
		mAllEvents.push_back(
			Event::TaskStarted(mCurrentTimestamp + startTimeOffset, r, t)
			);

		lassert_dump(
			mTasksExecuting.find(r) == mTasksExecuting.end(),
			prettyPrintString(r) << " us currently being used in task " << prettyPrintString(mTasksExecuting[r])
			);

		mTasksExecuting[r] = 
			RunningTask(
				mCurrentTimestamp + startTimeOffset, 
				mCurrentTimestamp + timeToSpend + startTimeOffset, 
				t, 
				r
				);
		}

	bool isCompleted(ComputationId id) const
		{
		return mCompletedComputations.find(id) != mCompletedComputations.end();
		}

	bool allDependenciesMet(const Computation& comp)
		{
		for (auto req: comp.prerequisites())
			if (!isCompleted(req))
				return false;

		return true;
		}

	MachineId bestMachineFor(const Computation& comp) const
		{
		if (comp.prerequisites().size())
			{
			auto it = mCompletedComputations.find(comp.prerequisites()[0]);
			lassert(it != mCompletedComputations.end());
			return it->second;
			}

		lassert(mMachineMemory.size());
		return mMachineMemory.begin()->first;
		}

	int64_t machineMemoryLimit(MachineId m) const
		{
		auto it = mMachineMemory.find(m);

		if (it == mMachineMemory.end())
			return 0;

		return it->second;
		}

	//state of the simulation
	std::set<Resource> mAllResources;

	std::map<Resource, RunningTask> mTasksExecuting;

	//recording of events
	ActiveNeighborhoods mActiveNeighborhoods;

	std::vector<Event> mAllEvents;

	double mLastActiveNeighborhoodsUpdateTimestamp;

	double mCurrentTimestamp;

	long mCurentlyComputingComputationCount;

	std::map<MachineId, int64_t> mMachineMemory;

	std::map<MachineId, int64_t> mMachineCoreCounts;

	std::set<MachineId> mMachines;

	SimulationParameters mParams;
	
	MemoryContentsAndBlockedComputations mRamContentsAndBlockedComputations;
	
	std::set<Fora::PageId> mPagesOnDisk;

	std::map<ComputationId, Computation> mComputationDefinitions;

	std::map<ComputationId, long> mComputationEventsCompleted;

	std::map<ComputationId, MachineId> mCompletedComputations;

	TwoWaySetMap<ComputationId, ComputationId> mComputationsBlockedOn;

	int64_t mTotalBytesMovedOnNetwork;

	int64_t mBytesWrittenToDisk;

	int64_t mBytesReadFromDisk;

	double mTotalSecondsOfComputeElapsed;

	map<MachineId, double> mComputeSecondsElapsedPerMachine;

	Ufora::math::Random::Uniform<double> mRandom;
};


}

}

}
