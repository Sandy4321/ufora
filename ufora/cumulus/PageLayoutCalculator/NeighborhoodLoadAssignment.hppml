/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "../../core/math/Smallest.hpp"
#include "../../core/math/Largest.hpp"
#include "../MachineId.hppml"
#include "../ComputationId.hppml"
#include <math.h>
#include "NeighborhoodsOnMachines.hppml"
#include "NeighborhoodSet.hppml"
#include "NeighborhoodLoadHistory.hppml"

namespace Cumulus {

namespace PageLayoutCalculator {

/*****************

NeighborhoodLoadAssignment - tracks how we're assigning load across machines. 

This class keeps track of how much load from each neighborhood is assigned to a 
given machine. We also track how many pages have to be added to a given machine
in order to satisfy the assignment.

*****************/

class NeighborhoodLoadAssignment {
public:
	typedef NeighborhoodLoadHistory::Load Load;

	NeighborhoodLoadAssignment(
				double usableMemoryRatio,
				const std::map<MachineId, int64_t>& inMachineSizes,
				const std::map<MachineId, int64_t>& inMachineCoreCounts,
				const NeighborhoodsOnMachines& inExistingLayout,
				double mbPerSecondAssumption
				) : 
			mUsableMemoryRatio(usableMemoryRatio),
			mMachineSizes(inMachineSizes),
			mMachineCoreCounts(inMachineCoreCounts),
			mExistingLayout(inExistingLayout),
			mMbPerSecondAssumption(mbPerSecondAssumption)
		{
		for (auto machineAndSize: inMachineSizes)
			{
			mTotalBytesAddedToMachine.set(machineAndSize.first, 0);
			mSecondsElapsedPerMachine.set(machineAndSize.first, 0);
			mTotalLoadLevelsPerMachine[machineAndSize.first] = 0.0;
			}
		}

	bool addLoad(Neighborhood n, double load)
		{
		long machineCount = mTargetLayout.neighborhoods().getKeys(n).size();

		if (load < mMachineSizes.size() * 10 * aSmallNumber)
			load = mMachineSizes.size() * 10 * aSmallNumber;
		
		if (machineCount > 0)
			{
			for (auto machine: mTargetLayout.neighborhoods().getKeys(n))
				addLoad(n, machine, load / machineCount);

			return true;
			}

		double t0 = curClock();
		Nullable<MachineId> machine = bestMachineToAddNewNeighborhoodTo(n);
		if (curClock() - t0 > 0.001)
			LOG_INFO << "took " << curClock() - t0 << " to call bestMachine with neighborhood of size " << n.pages().size();

		if (!machine)
			return false;

		lassert(!machineIsFull(*machine));

		addLoad(n, *machine, load);

		lassert(!machineIsFull(*machine));

		return true;
		}

	Neighborhood complementOnMachine(Neighborhood n, MachineId m) const
		{
		Neighborhood res = mTargetLayout.complementNeighborhood(m, n);

		return mExistingLayout.complementNeighborhood(m, res);
		}

	int64_t complementBytecountOnMachine(Neighborhood n, MachineId m) const
		{
		int64_t res = 0;

		const auto& target = mTargetLayout.neighborhoodsForMachine(m);
		const auto& cur = mExistingLayout.neighborhoodsForMachine(m);

		for (auto p: n.pages())
			if (!(target.containsPage(p) || cur.containsPage(p)))
				res = res + p.bytecount();

		return res;
		}

	bool machineIsFull(MachineId m) const
		{
		return bytesOnMachine(m) > usableMemoryForMachine(m);
		}

	int64_t usableMemoryForMachine(MachineId m) const
		{
		auto it = mMachineSizes.find(m);

		if (it == mMachineSizes.end())
			return 0;

		return it->second * mUsableMemoryRatio;
		}

	int64_t bytesOnMachine(MachineId m) const
		{
		return mTargetLayout.neighborhoodsForMachine(m).bytesInPages();
		}

	MachineId mostLoadedMachine() const
		{
		lassert(mMachineSizes.size());

		return *mSecondsElapsedPerMachine.getKeys(
			mSecondsElapsedPerMachine.highestValue()
			).begin();
		}

	MachineId leastLoadedMachine() const
		{
		lassert(mMachineSizes.size());

		return *mSecondsElapsedPerMachine.getKeys(
			mSecondsElapsedPerMachine.lowestValue()
			).begin();
		}

	Nullable<MachineId> bestMachineToAddNewNeighborhoodTo(Neighborhood n) const
		{
		Smallest<MachineId> bestMachine;

		for (auto machineAndSize: mMachineSizes)
			{
			MachineId machine = machineAndSize.first;

			//note that we have to distinguish between pages that need to be
			//added to the machine (which contribute to cost) and pages that
			//will live on the target machine thereby taking up space.
			int64_t addedBytecount = complementBytecountOnMachine(n, machine);

			int64_t bytesActuallyUsed = mTargetLayout.complementNeighborhoodBytecount(machine, n);

			if (bytesOnMachine(machine) + bytesActuallyUsed < usableMemoryForMachine(machine) || 
						bytesActuallyUsed == 0)
				bestMachine.observe(machine, addedBytecount);
			}
		
		return bestMachine.smallest();
		}

	Nullable<MachineId> leastLoadedMachineThatsNotOverloaded() const
		{
		lassert(mMachineSizes.size());

		for (auto& secondsAndMachineIds: mSecondsElapsedPerMachine.getValueToKeys())
			for (auto machine: secondsAndMachineIds.second)
				if (!machineIsFull(machine))
					return null() << machine;

		return null();
		}

	double mostTime() const
		{
		Largest<MachineId> largest;

		for (auto machineAndCores: mMachineCoreCounts)
			largest.observe(machineAndCores.first, secondsElapsed(machineAndCores.first));

		return *largest.largestWeight() / coreCount(*largest.largest());
		}

	bool rebalanceFrom(MachineId machine)
		{
		Nullable<MachineId> target = leastLoadedMachineThatsNotOverloaded();

		//OK, we're going to need to move some data off this machine. Might as well move from
		//the most loaded to the least loaded
		if (!target || *target == machine)
			return false;

		//this is slow - we should pick something better
		std::set<Neighborhood> toCheck = mTargetLayout.neighborhoods().getValues(machine);

		double t0 = curClock();
		long ct = 0;

		for (auto neighborhood: toCheck)
			if (balanceNeighborhoods(neighborhood, machine, *target))
				return true;

		return false;
		}

	bool balanceNeighborhoods(Neighborhood n, MachineId from, MachineId to)
		{
		if (mTargetLayout.neighborhoods().contains(from, n) && 
				!mTargetLayout.neighborhoods().contains(to, n))
			{
			lassert(mTargetLayout.neighborhoods().getKeys(n).size() > 0);
			double priorMostTime = mostTime();

			addNeighborhood(n, to);

			if (mostTime() < priorMostTime && !machineIsFull(to))
				//we improved
				return true;

			dropNeighborhood(n, to);
			}

		return false;
		}

	double secondsElapsed(MachineId m) const
		{
		if (mSecondsElapsedPerMachine.hasKey(m))
			return mSecondsElapsedPerMachine.getValue(m);

		return 0.0;
		}

	double spreadBetweenMostAndLeastLoaded() const
		{
		if (mMachineSizes.size() == 0)
			return 0.0;

		return mSecondsElapsedPerMachine.highestValue() - mSecondsElapsedPerMachine.lowestValue();
		}

	int64_t coreCount(MachineId machine) const
		{
		auto it = mMachineCoreCounts.find(machine);
		lassert(it != mMachineCoreCounts.end());
		return it->second;
		}

	int64_t totalBytesLoaded() const
		{
		int64_t total = 0;

		for (auto machineAndBytes: mTotalBytesAddedToMachine.getKeyToValue())
			total += machineAndBytes.second;
		
		return total;
		}

	const NeighborhoodsOnMachines& getTargetLayout() const
		{
		return mTargetLayout;
		}

	int64_t totalBytesAcrossAllMachines() const
		{
		int64_t totalBytes = 0;
		for (auto& machineAndNeighborhoods: mTargetLayout.neighborhoods().getKeysToValues())
			for (auto n: machineAndNeighborhoods.second)
				totalBytes += n.bytecount();

		return totalBytes;
		}

private:
	void addNeighborhood(Neighborhood n, MachineId m)
		{
		double level = 0;

		const auto& otherMachines = mTargetLayout.neighborhoods().getKeys(n);

		lassert(otherMachines.size());
		lassert(otherMachines.find(m) == otherMachines.end());

		for (auto otherMachine: otherMachines)
			level += neighborhoodLoad(otherMachine, n);

		long otherMachineCount = otherMachines.size();

		//every machine is going to go from 1/oMC to 1/(oMC+1)

		for (auto otherMachine: otherMachines)
			addLoad(
				n, 
				otherMachine, 
				level / (otherMachineCount + 1) - neighborhoodLoad(otherMachine, n)
				);

		addLoad(n, m, level / (otherMachineCount+1));
		}

	void dropNeighborhood(Neighborhood n, MachineId m)
		{
		double level = 0;

		const auto& machines = mTargetLayout.neighborhoods().getKeys(n);

		lassert(machines.find(m) != machines.end());
		lassert(machines.size() != 1);

		long count = machines.size();

		for (auto otherMachine: machines)
			level += neighborhoodLoad(otherMachine, n);

		for (auto otherMachine: machines)
			if (otherMachine != m)
				addLoad(
					n, 
					otherMachine, 
					level / (count - 1) - neighborhoodLoad(otherMachine, n)
					);

		addLoad(n, m, - neighborhoodLoad(m, n));
		}

	void addLoad(Neighborhood n, MachineId machine, double load)
		{
		double& loadLevel = mLoadLevelPerNeighborhood[make_pair(n, machine)];

		loadLevel += load;

		mTotalLoadLevelsPerMachine[machine] += load;

		if (!mTargetLayout.neighborhoods().contains(machine, n))
			//this is new
			{
			Neighborhood newlyAddedToThisMachine = complementOnMachine(n, machine);

			mTargetLayout.addNeighborhood(machine, n);

			mTotalBytesAddedToMachine.set(
				machine,
				mTotalBytesAddedToMachine.getValue(machine) + newlyAddedToThisMachine.bytecount()
				);
			}
			else
		if (loadLevel < aSmallNumber)
			{
			mLoadLevelPerNeighborhood.erase(make_pair(n, machine));

			mTargetLayout.dropNeighborhood(machine, n);

			Neighborhood newlyDroppedFromThisMachine = complementOnMachine(n, machine);

			mTotalBytesAddedToMachine.set(
				machine,
				mTotalBytesAddedToMachine.getValue(machine) - newlyDroppedFromThisMachine.bytecount()
				);

			mLoadLevelPerNeighborhood.erase(make_pair(n, machine));
			}

		updateSecondsElapsed(machine);
		}

	void updateSecondsElapsed(MachineId machine)
		{
		double seconds = 
			mTotalBytesAddedToMachine.getValue(machine) / (mMbPerSecondAssumption / coreCount(machine) * 1024.0 * 1024.0) + 
				mTotalLoadLevelsPerMachine[machine];

		mSecondsElapsedPerMachine.set(machine, seconds);
		}

	double neighborhoodLoad(MachineId machine, Neighborhood n)
		{
		auto it = mLoadLevelPerNeighborhood.find(make_pair(n, machine));

		if (it == mLoadLevelPerNeighborhood.end())
			return 0.0;

		return it->second;
		}

	double mMbPerSecondAssumption;

	double mUsableMemoryRatio;

	MapWithIndex<MachineId, double> mSecondsElapsedPerMachine;

	MapWithIndex<MachineId, int64_t> mTotalBytesAddedToMachine;

	map<MachineId, double> mTotalLoadLevelsPerMachine;

	map<pair<Neighborhood, MachineId>, double> mLoadLevelPerNeighborhood;

	const map<MachineId, int64_t>& mMachineSizes;

	const map<MachineId, int64_t>& mMachineCoreCounts;

	const NeighborhoodsOnMachines& mExistingLayout;

	NeighborhoodsOnMachines mTargetLayout;
};

}

}
