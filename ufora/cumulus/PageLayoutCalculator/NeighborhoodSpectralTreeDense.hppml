/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "NeighborhoodSpectralTree.hppml"
#include "NeighborhoodChanges.hppml"

namespace Cumulus {

namespace PageLayoutCalculator {

/**********************************

NeighborhoodSpectralTreeDense

Divide a set of neighborhoods into subgroups assuming they are relatively
dense. We build a full spectral tree here.

***********************************/

class NeighborhoodSpectralTreeDense : public NeighborhoodSpectralTree {
public:
	NeighborhoodSpectralTreeDense(const NeighborhoodSpectralTreeParams& params);

	void addNeighborhood(const Neighborhood& inNeighborhood);

	void dropNeighborhood(const Neighborhood& inNeighborhood);

	void dropNeighborhoods(const std::set<Neighborhood>& inNeighborhoods);

	bool hasNeighborhood(const Neighborhood& inNeighborhood);

	void update(bool forceFullUpdate = false);

	int64_t bytesInPages() const;

	int64_t bytesInNeighborhoods() const;

	int64_t neighborhoodCount() const;

	bool hasPage(Fora::PageId p) const;

	int64_t pageCount() const;

private:
	void updateSplitPoint();

	void collapseToSimpleTree();

	void createGroups();

	void rebalance();

	bool wantsRebalance();

	boost::shared_ptr<NeighborhoodSpectrumCalculator> mSpectrum;

	MapWithIndex<long, long> mIndexToGroupMap;

	bool mIsDirty;

	double mAddsSinceLastUpdate;

	double mProximateRfAtLastExpensiveUpdate;

	double mProximateRfAtLastRebalance;

	double mSplitPoint;
};

}

}
