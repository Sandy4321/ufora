/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "NeighborhoodTestUtil.hppml"
#include "NeighborhoodsOnMachines.hppml"

namespace Cumulus {
namespace PageLayoutCalculator {
namespace NeighborhoodTestUtil {

MachineId machine(long l)
	{
	return MachineId(hash_type(l));
	}

ComputationId comp(long comp)
	{
	return ComputationId::CreateIdForTesting(hash_type(comp));
	}

Neighborhood neighborhood(long l)
	{
	return Neighborhood(page(l, 0));
	}

Fora::PageId page(long col, long row) 
	{
	return Fora::PageId(hash_type(col, row), 50 * 1024 * 1024, 50 * 1024 * 1024);
	}

Fora::PageId page(long col, long row, long z) 
	{
	return Fora::PageId(hash_type(col, row, z), 50 * 1024 * 1024, 50 * 1024 * 1024);
	}

std::string pageGridDisplay(long cols, long rows, const NeighborhoodsOnMachines& neighborhoods)
	{
	std::ostringstream s;
	
	for (long row = 0; row < rows; row++)
		{
		for (long col = 0; col < cols; col++)
			{
			auto machines = 
				neighborhoods.machinesContainingOrCovering(
					Neighborhood(page(col,row))
					);

			if (machines.size() == 0)
				s << "?  ";
				else
			if (machines.size() == 1)
				s << machines[0].guid()[0] << "  ";
				else
			if (machines.size() == 2)
				s << machines[0].guid()[0] << machines[1].guid()[0] << " ";
			else
				s << machines[0].guid()[0] << machines[1].guid()[0] << "*";
			}

		s << "\n";
		}

	return s.str();
	}

void addRowCliques(
		NeighborhoodSet& neighborhoodSet, 
		long cols, 
		long rows, 
		bool addCommonPage,
		bool addSinglePages
		)
	{
	for (long col1 = 0; col1 < cols; col1++)
		for (long col2 = 0; col2 < cols; col2++)
			for (long row = 0; row < rows; row++)
				if (addSinglePages || col1 != col2)
					{
					auto n = emptyTreeSet() + page(col1, row) + page(col2, row);

					if (addCommonPage)
						n = n + page(-1,-1);

					neighborhoodSet.ensureNeighborhood(
						Neighborhood(n)
						);
					}
	}

void addColumnCliques(
		NeighborhoodSet& neighborhoodSet, 
		long cols, 
		long rows, 
		bool addCommonPage,
		bool addSinglePages
		)
	{
	for (long col1 = 0; col1 < cols; col1++)
		for (long row1 = 0; row1 < rows; row1++)
			for (long row2 = 0; row2 < rows; row2++)
				if (addSinglePages || row1 != row2)
					{
					auto n = emptyTreeSet() + page(col1, row1) + page(col1, row2);

					if (addCommonPage)
						n = n + page(-1,-1);

					neighborhoodSet.ensureNeighborhood(
						Neighborhood(n)
						);
					}
	}

void addColumnSequences(
		NeighborhoodSet& neighborhoodSet, 
		long cols, 
		long rows
		)
	{
	for (long col = 0; col < cols; col++)
		for (long row = 0; row + 1 < rows; row++)
			neighborhoodSet.ensureNeighborhood(
				Neighborhood(emptyTreeSet() + page(col, row) + page(col, row+1))
				);
	}

std::string neighborhoodToString(Neighborhood n)
	{
	std::ostringstream s;
	bool isFirst = false;

	for (auto p: n.pages())
		{
		if (isFirst)
			s << ", ";

		s << "(" << p.guid()[0] << "," << p.guid()[1] << ")";

		isFirst = false;
		}

	return s.str();
	}


Neighborhood randomNeighborhood(
		const ImmutableTreeVector<Fora::PageId>& pageCandidates, 
		Ufora::math::Random::Uniform<float>& rand,
		long maxNeighborhoodSize
		)
	{
	ImmutableTreeSet<Fora::PageId> pages;

	long desiredSize = 1 + (maxNeighborhoodSize - 1) * rand();

	for (long k = 0; k < desiredSize; k++)
		pages = pages + pageCandidates[pageCandidates.size() * rand()];

	return Neighborhood(pages);
	}

ImmutableTreeVector<Neighborhood> allSubsetsFor(ImmutableTreeVector<Fora::PageId> pageCandidates)
	{
	ImmutableTreeVector<Neighborhood> allSubsets;

	allSubsets = allSubsets + Neighborhood();

	for (auto page: pageCandidates)
		{
		ImmutableTreeVector<Neighborhood> curSubsets = allSubsets;

		for (auto subset: curSubsets)
			allSubsets = allSubsets + (subset + page);

		allSubsets = allSubsets + Neighborhood(page);
		}
	
	return allSubsets;
	}


}
}
}

