/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "ComputationBehaviorPredictor.hppml"
#include "../ComputationEvent.hppml"
#include "../../core/math/GraphUtil.hpp"
#include "../../core/math/Largest.hpp"
#include <boost/range/adaptor/reversed.hpp>

using namespace Cumulus::PageLayoutCalculator;

namespace Cumulus {

ComputationBehaviorPredictor::ComputationBehaviorPredictor(
				PolymorphicSharedPtr<TypedFora::Abi::BigVectorLayouts> handles
				) : 
		mBigVectorLayouts(handles)
	{
	}

Neighborhood ComputationBehaviorPredictor::getActivePageLoadGroup(
																ComputationId inId
																) const
	{
	auto it = mPageLoadSets.find(inId);
	if (it == mPageLoadSets.end())
		return Neighborhood();

	return it->second;
	}

double ComputationBehaviorPredictor::predictLoadOnComputation(ComputationId computation)
	{
	return mTotalTimeElapsed[computation];	
	}

pair<Neighborhood, double>
			ComputationBehaviorPredictor::getActivePageLoadPrediction(ComputationId computation)
	{
	return make_pair(Neighborhood(getActivePageLoadGroup(computation)), 0.1);
	}

void ComputationBehaviorPredictor::computationStatusChanged(
												LocalComputationPriorityAndStatusChanged change
												)
	{
	if (mFinishedComputations.find(change.computation()) != mFinishedComputations.end())
		return;

	@match LocalComputationPriorityAndStatusChanged(change)
		-| Active(_, _, BlockedOnVectorLoad(slice), statistics) ->> {
			mUnfinishedComputations.insert(change.computation());

			ImmutableTreeSet<Fora::PageId> blocking;

			blocking = blocking + mBigVectorLayouts->convertSliceToPages(slice);

			handleStatistics(change.computation(), statistics, blocking, true);
			}
		-| Active(_, _, Finished(), statistics) ->> {
			handleStatistics(change.computation(), statistics, emptyTreeSet(), false);
			dropComputation(change.computation());
			}
		-| Active(_, _, substate, statistics) ->> {
			mUnfinishedComputations.insert(change.computation());
			
			handleStatistics(
				change.computation(), 
				statistics, 
				emptyTreeSet(), 
				substate.isComputable()
				);
			}
		-| _ ->> {
			}
	}

void ComputationBehaviorPredictor::handleStatistics(
										ComputationId computation, 
										ComputationStatistics statistics,
										ImmutableTreeSet<Fora::PageId> blockingPages,
										bool isActive
										)
	{
	double timeElapsed = 
		statistics.timeSpentInInterpreter() + statistics.timeSpentInCompiler();

	mComputationToPages.dropKey(computation);

	if (isActive)
		{
		for (auto page: statistics.pagesCurentlyBeingUsed())
			mComputationToPages.insert(computation, page);

		for (auto page: blockingPages)
			mComputationToPages.insert(computation, page);

		for (auto clique: statistics.futureCliques())
			{
			for (auto page: clique)
				mComputationToPages.insert(computation, page);
			
			mObservedLoads = mObservedLoads + 
				make_pair(clique, 0.000001);
			}
		}

	mPageLoadSets[computation] = Neighborhood(
		ImmutableTreeSet<Fora::PageId>(mComputationToPages.getValues(computation))
		);
	}

void ComputationBehaviorPredictor::handleComputationEvents(ComputationId computation, ImmutableTreeVector<ComputationEvent> events)
	{
	for (auto event: events)
		@match ComputationEvent(event)
			-| Load(pagesUsed, timeElapsed) ->> {
				if (timeElapsed > mTotalTimeElapsed[computation])
					{
					mObservedLoads = mObservedLoads + 
						make_pair(
							Neighborhood(pagesUsed),
							timeElapsed - mTotalTimeElapsed[computation]
							);
					
					mTotalTimeElapsed[computation] = timeElapsed;
					}
				}
			-| _ ->> {}
	}

const std::set<ComputationId>& ComputationBehaviorPredictor::getUnfinishedComputations() const
	{
	return mUnfinishedComputations;
	}

void ComputationBehaviorPredictor::dropComputation(const ComputationId& inComputation)
	{
	mUnfinishedComputations.erase(inComputation);
	mFinishedComputations.insert(inComputation);

	mPageLoadSets.erase(inComputation);
	mComputationToPages.dropKey(inComputation);
	mTotalTimeElapsed.erase(inComputation);
	}

ImmutableTreeVector<pair<Neighborhood, double> > ComputationBehaviorPredictor::extractAndResetObservedLoads()
	{
	ImmutableTreeVector<pair<Neighborhood, double> > outLoads;

	for (auto load: mObservedLoads)
		outLoads = outLoads + make_pair(
			Neighborhood(load.first.pages()),
			load.second
			);

	mObservedLoads = ImmutableTreeVector<pair<Neighborhood, double> >();

	return outLoads;
	}

}
