/***************************************************************************
    Copyright 2015 Ufora Inc.
 
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
 
        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
****************************************************************************/

#include "ThreadGroupTree.hppml"
#include "../../core/cppml/CPPMLPrettyPrinter.hppml"
namespace Cumulus {

//add a computation to the tree and get what group its in. 
//there is an implicit "root" group for all computations
ThreadGroup ThreadGroupTree::addComputation(ComputationId computation)
    {
    lassert(!mGroupAssignments.hasKey(computation));
    
    auto newGroup = groupForComputation(computation);

    mGroupAssignments.insert(computation, newGroup);
    	
    return newGroup;
    }

//remove a root computation from the tree
void ThreadGroupTree::clearRootComputation(ComputationId root)
    {
    for (auto group: mRootsToGroups.getValues(root))
        {
        mParentToChildGroupRelation.dropKey(group);
        mParentToChildGroupRelation.dropValue(group);
        mGroupAssignments.dropValue(group);
        }

    mRootsToGroups.dropKey(root);
    }

//remove a computation from the tree
void ThreadGroupTree::dropComputation(ComputationId computation)
    {
    mGroupAssignments.discard(computation);
    }

ThreadGroup ThreadGroupTree::containingThread(ThreadGroup group) const
    {
    ThreadGroup root = ThreadGroup::groupFor(group.rootComputation());

    while (true)
        {
        bool found = false;
        for (auto child: mParentToChildGroupRelation.getValues(root))
            if (child.contains(group))
                {
                root = child;
                found = true;
                break;
                }

        if (!found)
            return root;
        }
    }

//mark a computation as a root of a tree and get back the set of computations
//that are now contained by this new group
void ThreadGroupTree::addThreadGroup(ThreadGroup newGroup, std::set<ComputationId>& outChanged)
    {
    lassert_dump(
        newGroup.prefix().size() != 0,
        "Can't add the root-group as it's already implicitly held"
        );

    if (!mRootsToGroups.hasKey(newGroup.rootComputation()))
        mRootsToGroups.insert(newGroup.rootComputation(), ThreadGroup::groupFor(newGroup.rootComputation()));

    lassert_dump(!mRootsToGroups.hasValue(newGroup), prettyPrintString(newGroup));
    mRootsToGroups.insert(newGroup.rootComputation(), newGroup);

    //find the group containing us
    ThreadGroup containing = containingThread(newGroup);

    //look at all of its children and see if they are now our children
    std::set<ThreadGroup> newChildren;
    for (auto child: mParentToChildGroupRelation.getValues(containing))
        if (newGroup.contains(child))
            newChildren.insert(child);

    mParentToChildGroupRelation.insert(containing, newGroup);
    for (auto child: newChildren)
        {
        mParentToChildGroupRelation.dropValue(child);
        mParentToChildGroupRelation.insert(newGroup, child);
        }

    outChanged.clear();
    for (auto comp: mGroupAssignments.getKeys(containing))
        if (newGroup.contains(comp))
            outChanged.insert(comp);

    for (auto comp: outChanged)
        mGroupAssignments.set(comp, newGroup);
    }

ThreadGroup ThreadGroupTree::groupForComputation(ComputationId computation) const
    {
    if (mGroupAssignments.hasKey(computation))
        return mGroupAssignments.getValue(computation);

    ThreadGroup root = ThreadGroup::groupFor(computation.rootComputation());

    while (true)
        {
        bool found = false;
        for (auto child: mParentToChildGroupRelation.getValues(root))
            if (child.contains(computation))
                {
                root = child;
                found = true;
                break;
                }

        if (!found)
            return root;
        }
    }

}
