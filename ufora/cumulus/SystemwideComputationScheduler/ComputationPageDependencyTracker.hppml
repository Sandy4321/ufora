/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "../../core/containers/ImmutableTreeSet.hppml"
#include "../../FORA/VectorDataManager/PageId.hppml"
#include "../../FORA/VectorDataManager/PageRefcountEvent.hppml"
#include "../MachineId.hppml"

namespace Cumulus {

namespace SystemwideComputationScheduler {

class ComputationPageDependencyTracker {
public:
	ComputationPageDependencyTracker(
					boost::function1<void, ComputationId> inAllDependenciesMet
					) : 
			mAllDependenciesMet(inAllDependenciesMet)
		{
		}

	void addMachine(MachineId machine)
		{
		mMachines.insert(machine);
		}

	void dropMachine(MachineId machine)
		{
		mMachines.erase(machine);
		mPagesInRam.dropValue(machine);
		}

	bool pageIsInRam(Fora::PageId page, MachineId machine)
		{
		return mPagesInRam.contains(page, machine);
		}

	void mapPage(Fora::PageId sourcePage, Fora::PageId destPage)
		{
		std::set<ComputationId> toCheck = mDelayedComputations.getKeys(sourcePage);

		mDelayedComputations.dropValue(sourcePage);

		for (auto c: toCheck)
			mDelayedComputations.insert(c, destPage);
		
		checkComputations(toCheck);
		}

	bool hasPageBeenDroppedAcrossEntireSystem(Fora::PageId page)
		{
		return mPagesDroppedAcrossEntireSystem.find(page) != mPagesDroppedAcrossEntireSystem.end();
		}

	void pageDroppedAcrossEntireSystem(Fora::PageId page)
		{
		mPagesDroppedAcrossEntireSystem.insert(page);

		std::set<ComputationId> toCheck = mDelayedComputations.getKeys(page);

		checkComputations(toCheck);
		}

	template<class T>
	void checkComputations(const T& toCheck)
		{
		for (auto id: toCheck)
			{
			if (machineHoldingAllPages(mDelayedComputations.getValues(id)))
				{
				LOG_DEBUG << "computation " << prettyPrintString(id)
					<< " met dependencies after "
					<< curClock() - mDelayedComputationsT0[id];

				mDelayedComputations.dropKey(id);
				mAllDependenciesMet(id);
				}
			}
		}

	void handlePageRefcountEvent(
						const Fora::PageRefcountEvent& event, 
						Cumulus::MachineId onMachineId
						)
		{
		@match Fora::PageRefcountEvent(event)
			-| PageAddedToRam(page) ->> {
				mPagesInRam.insert(page, onMachineId);

				std::set<ComputationId> toCheck = mDelayedComputations.getKeys(page);

				checkComputations(toCheck);
				}
			-| PageDroppedFromRam(page) ->> {
				mPagesInRam.drop(page, onMachineId);
				}
		}

	template<class T>
	Nullable<MachineId> machineHoldingAllPages(const T& pageSet)
		{
		for (auto machine: mMachines)
			if (allContainedOnMachine(pageSet, machine))
				return null() << machine;

		return null();
		}

	template<class T>
	ImmutableTreeSet<MachineId> machinesHoldingAllPages(const T& pageSet)
		{
		ImmutableTreeSet<MachineId> result;

		for (auto machine: mMachines)
			if (allContainedOnMachine(pageSet, machine))
				result = result + machine;

		return result;
		}

	template<class T>
	bool allContainedOnMachine(const T& pageSet, MachineId machine)
		{
		for (auto page: pageSet)
			if (!isDroppedAcrossSystem(page) && !pageIsInRam(page, machine))
				return false;
		return true;
		}

	bool isDroppedAcrossSystem(Fora::PageId page)
		{
		return mPagesDroppedAcrossEntireSystem.find(page) != mPagesDroppedAcrossEntireSystem.end();
		}

	void dropComputation(ComputationId computation)
		{
		if (mDelayedComputations.hasKey(computation))
			mDelayedComputations.dropKey(computation);
		}

	const std::set<Fora::PageId>& dependenciesFor(ComputationId comp)
		{
		return mDelayedComputations.getValues(comp);
		}

	const std::set<ComputationId>& computationsDependingOn(Fora::PageId page)
		{
		return mDelayedComputations.getKeys(page);
		}

	//returns true if the computation is missing a dependency, false otherwise
	bool deferComputation(const ComputationId& id, ImmutableTreeSet<Fora::PageId> pages)
		{
		if (isDeferred(id))
			mDelayedComputations.dropKey(id);

		std::set<Fora::PageId> pageSet;

		for (auto page: pages)
			if (mPagesDroppedAcrossEntireSystem.find(page) == mPagesDroppedAcrossEntireSystem.end())
				pageSet.insert(page);

		bool needsDefer = !machineHoldingAllPages(pageSet);

		if (!needsDefer)
			return false;

		mDelayedComputations.update(id, pageSet);
		mDelayedComputationsT0[id] = curClock();

		return true;
		}

	void updateDeferredComputation(const ComputationId& id, ImmutableTreeSet<Fora::PageId> pages)
		{
		if (machineHoldingAllPages(pages))
			{
			LOG_DEBUG << "computation " << prettyPrintString(id)
				<< " met dependencies after "
				<< curClock() - mDelayedComputationsT0[id];
				
			mDelayedComputations.dropKey(id);
			mAllDependenciesMet(id);
			}
		else
			{
			std::set<Fora::PageId> pageSet;

			for (auto page: pages)
				if (mPagesDroppedAcrossEntireSystem.find(page) == mPagesDroppedAcrossEntireSystem.end())
					pageSet.insert(page);

			if (pageSet != mDelayedComputations.getValues(id))
				{
				if (mDelayedComputations.hasKey(id))
					mDelayedComputations.dropKey(id);

				mDelayedComputations.update(id, pageSet);

				LOG_DEBUG << "Updating defer dependencies for " << prettyPrintString(id)
					<< " to " << prettyPrintStringWithoutWrapping(pages);
				}
			}
		}

	bool isDeferred(const ComputationId& id)
		{
		return mDelayedComputations.hasKey(id);
		}

	const std::set<Fora::PageId>& pagesInRamOnMachine(const MachineId& machine)
		{
		return mPagesInRam.getKeys(machine);
		}

	const TwoWaySetMap<Fora::PageId, MachineId>& pagesInRam() const
		{
		return mPagesInRam;
		}

	const TwoWaySetMap<ComputationId, Fora::PageId>& delayedComputations() const
		{
		return mDelayedComputations;
		}

	long totalBlockedComputations() const
		{
		return mDelayedComputations.getKeysToValues().size();
		}

	bool anyPageHasOnlyOneComputationDependingOn(ImmutableTreeSet<Fora::PageId> pageGroup) const
		{
		for (auto p: pageGroup)
			if (mDelayedComputations.getKeys(p).size() <= 1)
				return true;

		return false;
		}

private:
	TwoWaySetMap<ComputationId, Fora::PageId> mDelayedComputations;

	map<ComputationId, double> mDelayedComputationsT0;

	TwoWaySetMap<Fora::PageId, MachineId> mPagesInRam;

	std::set<MachineId> mMachines;

	std::set<Fora::PageId> mPagesDroppedAcrossEntireSystem;

	boost::function1<void, ComputationId> mAllDependenciesMet;
};

}

}
