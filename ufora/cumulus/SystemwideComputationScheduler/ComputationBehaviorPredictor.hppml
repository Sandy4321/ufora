/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include <map>
#include <set>
#include <boost/unordered_map.hpp>
#include <boost/unordered_set.hpp>

#include "../PageLayoutCalculator/Neighborhood.hppml"
#include "../ComputationId.hppml"
#include "../ComputationStatusOnMachineChanged.hppml"
#include "../../FORA/Vector/VectorDataID.hppml"
#include "../../FORA/VectorDataManager/PageId.hppml"
#include "../../FORA/TypedFora/ABI/BigVectorLayouts.hppml"
#include "../LocalComputationPriorityAndStatusChanged.hppml"
#include "../../core/containers/MapWithIndex.hpp"

namespace Cumulus {

class ComputationEvent;

/************************

ComputationBehaviorPredictor

Maintains a history of the sequences of pageloads by given threads, which allows us to model
future behavior of computations so that we can make good paging decisions.

This class is _not_ threadsafe.

************************/

class ComputationBehaviorPredictor {
public:
	ComputationBehaviorPredictor(
					PolymorphicSharedPtr<TypedFora::Abi::BigVectorLayouts> handles
					);

	void computationStatusChanged(LocalComputationPriorityAndStatusChanged change);

	PageLayoutCalculator::Neighborhood getActivePageLoadGroup(ComputationId inId) const;

	const std::set<ComputationId>& getUnfinishedComputations() const;

	pair<PageLayoutCalculator::Neighborhood, double> getActivePageLoadPrediction(ComputationId computation);

	void handleComputationEvents(ComputationId id, ImmutableTreeVector<ComputationEvent> events);

	void dropComputation(const ComputationId& inComputation);

	double predictLoadOnComputation(ComputationId computation);

	ImmutableTreeVector<pair<PageLayoutCalculator::Neighborhood, double> > extractAndResetObservedLoads();

private:
	void handleStatistics(
					ComputationId computation, 
					ComputationStatistics statistics,
					ImmutableTreeSet<Fora::PageId> blockingPages,
					bool isActive
					);

	std::set<ComputationId> mUnfinishedComputations;

	std::set<ComputationId> mFinishedComputations;

	std::map<ComputationId, double> mTotalTimeElapsed;

	std::map<ComputationId, PageLayoutCalculator::Neighborhood> mPageLoadSets;

	TwoWaySetMap<ComputationId, Fora::PageId> mComputationToPages;

	PolymorphicSharedPtr<TypedFora::Abi::BigVectorLayouts> mBigVectorLayouts;

	ImmutableTreeVector<pair<PageLayoutCalculator::Neighborhood, double> > mObservedLoads;
};

}
