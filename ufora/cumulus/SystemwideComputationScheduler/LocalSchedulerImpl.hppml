/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include <boost/shared_ptr.hpp>
#include "../../core/PolymorphicSharedPtr.hpp"
#include "../../core/EventBroadcaster.hpp"
#include "../../core/math/Random.hpp"
#include "../PageLayoutCalculator/LongTermPageLayoutCalculation.hppml"

#include "../SystemwidePageRefcountTracker.hppml"
#include "../ComputationId.hppml"
#include "../VectorLoadRequest.hppml"
#include "../VectorLoadedResponse.hppml"
#include "ComputationBehaviorPredictor.hppml"
#include "../MachineComputationMap.hppml"
#include "../ComputationDependencyGraph.hpp"

#include "../InitiateComputationMove.hppml"
#include "../SchedulerToComputationMessage.hppml"
#include "../../FORA/TypedFora/ABI/BigVectorPageLayout.hppml"
#include "../../FORA/TypedFora/ABI/BigVectorLayouts.hppml"

#include "../../core/containers/TwoWaySetMap.hpp"
#include "../../core/containers/MapWithIndex.hpp"
#include "../../core/PolymorphicSharedPtrBinder.hpp"
#include "../../core/Logging.hpp"
#include "SchedulerPageLoader.hppml"
#include "ComputationPageDependencyTracker.hppml"
#include "../CumulusComponentMessageCreated.hppml"
#include "../CumulusClientOrMachine.hppml"

#include "LocalSchedulerImplKernel.hppml"
#include "LocalSchedulerEvent.hppml"

namespace Cumulus {

class AddDropFinalState;

namespace SystemwideComputationScheduler {

/************

Scheduler

This class is responsible for several things, all of which should be refactored into separate
contained classes.

- Splitting computations running on the current machine.
- Moving computations that are locally blocked to a machine with appropriate data.  
	- In particular, notice a computation depends on a page clique. If that page clique gets 
			materialized, move to that machine.
	- If the necessary pages show up locally, indicate to ActiveComputations that it may resume
- Moving computations to other machines if we are overloaded locally and the other machine is not.
- If we are the leader, running the PageLayoutCalculator and telling each machine what to hold
- Responding to messages indicating what data to hold.

************/

class LocalSchedulerImpl : 
			public PolymorphicSharedPtrBase<LocalSchedulerImpl> {
public:
	LocalSchedulerImpl(
				PolymorphicSharedPtr<CallbackScheduler> inCallbackScheduler,
				PolymorphicSharedPtr<VectorDataManager> inVDM,
            	MachineId inOwnMachineId,
				long inActiveThreadCount,
				boost::function1<void, LocalSchedulerEvent> inEventHandler
				);

	void teardown();

	void initializeFromAddDropState(const AddDropFinalState& state);

	void addMachine(MachineId inMachine);

    void consumePageEvent(const Fora::PageRefcountEvent& inEvent, Cumulus::MachineId onMachineId);

	void splitOrMoveIfNeededCallback();

	void pageNoLongerReferencedAcrossSystem(Fora::PageId page);

	void splitOrMoveIfNeeded_();

	void scheduleIfNecessary_();

	void onKernelInitiateComputationMoved(InitiateComputationMove move);

	void onKernelCumulusComponentMessageCreated(CumulusComponentMessageCreated msg);

	void setDiagnosticLogfilePath(std::string inLogfilePath);
	
	long getComputationsMoved();

    void handleCumulusComponentMessage(
                    const CumulusComponentMessage& message, 
                    const CumulusClientOrMachine& source, 
                    const CumulusComponentType& componentType
                    );

	Nullable<std::string> getDiagnosticLogfilePath();
		
	boost::recursive_mutex mMutex;

	boost::function1<void, LocalSchedulerEvent> mEventHandler;

	long mActiveThreadCount;
	
    EventBroadcaster<InitiateComputationMove> mOnInitiateComputationMoved;

	EventBroadcaster<CumulusComponentMessageCreated> mOnCumulusComponentMessageCreated;

	double mLastSplitTime;

	bool mSplitCallbackIsScheduled;

	PolymorphicSharedPtr<CallbackScheduler> mCallbackScheduler;

	bool mIsTornDown;

	LocalSchedulerImplKernel mKernel;

	Nullable<std::string> mLogfilePath;

};
}
}

