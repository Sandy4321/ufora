/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "../../core/cppml/MemoizedAlternativePointer.hppml"

/******************

ForaValueLexicalComparison

Provides services for comparing FORA values lexically, instead of based on
their hash.

*******************/

namespace Cumulus {

template<class T>
char comparison(uint8_t* lhs, uint8_t* rhs) 
	{
	if (*(T*)lhs < *(T*)rhs)
		return -1;
	if (*(T*)lhs > *(T*)rhs)
		return 1;
	return 0;
	}

inline char lexicalUforaValueComparisonByType(uint8_t* lhs, uint8_t* rhs, Type t)
	{
	@match Type(t)
		-| Integer(bitcount, isSigned) ->> {
			if (bitcount == 64 && isSigned)
				return comparison<int64_t>(lhs, rhs);
			if (bitcount == 64 && !isSigned)
				return comparison<uint64_t>(lhs, rhs);
			if (bitcount == 32 && isSigned)
				return comparison<int32_t>(lhs, rhs);
			if (bitcount == 32 && !isSigned)
				return comparison<uint32_t>(lhs, rhs);
			if (bitcount == 16 && isSigned)
				return comparison<int16_t>(lhs, rhs);
			if (bitcount == 16 && !isSigned)
				return comparison<uint16_t>(lhs, rhs);
			if (bitcount == 8 && isSigned)
				return comparison<int8_t>(lhs, rhs);
			if (bitcount == 8 && !isSigned)
				return comparison<uint8_t>(lhs, rhs);
			if (bitcount == 1)
				return comparison<bool>(lhs, rhs);
			}
		-| Float(bitcount) ->> {
			if (bitcount == 64)
				return comparison<double>(lhs, rhs);
			if (bitcount == 32)
				return comparison<float>(lhs, rhs);
			}
		-| String() ->> {
			String& lhsString(*(String*)lhs);
			String& rhsString(*(String*)rhs);

			return strcmp(lhsString.c_str(), rhsString.c_str());
			}
		-| DateTime() ->> {
			return comparison<DateTime>(lhs, rhs);
			}
		-| TimeDuration() ->> {
			return comparison<TimeDuration>(lhs, rhs);
			}
		-| Tuple(subtypes) ->> {
			int64_t offset = 0;
			for (auto eltType: subtypes)
				{
				char res = lexicalUforaValueComparisonByType(lhs + offset, rhs+offset, eltType);
				if (res != 0)
					return res;

				offset += eltType.size();
				}
			return 0;
			}
		-| Class(subtypes) ->> {
			int64_t offset = 0;
			for (auto eltType: subtypes)
				{
				char res = lexicalUforaValueComparisonByType(lhs + offset, rhs+offset, eltType);
				if (res != 0)
					return res;

				offset += eltType.size();
				}
			return 0;
			}
		-| _ ->> {
			}
	
	return t.cmp(lhs, rhs);
	}

inline bool lexicalUforaValueComparisonByType(pair<uint8_t*, Type> lhs, pair<uint8_t*, Type> rhs)
	{
	if (lhs.second != rhs.second)
		return lhs.second.hash() < rhs.second.hash();

	return lexicalUforaValueComparisonByType(lhs.first, rhs.first, lhs.second) < 0;
	}

inline pair<uint8_t*, Type> unwrapDataAndJov(pair<uint8_t*, JOV> p)
	{
	if (p.second.constant())
		return make_pair((uint8_t*)p.second.constant()->getData(), p.second.constant()->type());
	if (p.second.type())
		return make_pair(p.first, *p.second.type());
	ImplVal iv = *(ImplVal*)p.first;

	return make_pair((uint8_t*)iv.data(), iv.type());
	}

inline bool lexicalUforaValueComparison(pair<uint8_t*, JOV> lhs, pair<uint8_t*, JOV> rhs) 
	{
	return lexicalUforaValueComparisonByType(unwrapDataAndJov(lhs), unwrapDataAndJov(rhs));
	}

inline bool lexicalUforaValueComparisonIVC(ImplValContainer lhs, ImplValContainer rhs)
	{
	return lexicalUforaValueComparison(
		pair<uint8_t*, JOV>((uint8_t*)lhs.data(), JOV::OfType(lhs.type())),
		pair<uint8_t*, JOV>((uint8_t*)rhs.data(), JOV::OfType(rhs.type()))
		);
	}

class LexicalUforaValueComparisonPredicate {
public:
	bool operator()(pair<uint8_t*, JOV> l, pair<uint8_t*, JOV> r) const
		{
		typedef MemoizedAlternativePointer<JOV> RawJOV;

		static RawJOV int64 = JOV::OfType(Type::Integer(64, true));
		static RawJOV pairOfInt64 = JOV::Tuple(JOVT() + *int64 + *int64);
		
		RawJOV lj(l.second);
		RawJOV rj(l.second);
		
		if (lj == rj)
			{
			if (rj == int64)
				return comparison<int64_t>(l.first, r.first) < 0;
			if (rj == pairOfInt64)
				return comparison<pair<int64_t, int64_t> >(l.first, r.first) < 0;
			}
		
		return lexicalUforaValueComparison(l,r);
		}
};

}

