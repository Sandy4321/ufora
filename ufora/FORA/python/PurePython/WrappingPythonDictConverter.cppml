/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "WrappingPythonDictConverter.hppml"

#include "PythonAst.hppml"
#include "../../Language/Function.hppml"
#include "../../Language/FunctionStage1Simulation.hppml"
#include "../../Core/ClassMediator.hppml"
#include "../../Core/ImplValContainerUtilities.hppml"
#include "../../../core/Logging.hpp"

namespace Fora {

WrappingPythonDictConverter::WrappingPythonDictConverter(
        const ImplValContainer& pyDictClassImplVal
        ) : mPyDictClass(pyDictClassImplVal)
    {
    lassert(pyDictClassImplVal.isCST());
    
    mEmptyInstance = createDict(
        ImmutableTreeMap<ImplValContainer, ImplValContainer>()
        );
    }

Expression WrappingPythonDictConverter::convertPyDict(
        const Fora::PythonAstExpr_DictType& dictExpr,
        const std::function<Expression(const PythonAstExpr&)>& 
            convertPythonAstExpressionToFora
        ) const
    {
    auto rawForaDictExpr = PythonDictConverter::convertPyDict(
        dictExpr,
        convertPythonAstExpressionToFora
        );

    return instantiatePyDictExpr(rawForaDictExpr);
    }

Expression WrappingPythonDictConverter::instantiatePyDictExpr(
        const Expression& memberExpr
        ) const
    {
    ImmutableTreeVector<ApplyArgument> applyArguments;

    applyArguments = applyArguments +
        ApplyArgument::Normal(
            null(),
            Expression::Constant(
                CSTValue(
                    Symbol("CreateInstance")
                    )
                )
            );

    applyArguments = applyArguments + memberExpr;

    return Expression::Apply(
        Expression::Constant(
            CSTValue(mPyDictClass)
            ),
        applyArguments
        );
    }

ImplValContainer WrappingPythonDictConverter::createDict(
        const ImmutableTreeVector<ImplValContainer>& keys,
        const ImmutableTreeVector<ImplValContainer>& values
        ) const
    {
    FunctionStage1::Simulation simulation(10);

    ImmutableTreeVector<ImplValContainer> applyArgs;

    applyArgs = applyArgs + ImplValContainer(mPyDictClass);

    applyArgs = applyArgs + 
        ImplValContainerUtilities::createSymbol(
            Symbol("CreateInstance")
            );

    applyArgs = applyArgs + 
        PythonDictConverter::createDict(
            keys, values
            );

    FunctionStage1::ExpressionEvaluationResult res = 
        simulation.evaluateApply(applyArgs);

    lassert(res.isResult());

    return res.getResult().val();
    }

ImplValContainer WrappingPythonDictConverter::createDict(
        const ImmutableTreeMap<ImplValContainer, ImplValContainer>& keysAndValues
        ) const
    {
    return createDict(
        keysAndValues.keys(),
        keysAndValues.values()
        );
    }

Nullable<std::pair<ImmutableTreeVector<CSTValue>, ImmutableTreeVector<ImplValContainer>>>
WrappingPythonDictConverter::invertDict(ImplValContainer possibleDict)
    {
    //if its the same class object that we would create for the empty dict
    if (possibleDict.type().isClass() && possibleDict.type().getClass().classBody() == 
            mEmptyInstance.type().getClass().classBody())
        {
        Nullable<pair<ImplValContainer, Nullable<Symbol> > > member = 
                ImplValContainerUtilities::objectGetMember(possibleDict, Symbol("@m"));

        lassert_dump(member && !member->second, "Expected the PyDict '@m' field to be simple data");

        lassert(member->first.type().isDictionary());

        const Dictionary& dict = member->first.cast<Dictionary>();

        return null() <<
            std::make_pair(
                dict.keys(),
                dict.values()
                );
        }
        
    return null();
    }

}


