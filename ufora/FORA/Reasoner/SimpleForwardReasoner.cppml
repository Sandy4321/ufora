/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/

#include "SimpleForwardReasoner.hppml"
#include "../Judgment/ControlFlowGraphJudgmentUtil.hppml"
#include "../../core/Logging.hpp"
#include "../../core/Clock.hpp"
#include "../Axioms/Axiom.hppml"
#include "../Axioms/AxiomGroup.hppml"

namespace Fora {

SimpleForwardReasoner::SimpleForwardReasoner(
			PolymorphicSharedPtr<TypedFora::Compiler> inCompiler,
			PolymorphicSharedPtr<Axioms> inAxioms,
			bool inAllowExceptions
			) : 
		mAxioms(inAxioms),
		mCompiler(inCompiler),
		mAllowExceptions(inAllowExceptions)
	{
	}

bool SimpleForwardReasoner::allowExceptions() const
	{
	return mAllowExceptions;
	}

PolymorphicSharedPtr<Axioms> SimpleForwardReasoner::getAxioms() const
	{
	return mAxioms;
	}

TypedFora::Compiler& SimpleForwardReasoner::getCompiler()
	{
	return *mCompiler;
	}

PolymorphicSharedPtr<ReasonerFrame> SimpleForwardReasoner::getFrameFor(const ReasonerEntrypoint& entrypoint)
	{
	auto& result = mFrames[entrypoint];

	if (!result)
		{
		LOG_DEBUG << "Created a new frame at " << entrypoint;

		result.reset(new ReasonerFrame(entrypoint, *this));
		mGraph.markDirty(entrypoint);
		}

	return result;
	}


PolymorphicSharedPtr<ReasonerFrame> SimpleForwardReasoner::reason(JudgmentOnValueTuple applyJovt)
	{
	auto axiom = mAxioms->axiom(*mCompiler, applyJovt);

	lassert(axiom);
	lassert(!applyJovt.hasExtras());

	//start by expanding the apply tuple
	@match Axiom(*axiom)
		-| Expands(jovt, generator) ->> {
			auto cfg = generator(ApplySignature(applyJovt.jovs().size()));

			ReasonerEntrypoint entrypoint = ReasonerEntrypoint(cfg, applyJovt.jovs());

			mGraph.addRoot(entrypoint);

			auto frame = getFrameFor(entrypoint);

			updateAll();

			return frame;
			}
	}

void SimpleForwardReasoner::updateAll()
	{
	while (auto nEntrypoint = mGraph.popDirtyReachableFrame())
		updateFrame(*nEntrypoint);
	}

void SimpleForwardReasoner::updateFrame(const ReasonerEntrypoint& entrypoint)
	{
	auto frame = getFrameFor(entrypoint);

	JudgmentOnAction priorJOA = frame->exits();

	MapWithIndex<ReasonerFrame::Node, ReasonerEntrypoint> calledFrames = frame->getCalledFrames();

	frame->recalculate();

	MapWithIndex<ReasonerFrame::Node, ReasonerEntrypoint> newCalledFrames = frame->getCalledFrames();

	std::set<ReasonerEntrypoint> newCalled;

	for (auto& frameAndLabels: newCalledFrames.getValueToKeys())
		newCalled.insert(frameAndLabels.first);

	mGraph.setEdges(entrypoint, newCalled);

	if (!frame->isRecursive() && isRecursive(entrypoint))
		{
		frame->markRecursive();
		mGraph.markDirty(entrypoint);
		}

	if (priorJOA != frame->exits())
		for (auto callingFrame: mGraph.getCallers(entrypoint))
			{
			LOG_DEBUG 
				<< callingFrame << " marked dirty because it called " 
				<< entrypoint 
				<< " whose JOA changed from "
				<< priorJOA << " to "
				<< frame->exits()
				;

			getFrameFor(callingFrame)->entrypointExitsChanged(entrypoint);
			mGraph.markDirty(callingFrame);
			}
	}

bool SimpleForwardReasoner::isRecursive(ReasonerEntrypoint entrypoint)
	{
	std::set<ReasonerEntrypoint> seen;

	std::set<ReasonerEntrypoint> toCheck;

	for (auto c: mGraph.getCallers(entrypoint))
		toCheck.insert(c);

	while (toCheck.size())
		{
		ReasonerEntrypoint c = *toCheck.begin();
		toCheck.erase(c);

		if (seen.find(c) == seen.end())
			{
			seen.insert(c);

			for (auto c2: mGraph.getCallers(c))
				toCheck.insert(c2);
			}

		if (c == entrypoint)
			return true;
		}

	return false;
	}

ReasonerEntrypoint SimpleForwardReasoner::getRecursionRelaxationFor(
									const ReasonerEntrypoint& caller,
									Nullable<std::string> callLocation,
									const ReasonerEntrypoint& callee
									)
	{
	//in looking for recursion, we're trying to find paths that look like
	//
	//	A -> B-> ... A -> B
	//
	//where the call in "A" is at the same CFG location.

	std::set<ReasonerEntrypoint> seen;

	std::set<ReasonerEntrypoint> toCheck;
	toCheck.insert(caller);

	while (toCheck.size())
		{
		ReasonerEntrypoint calleeCandidate = *toCheck.begin();
		toCheck.erase(calleeCandidate);

		if (seen.find(calleeCandidate) == seen.end())
			{
			seen.insert(calleeCandidate);

			for (auto callerCandidate: mGraph.getCallers(calleeCandidate))
				{
				toCheck.insert(callerCandidate);

				if (calleeCandidate.graph() == callee.graph() && calleeCandidate != callee && 
							callerCandidate.graph() == caller.graph() && callerCandidate != caller)
					{
					for (const auto& node: getFrameFor(callerCandidate)->getCalledFrames().getKeys(calleeCandidate))
						if (node.label() == callLocation)
							{
							LOG_DEBUG << calleeCandidate << " recurses to " << callee;
							return calleeCandidate;
							}
					}
				}
			}
		}

	return callee;
	}

int64_t SimpleForwardReasoner::totalFrameCount() const
	{
	return mFrames.size();
	}

void SimpleForwardReasoner::markFrameDirty(const ReasonerEntrypoint& caller)
	{
	mGraph.markDirty(caller);
	}
}

