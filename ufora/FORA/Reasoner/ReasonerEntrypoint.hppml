#pragma once

#include "../ControlFlowGraph/ControlFlowGraph.hppml"
#include "../Judgment/JudgmentOnValue.hppml"

namespace Fora {

@type ReasonerEntrypoint = 
		ControlFlowGraph graph,
		ImmutableTreeVector<JOV> jovs,
		hash_type hash
{
public:
	static hash_type hashFrame(const ControlFlowGraph& inGraph, const ImmutableTreeVector<JOV>& jovs);

	ReasonerEntrypoint(const ControlFlowGraph& inGraph, const ImmutableTreeVector<JOV>& inJOVs)
		{
		graph() = inGraph;
		jovs() = inJOVs;
		hash() = hashFrame(inGraph, inJOVs);
		}

	bool operator<(const ReasonerEntrypoint& other) const
		{
		return hash() < other.hash();
		}

	bool operator==(const ReasonerEntrypoint& other) const
		{
		return hash() == other.hash();
		}

	bool operator!=(const ReasonerEntrypoint& other) const
		{
		return hash() != other.hash();
		}
};

}

template<>
class CPPMLPrettyPrint<Fora::ReasonerEntrypoint> {
public:
		static void prettyPrint(
							CPPMLPrettyPrintStream& stream,
							const Fora::ReasonerEntrypoint& toPr
							)
			{
			stream << "ReasonerEntrypoint(" << toPr.graph().graphName() << " with " << toPr.jovs() << ")";
			}
};
