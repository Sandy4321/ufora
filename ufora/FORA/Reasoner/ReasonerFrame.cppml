/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/

#include "SimpleForwardReasoner.hppml"
#include "../Judgment/ControlFlowGraphJudgmentUtil.hppml"
#include "ReasonerFrame.hppml"
#include "../../core/cppml/CPPMLVisit.hppml"
#include "../../core/Logging.hpp"
#include "../../core/Clock.hpp"
#include "../Axioms/Axiom.hppml"
#include "../Axioms/AxiomGroup.hppml"

namespace Fora {

class JudgmentMerger {
public:
	JudgmentOnResult collapseJOR(JudgmentOnResult jor) const
		{
		if (jor.vals().size() == 0)
			return jor;

		JOV val = jor.vals()[0];

		for (long k = 1; k < jor.vals().size();k++)
			val = mergeJudgments(val, jor.vals()[k]);

		return JudgmentOnResult(val);
		}

	@type VectorDepthVisitor = const JudgmentMerger* merger, int maxDepthSeen {
	public:
		template<class T>
		void processDown(const T& in,
						 bool& outKeepProcessing
						 )
			{
			}

		void processDown(const JudgmentOnValueVector& in,
						 bool& outKeepProcessing
						 )
			{
			for (auto jov: in.elementsJOR().vals())
				maxDepthSeen() = std::max<long>(maxDepthSeen(), 1 + merger()->vectorDepth(jov));
			}

		template<class T>
		void processUp(const T& in)
			{
			}
	};

	int vectorDepth(JOV jov) const
		{
		VectorDepthVisitor vis(this, 0);

		::visit(jov, vis);

		return vis.maxDepthSeen();
		}

	@type ClassMediatorCounterVisitor = 
		int classMediatorsSeen, 
		int unknownJudgmentsSeen

	{
	public:
		template<class T>
		void processDown(const T& in,
						 bool& outKeepProcessing
						 )
			{
			}

		void processDown(const JudgmentOnValueAtom& in,
						 bool& outKeepProcessing
						 )
			{
			if (in.isUnknown())
				unknownJudgmentsSeen()++;
			}

		void processDown(const JudgmentOnValue& in,
						 bool& outKeepProcessing
						 )
			{
			if (in.isUnknown() || in.isUnknownCSTKnown())
				unknownJudgmentsSeen()++;
			}

		void processDown(const JudgmentOnValueClass& in,
						 bool& outKeepProcessing
						 )
			{
			if (!in.isUnknown())
				classMediatorsSeen()++;
			else
				unknownJudgmentsSeen()++;
			}

		template<class T>
		void processUp(const T& in)
			{
			}
	};

	ClassMediatorCounterVisitor classMediatorCount(JOV jov) const
		{
		ClassMediatorCounterVisitor vis(0,0);

		::visit(jov, vis);

		return vis;
		}

	JudgmentOnValue mergeJudgments(JOV left, JOV right) const
		{
		JOVPair p(left, right);
		
		@match JOVPair(p)
			-|	(Unknown(),_) ->> {
				return  JOV();
				}
			-|	(_,Unknown()) ->> {
				return  JOV();
				}
			-|	(UnknownCSTKnown(isCST),o) ->> {
				if (o.isCST() && *o.isCST() == isCST)
					return  left;
				return JOV();
				}
			-|	(o,UnknownCSTKnown(isCST)) ->> {
				if (o.isCST() && *o.isCST() == isCST)
					return  right;
				return JOV();
				}
			-|  (Union(unionJOV), jov) ->> {
				return mergeJudgments(unionJOV, jov);
				}
			-|	(JOVAsValue(j1), JOVAsValue(j2)) ->> {
				return mergeJudgments(j1, j2);
				}
			-|	(Atom(j1), Atom(j2)) ->> {
				return mergeJudgments(j1, j2);
				}
			-|	(Vector(j1), Vector(j2)) ->> {
				return mergeJudgments(j1, j2);
				}
			-|	(MutableVector(j1), MutableVector(j2)) ->> {
				return mergeJudgments(j1, j2);
				}
			-|	(Alternative(j1), Alternative(j2)) ->> {
				return mergeJudgments(j1, j2);
				}
			-|	(Tuple(j1), Tuple(j2)) ->> {
				return mergeJudgments(j1, j2);
				}
			-|	(Class(j1), Class(j2)) ->> {
				return mergeJudgments(j1, j2);
				}
			-|	(Dictionary(j1), Dictionary(j2)) ->> {
				return mergeJudgments(j1, j2);
				}
			-|	_ ->> {
				return JOV();
				}
			;
		}

	JudgmentOnValue mergeJudgments(const JudgmentOnValueAlternative& lhs, const JudgmentOnValueAlternative& rhs) const
		{
		return JudgmentOnValue::Alternative(
			JudgmentOnValueAlternative(
				lhs.sym() == rhs.sym() ? lhs.sym() : Nullable<Symbol>(),
				mergeJudgments(lhs.val(), rhs.val())
				)
			);
		}

	JudgmentOnValue		mergeJudgments(const JudgmentOnValueAtom& lhs, const JudgmentOnValueAtom& rhs) const
		{
		JOV j1 = JOV::Atom(lhs);
		JOV j2 = JOV::Atom(rhs);

		if (j1.covers(j2))
			return j1;

		if (j2.covers(j1))
			return j2;
				
		if (j1.type() && j2.type() && j1.type() == j2.type())
			return JOV::OfType(*j1.type());

		return JOV::Atom(JudgmentOnValueAtom::Unknown());
		}

	JudgmentOnValue mergeJudgments(const JudgmentOnValueClass& lhs, const JudgmentOnValueClass& rhs) const
		{
		if (lhs.isUnknown())
			return JOV::Class(lhs);
		
		if (rhs.isUnknown())
			return JOV::Class(rhs);
		
		@match JudgmentOnValueClass(lhs)
			-| Class(jovs1, body1) ->> {
				
				@match JudgmentOnValueClass(rhs)
					-| Class(jovs2, body2) ->> {
						
						if (body1 != body2 || jovs1.size() != jovs2.size())
							return JudgmentOnValue::Class(
								JudgmentOnValueClass::Unknown()
								);
						
						ImmutableTreeVector<JudgmentOnValue> jovs;
						for (long k = 0; k < jovs1.size();k++)
							jovs = jovs + mergeJudgments(jovs1[k], jovs2[k]);
						
						return JudgmentOnValue::Class(
							JudgmentOnValueClass::Class(
								jovs, 
								body1
								)
							);
						}
						;
				
				}
			;
		}

	JudgmentOnValue mergeJudgments(const JudgmentOnValueDictionary& lhs, const JudgmentOnValueDictionary& rhs) const
		{
		if (JOV::Dictionary(lhs) == JOV::Dictionary(rhs))
			return JOV::Dictionary(lhs);
		return JOV::Dictionary(JudgmentOnValueDictionary::Unknown());
		}

	@type JOJOVPair = JudgmentOnJOV j1, JudgmentOnJOV j2;

	JudgmentOnValue mergeJudgments(JudgmentOnJOV lhs, JudgmentOnJOV rhs) const
		{
		JOJOVPair p(lhs, rhs);
		
		@match JOJOVPair(p)
			-|	(Known(jov), Known(jov2)) ->> {
				return  (
					jov == jov2 ?
						JOV::JOVAsValue(lhs)
					: 	JOV::JOVAsValue(JudgmentOnJOV::Unknown(mergeJudgments(jov, jov2)))
					);
				}
			-|	(Unknown(jov), Unknown(jov2)) ->> {
				return JOV::JOVAsValue(JudgmentOnJOV::Unknown(mergeJudgments(jov, jov2)));
				}
			-|	(Unknown(jov), Known(jov2)) ->> {
				return JOV::JOVAsValue(JudgmentOnJOV::Unknown(mergeJudgments(jov, jov2)));
				}
			-|	(Known(jov), Unknown(jov2)) ->> {
				return JOV::JOVAsValue(JudgmentOnJOV::Unknown(mergeJudgments(jov, jov2)));
				}
			;
		}

	JudgmentOnValue	mergeJudgments(const JudgmentOnValueMutableVector& lhs, const JudgmentOnValueMutableVector& rhs) const
		{
		JOV jojovOfCovering = mergeJudgments(lhs.elementJudgment(), rhs.elementJudgment());

		return JOV::MutableVector(
			JudgmentOnValueMutableVector(
				jojovOfCovering.getJOVAsValue().jov()
				)
			);
		}


	Nullable<JudgmentOnValue> 	accumulate(const Nullable<JudgmentOnValue>& jov, const JudgmentOnValue& jov2) const
		{
		if (jov)
			return null() << mergeJudgments(*jov, jov2);
		return null() << jov2;
		}
	    
	Nullable<Symbol> mergeNames(Nullable<Symbol> l, Nullable<Symbol> r) const
		{
		if (l == r)
			return l;
		return null();
		}

	JudgmentOnValue		mergeJudgments(JudgmentOnValueTuple lhs, const JudgmentOnValueTuple& rhs) const
		{
		//the elements we have in common we can just use the mergeJudgments function recursively
		uword_t pairwiseElementCount = std::min(lhs.jovs().size(), rhs.jovs().size());
		
		ImmutableTreeVector<JudgmentOnValue> subjovs;
		ImmutableTreeVector<Nullable<Symbol> > subnames;
		
		for (long k = 0; k < pairwiseElementCount; k++)
			{
			subjovs = subjovs + mergeJudgments(lhs.jovs()[k], rhs.jovs()[k]);
			subnames = subnames + mergeNames(lhs.names()[k], rhs.names()[k]);
			}
		
		Nullable<JudgmentOnValue> extraJOV;
		
		if (lhs.extras().isExtras())
			extraJOV = accumulate(extraJOV, lhs.extras().getExtras().jov());
		
		if (rhs.extras().isExtras())
			extraJOV = accumulate(extraJOV, rhs.extras().getExtras().jov());
			
		for (long k = pairwiseElementCount; k < rhs.jovs().size(); k++)
			extraJOV = accumulate(extraJOV, rhs.jovs()[k]);
			
		for (long k = pairwiseElementCount; k < lhs.jovs().size(); k++)
			extraJOV = accumulate(extraJOV, lhs.jovs()[k]);
		
		if (!extraJOV)
			return JOV::Tuple(JOVT(subjovs, subnames, JOVTE::NoExtras()));
			else
			return JOV::Tuple(JOVT(subjovs, subnames, JOVTE::Extras(*extraJOV)));
		}

	JudgmentOnValue	mergeJudgments(JudgmentOnValueUnion in, JOV otherJOV) const
		{
		ImmutableTreeSet<JOV> jovs;

		@match JOV(otherJOV)
			-| Union(((elts))) ->> {
				jovs = elts + in.alternatives().vals();
				}
			-| _ ->> {
				if (in.covers(otherJOV))
					return JOV::Union(in);

				jovs = in.alternatives().vals() + otherJOV;
				}

		return JudgmentOnValue::Union(JudgmentOnResult(jovs).removeExtraneousJudgments());
		}

	JudgmentOnValue	mergeJudgments(const JudgmentOnValueVector& lhs, const JudgmentOnValueVector& rhs) const
		{
		JOV val = JudgmentOnValue::Vector(
			JudgmentOnValueVector(
				lhs.elementsJOR() + rhs.elementsJOR()
				)
			);

		if (vectorDepth(val) > 2)
			return jovAnyVector();

		return val;
		}
};

bool ReasonerFrame::NodeRoot::covers(const NodeRoot& root) const
	{
	return ::covers(jovs(), root.jovs());
	}

ReasonerFrame::NodeRoot ReasonerFrame::NodeRoot::rootUnion(const NodeRoot& root) const
	{
	JudgmentMerger merger;

	ImmutableTreeVector<JOV> newJOVs;

	for (long k = 0; k < jovs().size(); k++)
		{
		JOV newJOV = merger.mergeJudgments(jovs()[k], root.jovs()[k]);

		newJOVs = newJOVs + newJOV;
		}

	return NodeRoot(label(), newJOVs);
	}

bool ReasonerFrame::NodeRoot::isTyped() const
	{
	for (auto jov: jovs())
		if (!jov.type())
			return false;
	return true;
	}

bool ReasonerFrame::NodeRoot::hasNoUnknowns() const
	{
	JudgmentMerger merger;

	for (auto jov: jovs())
		if (merger.classMediatorCount(jov).unknownJudgmentsSeen())
			return false;

	return true;
	}

ReasonerFrame::ReasonerFrame(const ReasonerEntrypoint& entrypoint, SimpleForwardReasoner& reasoner) : 
		mEntrypoint(entrypoint),
		mGraphLoopPoints(entrypoint.graph()),
		mIsRecursive(false),
		mReasoner(reasoner)
	{
	LOG_DEBUG << "Creating new entrypoint " << mEntrypoint;

	NodeRoot root(ControlFlowGraphLabel(), entrypoint.jovs());

	mDirtyNodes.insert(root);

	mNodeRoots.insert(root.label(), root);

	mHash = entrypoint.hash();
	}

hash_type ReasonerFrame::hash() const
	{
	return mHash;
	}

JudgmentOnAction ReasonerFrame::exits() const
	{
	return mExits;
	}

ControlFlowGraph ReasonerFrame::graph() const 
	{
	return mEntrypoint.graph(); 
	}

ImmutableTreeVector<JOV> ReasonerFrame::entryJOVs() const 
	{
	return mEntrypoint.jovs(); 
	}

const MapWithIndex<ReasonerFrame::Node, ReasonerEntrypoint>& 
				ReasonerFrame::getCalledFrames() const
	{
	return mCalledFrames;
	}

void ReasonerFrame::entrypointExitsChanged(const ReasonerEntrypoint& downstreamEntrypoint)
	{
	lassert(mCalledFrames.hasValue(downstreamEntrypoint));
	for (auto node: mCalledFrames.getKeys(downstreamEntrypoint))
		mDirtyNodes.insert(node.root());
	}

void ReasonerFrame::recalculate()
	{
	LOG_DEBUG << "Calculating " << mEntrypoint << " with " 
		<< mPendingRecursiveNodes.size() << " pending and " << mDirtyNodes.size() << " dirty."
		<< (isRecursive() ? "recursive":"not recursive")
		<< ". exits=" << mExits;

	for (auto pending: mPendingRecursiveNodes)
		addRoot(pending);
	mPendingRecursiveNodes.clear();

	while (mDirtyNodes.size())
		{	
		NodeRoot root = *mDirtyNodes.begin();
		mDirtyNodes.erase(root);

		recalculateNodeRoot(root);
		}

	JudgmentOnAction exitJOA;
	for (auto nodeAndExit: mNodeExits)
		exitJOA = exitJOA | nodeAndExit.second;

	JudgmentMerger merger;

	JudgmentOnResult exc = merger.collapseJOR(exitJOA.throwPart());

	if (isRecursive())
		{
		//if the judgment is recursive, we need to collapse it - this is because
		//outgoing judgments are like a loop just like outgoing ones, and could grow
		//overly large if we don't do this
		JudgmentOnResult res = merger.collapseJOR(exitJOA.resultPart());
		
		mExits = JudgmentOnAction(
			res, 
			!mReasoner.allowExceptions() ? JudgmentOnResult() : exc
			);
		}
	else
		mExits = JudgmentOnAction(
			exitJOA.resultPart().removeExtraneousJudgments(), 
			!mReasoner.allowExceptions() ? JudgmentOnResult() : exc
			);
	}

void ReasonerFrame::markRecursive()
	{
	mIsRecursive = true;
	}

bool ReasonerFrame::isRecursive() const
	{
	return mIsRecursive;
	}

void ReasonerFrame::incomingRecursion(ImmutableTreeVector<JOV> entryJOVs)
	{
	mIsRecursive = true;

	//add a node root
	for (auto& nodeRoot: mNodeRoots.getValues(ControlFlowGraphLabel()))
		if (::covers(nodeRoot.jovs(), entryJOVs))
			return;

	mReasoner.markFrameDirty(mEntrypoint);

	LOG_DEBUG << "Frame " << mEntrypoint << " has incoming recursion of " << entryJOVs;

	mPendingRecursiveNodes.insert(NodeRoot(ControlFlowGraphLabel(), entryJOVs));
	}

void ReasonerFrame::addRoot(NodeRoot root)
	{
	//check if any node root covers this
	for (auto existingRoot: mNodeRoots.getValues(root.label()))
		if (existingRoot.covers(root))
			return;

	//see if there's a root we can collapse with that preserves type info
	for (auto existingRoot: mNodeRoots.getValues(root.label()))
		{
		auto candidate = existingRoot.rootUnion(root);
		if (candidate.hasNoUnknowns())
			{
			insertRoot(candidate);
			return;
			}
		}


	//check if we need to add a node root. Currently, we allow up to two typed roots, or one untyped root.
	if (mNodeRoots.getValues(root.label()).size() == 0)
		{
		insertRoot(root);
		return;
		}

	long maxRootCount = (root.label() == ControlFlowGraphLabel() ? 1 : 3);

	bool allAreTyped = true;
	for (auto existingRoot: mNodeRoots.getValues(root.label()))
		if (!existingRoot.hasNoUnknowns())
			allAreTyped = false;

	if (mNodeRoots.getValues(root.label()).size() < maxRootCount && allAreTyped && root.hasNoUnknowns())
		{
		insertRoot(root);
		return;
		}

	NodeRoot newRoot = root;
	for (auto existingRoot: mNodeRoots.getValues(root.label()))
		newRoot = newRoot.rootUnion(existingRoot);

	if (allAreTyped)
		{
		LOGGER_DEBUG_T log = LOGGER_DEBUG;

		log << "Collapsing roots:\n";
		for (auto root: mNodeRoots.getValues(root.label()))
			log << "\t" << prettyPrintStringWithoutWrapping(root) << "\n";
		log << "\t" << prettyPrintStringWithoutWrapping(root) << "\n";
		log << "\n" << "into\n\t" << prettyPrintStringWithoutWrapping(newRoot);
		}

	insertRoot(newRoot);

	lassert(mNodeRoots.getValues(root.label()).size() <= 3);
	}

void ReasonerFrame::insertRoot(ReasonerFrame::NodeRoot newRoot)
	{
	//first, remove any roots this covers
	std::set<NodeRoot> existing = mNodeRoots.getValues(newRoot.label());

	for (auto e: existing)
		if (newRoot.covers(e))
			{
			clearNodeRoot(e);
			mNodeExits.erase(e);
			mNodeRoots.dropValue(e);
			mDirtyNodes.erase(e);
			}

	mNodeRoots.insert(newRoot.label(), newRoot);
	mDirtyNodes.insert(newRoot);

	LOG_DEBUG << "Relaxed JOVS of " << mEntrypoint << " to " << mNodeRoots.getValues(ControlFlowGraphLabel());
	}

const std::set<ReasonerFrame::Node>& ReasonerFrame::unknownApplyNodes() const
	{
	return mUnknownApplyNodes;
	}

void ReasonerFrame::recalculateNodeRoot(ReasonerFrame::NodeRoot root)
	{
	clearNodeRoot(root);
	propagateNode(Node(root));
	}

void ReasonerFrame::clearNodeRoot(ReasonerFrame::NodeRoot root)
	{	
	for (auto node: mNodes.getValues(root))
		{
		mCalledFrames.discard(node);
		mUnknownApplyNodes.erase(node);
		}

	mNodes.dropKey(root);
	mDirtyNodes.erase(root);
	}

void ReasonerFrame::propagateNode(
		const Node& node
		)
	{
	if (mNodes.hasValue(node))
		return;
	mNodes.insert(node.root(), node);

	ControlFlowNodeBody nodeBody = mEntrypoint.graph()[node.label()].body();
	ImmutableTreeVector<JOV> jovs = node.jovs();

	@match ControlFlowNodeBody(nodeBody)
		-| Apply(args, normalCont, exceptionCont) ->> {
			JOVT applyJOVt = getApplyTupleJudgment(args, jovs, null() << nodeBody);

			auto axiom = mReasoner.getAxioms()->axiom(mReasoner.getCompiler(), applyJOVt);
			
			if (!axiom)
				{
				mUnknownApplyNodes.insert(node);
				return;
				}
			else
				mUnknownApplyNodes.erase(node);

			JudgmentOnAction possibleResults;

			mCalledFrames.discard(node);

			@match Axiom(*axiom)
				-| Expands(_, generator) ->> {
					auto cfg = generator(ApplySignature(args));

					ImmutableTreeVector<JOV> childJOVs = 
						mapITV(
							args, 
							[&](ControlFlowApplyArg arg) -> JOV { 
								return getApplyJovJudgment(arg, jovs, null() << nodeBody); 
								}
							);

					ReasonerEntrypoint entrypoint(cfg, childJOVs);

					ReasonerEntrypoint relaxedEntrypoint = mReasoner.getRecursionRelaxationFor(
						mEntrypoint,
						node.label(),
						entrypoint
						);

					mCalledFrames.set(node, relaxedEntrypoint);

					auto subframe = mReasoner.getFrameFor(relaxedEntrypoint);

					if (!subframe)
						return;

					if (relaxedEntrypoint != entrypoint)
						subframe->incomingRecursion(childJOVs);

					possibleResults = subframe->exits();
					}
				-| Native(callSig, result, implementation) ->> {
					if (applyJOVt.computeConstant())
						possibleResults = mReasoner.getAxioms()->resolveAxiomDirectly(mReasoner.getCompiler(), applyJOVt);
					else
						possibleResults = result;
					}

			for (auto normalResult: possibleResults.resultPart().vals())
				followContinuation(node, normalCont, jovs, nodeBody, null() << normalResult);

			if (mReasoner.allowExceptions())
				for (auto exceptionResult: possibleResults.throwPart().vals())
					followContinuation(node, exceptionCont, jovs, nodeBody, null() << exceptionResult);
			}
		-| Cached() ->> {
			return;
			}
		-| Branch(Constant(c), ifTrue, ifFalse) ->> {
			followContinuation(
				node, 
				*JOV::Constant(c).convertToBoolean() ? ifTrue : ifFalse, 
				jovs, 
				nodeBody, 
				null()
				);
			}
		-| Branch(Arg(ix), ifTrue, ifFalse) ->> {
			JOV branchOn = jovs[ix];

			Nullable<bool> which = branchOn.convertToBoolean();
			if (which)
				followContinuation(node, *which ? ifTrue : ifFalse, jovs, nodeBody, null());
			else
				{
				followContinuation(node, ifTrue, jovs, nodeBody, null());
				followContinuation(node, ifFalse, jovs, nodeBody, null());
				}
			}
		-| TupleExpand(argIndex, (arity, exact, contIfMatch), ifNoMatch) ->> {
			JOV jov = jovs[argIndex];

			Nullable<bool> isTuple = jovIsTupleOfArity(jovs[argIndex], arity, exact);

			if (!isTuple || *isTuple)
				followContinuation(node, contIfMatch, jovs, nodeBody, null());
			
			if (!isTuple || !*isTuple)
				followContinuation(node, ifNoMatch, jovs, nodeBody, null());
			}
		-| Switch(Constant(c), branches, otherwise) ->> {
			if (branches.contains(c))
				followContinuation(node, *branches[c], jovs, nodeBody, null());
			else
				followContinuation(node, otherwise, jovs, nodeBody, null());
			}
		-| Switch(Arg(ix), branches, otherwise) ->> {
			JOV switchOn = jovs[ix];

			Nullable<CSTValue> which = switchOn.constant();

			if (which)
				followContinuation(
					node, 
					branches.contains(*which) ? *branches[*which] : otherwise, 
					jovs, 
					nodeBody, 
					null()
					);
			else
				{	
				for (auto branchAndCont: branches)
					followContinuation(
						node, 
						branchAndCont.second, 
						jovs, 
						nodeBody, 
						null()
						);

				followContinuation(node, otherwise, jovs, nodeBody, null());
				}
			}
		-| Jump(c) ->> {
			followContinuation(node, c, jovs, nodeBody, null());
			}
	}

void ReasonerFrame::followContinuation(
				const Node& path,
				const ControlFlowContinuation& continuation, 
				const ImmutableTreeVector<JOV>& jovs,
				const ControlFlowNodeBody& nodeBody,
				const Nullable<JOV>& result
				)
	{
	@match ControlFlowContinuation(continuation)
		-| Node(targetLabel, args) ->> {
			ImmutableTreeVector<JOV> jovsToMerge = getJudgment(args, jovs, result, null() << nodeBody);

			LOG_DEBUG << mEntrypoint.hash() << ": " << path << " with body = " << nodeBody << ", cont= "
				<< continuation 
				<< ", and res=" << result
				<< " -> " << Node(path.root(), ControlFlowGraphLabel(targetLabel), jovsToMerge);

			if (mGraphLoopPoints.shouldCollapseJudgmentsAtNode(null() << targetLabel))
				addRoot(NodeRoot(ControlFlowGraphLabel(targetLabel), jovsToMerge));
			else
				propagateNode(Node(path.root(), ControlFlowGraphLabel(targetLabel), jovsToMerge));
			}
		-| Return(arg, isException) ->> {
			if (isException && !mReasoner.allowExceptions())
				return;
			
			JOV resultJOV = getJudgment(arg, jovs, result, null() << nodeBody);
			
			JudgmentOnAction resJOA = 
				isException ? 
					JudgmentOnAction::Throws(resultJOV) : 
					JudgmentOnAction::Value(resultJOV)
					;

			mNodeExits[path.root()] = mNodeExits[path.root()] | resJOA;
			}
	}

}