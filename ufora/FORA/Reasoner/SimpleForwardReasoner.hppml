#pragma once

#include "../../core/PolymorphicSharedPtr.hpp"
#include "../Axioms/Axioms.hppml"
#include "../ControlFlowGraph/ControlFlowGraph.hppml"
#include "../../core/containers/MapWithIndex.hpp"
#include "../Judgment/JudgmentOnAction.hppml"
#include "ReasonerEntrypoint.hppml"
#include "ReasonerFrame.hppml"
#include "ReasonerEntrypointGraph.hppml"

namespace TypedFora {

class Compiler;

}

namespace Fora {


class SimpleForwardReasoner : public PolymorphicSharedPtrBase<SimpleForwardReasoner> {
public:
	SimpleForwardReasoner(
			PolymorphicSharedPtr<TypedFora::Compiler> inCompiler,
			PolymorphicSharedPtr<Axioms> inAxioms
			);

	PolymorphicSharedPtr<ReasonerFrame> reason(JudgmentOnValueTuple applyTuple);

	PolymorphicSharedPtr<ReasonerFrame> getFrameFor(const ReasonerEntrypoint& entrypoint);

	PolymorphicSharedPtr<Axioms> getAxioms() const;

	TypedFora::Compiler& getCompiler();

	int64_t totalFrameCount() const;

private:
	void updateAll();

	void updateFrame(const ReasonerEntrypoint& entrypoint);

	void checkEntrypointParents(ReasonerEntrypoint entrypoint);

	map<ReasonerEntrypoint, PolymorphicSharedPtr<ReasonerFrame> > mFrames;

	ReasonerEntrypointGraph mGraph;

	PolymorphicSharedPtr<TypedFora::Compiler> mCompiler;

	PolymorphicSharedPtr<Axioms> mAxioms;
};

}
