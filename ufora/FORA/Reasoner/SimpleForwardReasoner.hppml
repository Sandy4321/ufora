/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/

#pragma once

#include "../../core/PolymorphicSharedPtr.hpp"
#include "../Axioms/Axioms.hppml"
#include "../ControlFlowGraph/ControlFlowGraph.hppml"
#include "../../core/containers/MapWithIndex.hpp"
#include "../Judgment/JudgmentOnAction.hppml"
#include "ReasonerEntrypoint.hppml"
#include "ReasonerFrame.hppml"
#include "ReasonerEntrypointGraph.hppml"

namespace TypedFora {

class Compiler;

}

namespace Fora {


class SimpleForwardReasoner : public PolymorphicSharedPtrBase<SimpleForwardReasoner> {
public:
	SimpleForwardReasoner(
			PolymorphicSharedPtr<TypedFora::Compiler> inCompiler,
			PolymorphicSharedPtr<Axioms> inAxioms,
			bool allowExceptions
			);

	PolymorphicSharedPtr<ReasonerFrame> reason(JudgmentOnValueTuple applyTuple);

	PolymorphicSharedPtr<ReasonerFrame> getFrameFor(const ReasonerEntrypoint& entrypoint);

	//determine what actual entrypoint we want to use when 'caller' is calling 'callee' at 'callLocation'
	//if there is no recursion, then this is callLocation. But it might be a stackframe above "caller"
	//if we detect recursion
	ReasonerEntrypoint getRecursionRelaxationFor(
							const ReasonerEntrypoint& caller,
							Nullable<std::string> callLocation,
							const ReasonerEntrypoint& callee
							);

	void markFrameDirty(const ReasonerEntrypoint& caller);

	PolymorphicSharedPtr<Axioms> getAxioms() const;

	TypedFora::Compiler& getCompiler();

	int64_t totalFrameCount() const;

	bool allowExceptions() const;
	
private:
	bool mAllowExceptions;

	void updateAll();

	void updateFrame(const ReasonerEntrypoint& entrypoint);

	bool isRecursive(ReasonerEntrypoint entrypoint);
	
	map<ReasonerEntrypoint, PolymorphicSharedPtr<ReasonerFrame> > mFrames;

	ReasonerEntrypointGraph mGraph;

	PolymorphicSharedPtr<TypedFora::Compiler> mCompiler;

	PolymorphicSharedPtr<Axioms> mAxioms;
};

}
