/***************************************************************************
	Copyright 2015 Ufora Inc.

	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

		http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
****************************************************************************/

#pragma once

#include "JudgmentBundle.hppml"
#include "../ControlFlowGraph/ControlFlowGraph.hppml"

namespace Fora {

@type JudgmentBundleScope = int64_t filterCount, int64_t selectorCount {
public:
	Fora::FilterVariable newFilterVariable();

	Fora::SelectorVariable newSelectorVariable();

	JudgmentBundle filtered(JudgmentOnValue ifFalse, JudgmentBundle ifTrue);

	JudgmentBundle canonicalBundle(JudgmentOnValueAtom atom);

	JudgmentBundle canonicalBundle(JudgmentOnValue jov);

	JudgmentBundleTupleExtras canonicalBundle(JudgmentOnValueTupleExtras extras);

	JudgmentBundleTuple canonicalBundle(JudgmentOnValueTuple jov);

	ImmutableTreeVector<JudgmentBundle> canonicalBundle(ImmutableTreeVector<JudgmentOnValue> jov);

	JOV judgmentForTupleIndex(JOV c, long index);

	JudgmentBundle judgmentBundleForTupleIndex(JudgmentBundle toExpand, long index);

	JudgmentBundle judgmentBundleForControlFlowArg(
						const ControlFlowArg& arg,
						const ImmutableTreeVector<JudgmentBundle>& jmts
						);

	ImmutableTreeVector<JudgmentBundle> judgmentBundleForControlFlowArgs(
						const ImmutableTreeVector<ControlFlowArg>& args,
						const ImmutableTreeVector<JudgmentBundle>& jmts
						);

	JudgmentBundle judgmentBundleForControlFlowContinuationArg(
						const ControlFlowContinuationArg& arg,
						const ImmutableTreeVector<JudgmentBundle>& jmts,
						const Nullable<JudgmentBundle>& result,
						const Nullable<ControlFlowNodeBody>& node
						);

	JudgmentBundleTuple judgmentBundleForControlFlowContinuationTupleArg(
						const ControlFlowContinuationTupleArg& arg, 
						const ImmutableTreeVector<JudgmentBundle>& jmts,
						const Nullable<JudgmentBundle>& result,
						const Nullable<ControlFlowNodeBody>& node
						);

	ImmutableTreeVector<JudgmentBundle> judgmentBundleForControlFlowContinuationArgs(
						const ImmutableTreeVector<ControlFlowContinuationArg>& arg,
						const ImmutableTreeVector<JudgmentBundle>& jmts,
						const Nullable<JudgmentBundle>& result,
						const Nullable<ControlFlowNodeBody>& node
						);

	JudgmentBundleTuple judgmentBundleForControlFlowApplyArg(
						const ControlFlowApplyArg& arg, 
						const ImmutableTreeVector<JudgmentBundle>& jmts,
						const Nullable<ControlFlowNodeBody>& node
						);

	JudgmentBundleTuple judgmentBundleForControlFlowApplyArgs(
						const ImmutableTreeVector<ControlFlowApplyArg>& arg, 
						const ImmutableTreeVector<JudgmentBundle>& jmts,
						const Nullable<ControlFlowNodeBody>& node
						);
};

}
