/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "../core/Common.hppml"
#include "../core/PolymorphicSharedPtr.hpp"
#include <boost/thread.hpp>
#include "Primitives/CodeLocation.hppml"
#include "Interpreter/InstructionPtr.hpp"

using namespace std;

class Axioms;
class Runtime;
class MemSlab;

namespace TypedFora {
class Compiler;
}

template<int count>
class NativeRuntimeContinuationValue;

class NativeRuntimeContinuationBase;

class NativeRuntimeContinuationValueVector;

class RuntimeConfig;
class RuntimeComputationOutputs;
class MemBlock;
class JudgmentOnValue;
class CSTValue;
class Type;
class ImplVal;
class ImplValContainer;

template<class T>
class ImmutableTreeVector;

template<class T>
class Nullable;


namespace Fora {
namespace Compiler {

class InterpreterTraceHandler;

namespace CompilerInstructionGraph {

class InstructionGraph;

}

}
}

namespace Fora {
namespace Interpreter {

class EvalFrame;
class AxiomCache;
class ExecutionContext;
class InterpreterFrame;
class InstructionGraph;
class Instruction;
class CallFrame;

}
}

class Runtime {
private:
	Runtime(
		string inAxiomsString,
		const RuntimeConfig& inConfig
		);
public:
	static Runtime& getRuntime(void);
	
	static void initializeRuntime(
					string inAxiomsString,
					const RuntimeConfig& inConfig
					);
	
	PolymorphicSharedPtr<Fora::Interpreter::InstructionGraph> getInstructionGraph();
	
	PolymorphicSharedPtr<Fora::Compiler::CompilerInstructionGraph::InstructionGraph> getCompilerInstructionGraph();

	PolymorphicSharedPtr<Fora::Compiler::InterpreterTraceHandler> getInterpreterTraceHandler();
	
	PolymorphicSharedPtr<Axioms> getAxioms(void);

	PolymorphicSharedPtr<TypedFora::Compiler> getTypedForaCompiler(void) const;

	Fora::Interpreter::AxiomCache* getAxiomCache(void);
	
	RuntimeConfig& getConfig(void);

private:
	void ensureMembersInitialized_();

	boost::shared_ptr<RuntimeConfig> mConfig;

	PolymorphicSharedPtr<Fora::Interpreter::InstructionGraph> mInstructionGraph;

	PolymorphicSharedPtr<Fora::Compiler::CompilerInstructionGraph::InstructionGraph> mCompilerInstructionGraph;

	PolymorphicSharedPtr<Fora::Compiler::InterpreterTraceHandler> mInterpreterTraceHandler;
	
	PolymorphicSharedPtr<Axioms> mAxioms;

	uword_t mTracing;

	bool mInterpreterCheck;

	PolymorphicSharedPtr<TypedFora::Compiler> mTypedForaCompiler;

	boost::recursive_mutex mMutex;

	Fora::Interpreter::AxiomCache* mAxiomCache;
};


