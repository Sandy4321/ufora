/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "../../core/containers/HistoryCounter.hppml"
#include "Instruction.hppml"
#include "InterpreterHistory.hppml"
#include "../Compiler/InterpreterTraceTerm.hppml"
#include "../Compiler/InterpreterTraceHandler.hppml"
#include "../Compiler/InterpreterTraceVisitor.hppml"

class JudgmentOnValue;

namespace Fora {
namespace Interpreter {

class Instruction;

class ExecutionContextConfiguration;

//keeps track of the history of a given thread's events within
//the interpreter. There is one of these for each ExecutionContext.

class InterpreterHistoryImpl {
public:
	InterpreterHistoryImpl(boost::shared_ptr<ExecutionContextConfiguration> inConfig);

	void clear();

	void pause();

	void resume();

	bool isTracing() const;

	double timeOfLastTraceEvent();

	void onInterpreterStep(EvalFrame* inInstruction);

	void onInterpreterInterrupted(EvalFrame* inInstruction);

	void onInterpreterInterruptedForVectorLoad(EvalFrame* inInstruction);

	void onFollowingTypedNativeContinuation(
					const NativeRuntimeContinuationValue<1>& continuation, 
					const JudgmentOnValue& resultJOV,
					bool isException
					);

	void onFollowingTypedNativeContinuation(
					const NativeRuntimeContinuationBase& continuation, 
					const JudgmentOnValue& resultJOV,
					bool isException
					);

	void onTransferToNativeCode(EvalFrame* inEvalFrame,
								const TypedFora::TypedJumpTarget& inTarget
								);

	void onArbitraryInterpreterLogging(std::string msg);

	void onTransferToInterpreterFromNativeCode(const NativeRuntimeContinuationBase& continuation);

	void onReturnToNativeCodeButImmediatelyTransferToInterpreter();

	void continuationAdapterFollowed(bool isException, TypedFora::Type type, bool isTargetNative);

	void onInterpreterResumedWithValue(EvalFrame* inEvalFrame, bool isException);

	void onInterpreterResumedWithoutValue(EvalFrame* inEvalFrame);

	void onAxiomResult(EvalFrame* inEvalFrame, bool isException);

	void onNewStackframe(EvalFrame* inEvalFrame);

	void onReturnedToInterpreter(EvalFrame* inEvalFrame, bool isException);

	void onCachecall();

	void onBranch(EvalFrame* inEvalFrame, long whichBranch);

	Nullable<size_t> hasTrippedLoopTrigger(size_t minExpectedCycles);
	
	void setExternalTraceHandler(boost::function1<void, const Fora::InterpreterTraceTerm&> handler);

	boost::function1<void, const Fora::InterpreterTraceTerm&> getExternalTraceHandler();
	
private:
	boost::shared_ptr<ExecutionContextConfiguration> mConfig;

	bool shouldCollectInterpreterTraces() const;

	HistoryCounter<Instruction*> mHistory100, mHistory1000, mHistory10000, mHistory100000;

	boost::function1<void, const Fora::InterpreterTraceTerm&> mExternalTraceHandler;

	void collectInterpreterTrace(const Fora::InterpreterTraceTerm& term);

	Fora::InterpreterTraceTerm getInitializeInterpreterTrace(EvalFrame* evalFramePtr);

	Fora::InterpreterTraceTerm getInitializeInterpreterTrace(EvalFrame* evalFramePtr, bool resultIsException);

	void askTraceHandlerWhetherToCollect(EvalFrame* inFrame);

	long mCurrentTraceStackDepth;

	bool mJustTransferredFromMachineCode;

	Fora::Compiler::InterpreterTraceHandler* mInterpreterTraceHandler;

	boost::shared_ptr<Fora::Compiler::InterpreterTraceVisitor> mTraceCollector;

	bool mHasSentInitializeTraceToExternalHandler;

	bool mIsReturningToInterpreter;

	bool mWasInterpreterInterrupted;
};


}
}
