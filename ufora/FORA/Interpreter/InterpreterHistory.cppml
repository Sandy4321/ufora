/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#include "InterpreterHistory.hppml"
#include "InterpreterHistoryImpl.hppml"

namespace Fora {
namespace Interpreter {
	
InterpreterHistory::InterpreterHistory(boost::shared_ptr<ExecutionContextConfiguration> inConfig) : 
		mImpl(new InterpreterHistoryImpl(inConfig))
	{
	}

bool InterpreterHistory::isTracing() const
	{
	return mImpl->isTracing();
	}

double InterpreterHistory::timeOfLastTraceEvent()
	{
	return mImpl->timeOfLastTraceEvent();
	}

void InterpreterHistory::clear()
	{
	mImpl->clear();
	}

void InterpreterHistory::pause()
	{
	mImpl->pause();
	}

void InterpreterHistory::resume()
	{
	mImpl->resume();
	}

void InterpreterHistory::onInterpreterStep(EvalFrame* inFrame)
	{
	mImpl->onInterpreterStep(inFrame);
	}

void InterpreterHistory::onInterpreterInterrupted(EvalFrame* inFrame)
	{
	mImpl->onInterpreterInterrupted(inFrame);
	}

void InterpreterHistory::onInterpreterInterruptedForVectorLoad(EvalFrame* inFrame)
	{
	mImpl->onInterpreterInterruptedForVectorLoad(inFrame);
	}

void InterpreterHistory::onTransferToInterpreterFromNativeCode(const NativeRuntimeContinuationBase& continuation)
	{
	mImpl->onTransferToInterpreterFromNativeCode(continuation);
	}

void InterpreterHistory::onInterpreterResumedWithValue(EvalFrame* inEvalFrame, bool isException)
	{
	mImpl->onInterpreterResumedWithValue(inEvalFrame, isException);
	}

void InterpreterHistory::onInterpreterResumedWithoutValue(EvalFrame* inEvalFrame)
	{
	mImpl->onInterpreterResumedWithoutValue(inEvalFrame);
	}

void InterpreterHistory::onArbitraryInterpreterLogging(std::string msg)
	{
	mImpl->onArbitraryInterpreterLogging(msg);
	}

Nullable<size_t> InterpreterHistory::hasTrippedLoopTrigger(size_t minExpectedCycles)
	{
	return mImpl->hasTrippedLoopTrigger(minExpectedCycles);
	}

void InterpreterHistory::onFollowingTypedNativeContinuation(
				const NativeRuntimeContinuationValue<1>& continuation,
				const JOV& inResultJOV,
				bool isException
				)
	{
	mImpl->onFollowingTypedNativeContinuation(continuation, inResultJOV, isException);
	}

void InterpreterHistory::continuationAdapterFollowed(bool isException, TypedFora::Type type, bool isTargetNative)
	{
	mImpl->continuationAdapterFollowed(isException, type, isTargetNative);
	}

void InterpreterHistory::onReturnToNativeCodeButImmediatelyTransferToInterpreter()
	{
	mImpl->onReturnToNativeCodeButImmediatelyTransferToInterpreter();
	}

void InterpreterHistory::onTransferToNativeCode(EvalFrame* inEvalFrame,
												const TypedFora::TypedJumpTarget& inTarget
												)
	{
	mImpl->onTransferToNativeCode(inEvalFrame, inTarget);
	}

void InterpreterHistory::onAxiomResult(EvalFrame* inEvalFrame, bool isException)
	{
	mImpl->onAxiomResult(inEvalFrame, isException);
	}

void InterpreterHistory::onNewStackframe(EvalFrame* inEvalFrame)
	{
	mImpl->onNewStackframe(inEvalFrame);
	}

void InterpreterHistory::onReturnedToInterpreter(EvalFrame* inEvalFrame, bool isException)
	{
	mImpl->onReturnedToInterpreter(inEvalFrame, isException);
	}

void InterpreterHistory::onBranch(EvalFrame* inEvalFrame, long whichBranch)
	{
	mImpl->onBranch(inEvalFrame, whichBranch);
	}

void InterpreterHistory::onCachecall()
	{
	mImpl->onCachecall();
	}

void InterpreterHistory::setExternalTraceHandler(
							boost::function1<void, const Fora::InterpreterTraceTerm&> handler
							)
	{
	mImpl->setExternalTraceHandler(handler);
	}

boost::function1<void, const Fora::InterpreterTraceTerm&> 
					InterpreterHistory::getExternalTraceHandler()
	{
	return mImpl->getExternalTraceHandler();
	}

}
}

