/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
`test t1: ( 
    let it2 = timeseries.iteratorToTimeseries.iteratorToTimeseries(
                    firstVal: (x:1, t:0.0), secondVal: nothing, iterator: nothing
                    );
    try { it2.sample(-1.0); false } catch(...) { true } and 
    it2.sample(0.0) is 1 and 
    it2.sample(10.0) is 1 and 
    it2.nextSample is nothing
);

`test t2: (
    let it1 = timeseries.fromIterator([(x:1, t:0.0), (x:2, t:1.0), (x:3, t:2.0)]`(`Iter));
    
    it1(.5) is 1 and 
    it1(1.5) is 2 and 
    it1(2.5) is 3 and
    it1.nextSample is not nothing and 
    it1.nextSample.nextSample is not nothing and 
    it1.nextSample.nextSample.nextSample is nothing
);

`test t3: (
    let it1 = timeseries.iteratorToTimeseries.iteratorToTimeseries([(x:1, t:0.0)]`(`Iter));
    
    it1(.5) is 1 and 
    it1(1.5) is 1 and 
    it1(2.5) is 1
    );

`test simpletest: (
    let baseTimeseries = timeseries.fromVector(
                            [(x: 1.0, t:0.0), (x: 0.0, t:1000.0), (x: 2.0, t: 1020.0)]
                            );
    let emaTimeseries = timeseries.ema(.1)(baseTimeseries);		
    let samples = fun(start, stop, step) {
        while (start < stop) {
            yield start;
            start = start + step
            }
        };
        
    [x for x in timeseries.sample(emaTimeseries, samples(0.0, 2000.0, .001))];
    
    return true
    );

//at the time of writing, this took about 6 seconds to compile and and .25 to run.
`test pairtest: (
    let ct = 1000000;
    let ts1 = timeseries.ema(0.0 + 2.0)(
                    timeseries.fromVector(
                        [(t: ix / 1.0, x: (ix % 100) / 100.0) for ix in sequence(ct)]
                        )
                    );
    let ts2 = timeseries.ema(0.0 + 4.0)(
                    timeseries.fromVector(
                        [(t: ix / 1.0, x: (ix % 100) / 100.0) for ix in sequence(ct)]
                        )
                    );
    let pairTimeseries = timeseries.pairwise(ts1, ts2, fun(x,y) { (x - y) } );

    [x for x in timeseries.sample(pairTimeseries)];
    
    return true
    );

//at the time of writing, this took about 1.6 seconds to compile and and .08 to run.
`test ematest: (
    let ct = 1000000;
    let ts1 = timeseries.ema(0.0 + 2.0)(
                    timeseries.fromVector(
                        [(t: ix / 1.0, x: (ix % 100) / 100.0) for ix in sequence(ct)]
                        )
                    );
    
    [x for x in timeseries.sample(ts1)];
    
    true;
    );
