/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/

total_reads: 1000000000;

block: fun(outer, inner) {
	Vector.range(outer, fun(o) { Vector.range(inner, fun(i) { 1 }) })
	};

read: fun(cols) { 
	let mb = 128
	let cols = 20
	let rows = 128 * 1024 * 1024 / cols
	let data = block(cols, rows)
	let passes = total_reads / cols / rows;

	fun() {
		let res = 0

		let passIx = 0;
		while (passIx < passes) {
			let ix1 = 0
			while (ix1 < rows) {
				let ix2 = 0
				while (ix2 < cols) {
					res = res + data[ix2][ix1]

					ix2 = ix2 + 1
					};

				ix1 = ix1 + 1
				}
			passIx = passIx + 1
			}

		return res == passes * cols * rows
		}
	};

(`perf, `callResult) read_1bb_column_major_values_20_columns: read(20);
(`perf, `callResult) read_1bb_column_major_values_100_columns: read(100);
(`perf, `callResult) read_1bb_column_major_values_400_columns: read(400);


block_with_tuple: fun(outer, inner) {
	Vector.range(outer, fun(o) { (o, Vector.range(inner, fun(i) { 1 })) })
	};

read_with_tuple: fun(cols) { 
	let mb = 128
	let cols = 20
	let rows = 128 * 1024 * 1024 / cols
	let data = block_with_tuple(cols, rows)
	let passes = total_reads / cols / rows;

	fun() {
		let res = 0

		let passIx = 0;
		while (passIx < passes) {
			let ix1 = 0
			while (ix1 < rows) {
				let ix2 = 0
				while (ix2 < cols) {
					res = res + data[ix2][1][ix1]

					ix2 = ix2 + 1
					};

				ix1 = ix1 + 1
				}
			passIx = passIx + 1
			}

		return res == passes * cols * rows
		}
	};

(`perf, `callResult) read_1bb_column_major_values_20_columns_with_tuple: read_with_tuple(20);

//`test read_1bb_column_major_values_20_columns_with_tuple: read_with_tuple(20)();

