/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "NativeStackFrameWrapper.hppml"

namespace Fora {
namespace Interpreter {

class EvalFrame;

}
}

class NativeCppCallbackStackframe;

namespace TypedFora {

namespace Abi {

class ResultSignatureAdapterFrame;

class InterpreterUniqueIdHolderFrame;

class LiveValue;

/***************
StackFrameVisitor

base class for arbitrary visitors passed to a StackFrameWalker.
***************/

class StackFrameVisitor {
public:
	virtual ~StackFrameVisitor() {};

	virtual bool visitFreeValue(ImplVal& value, bool isOwned) = 0;

	virtual bool visitFreeValue(const ::Type& type, void* data, bool isOwned) = 0;

	virtual bool visitFreeValue(ImplValContainer& ioContainer) = 0;

	//all visit functions must return true if they wish to continue consuming events
	virtual bool visitNativeStackFrame(
					NativeStackFrameWrapper& stackFrame
					) = 0;

	virtual bool visitInterpreterStackFrame(
					Fora::Interpreter::EvalFrame* stackFrame
					) = 0;

	virtual bool visitResultSignatureAdapterStackFrame(
					ResultSignatureAdapterFrame* stackFrame
					) = 0;

	virtual bool visitHeldImplvalTeardownFrame(
					InterpreterUniqueIdHolderFrame* stackFrame
					) = 0;

	virtual bool visitCppCallbackFrame(
					NativeCppCallbackStackframe* cppCallbackFrame
					) = 0;

};

/***********
StackFrameWalker

Walks over a live FORA stack frame, passing information to a visitor
************/

class StackFrameWalker {
public:
	static NativeRuntimeContinuationBase visitStackFrame(
		NativeRuntimeContinuationBase stackFramePtr,
		StackFrameVisitor& ioVisitor
		);

};


}
}
