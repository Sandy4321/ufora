/***************************************************************************
   Copyright 2015 Ufora Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
****************************************************************************/
#pragma once

#include "HomogenousNoncontiguousDoubleVectorStash.hppml"
#include "../../Native/NativeTypeFor.hpp"
#include "../../Native/NativeTypeForCppml.hpp"
#include "../../Native/TypedNativeLibraryFunction.hpp"
#include "VectorRecordCodegen.hppml"
#include "VectorLoadRequestCodegen.hppml"

class HomogenousNoncontiguousDoubleVectorStashSpecialType {};

template<>
class NativeTypeForImpl<HomogenousNoncontiguousDoubleVectorStashSpecialType> {
public:
	static NativeType get(void)
		{
		return NativeType::Composite("HomogenousNoncontiguousDoubleVectorStashSpecialType", NativeTypeFor<uint8_t>::get());
		}
};

template<>
class NativeTypeForImpl<TypedFora::Abi::HomogenousNoncontiguousDoubleVectorStash> {
public:
	static NativeType get(void)
		{
		return NativeType::Composite(
			emptyTreeVec() + 
				NativeTypeFor<int64_t>::get() + 
				NativeTypeFor<int64_t>::get() + 
				NativeTypeFor<pair<int64_t, int64_t>* >::get() + 
				NativeTypeFor<pair<HomogenousNoncontiguousDoubleVectorStashSpecialType*, int64_t>* >::get() + 
				NativeTypeFor<void*>::get()
			);
		}
};

template<>
class TypedNativeExpressionBehaviors<TypedFora::Abi::HomogenousNoncontiguousDoubleVectorStash> {
public:
	TypedNativeExpressionBehaviors(NativeExpression e) : mThis(e)
		{
		}

	TypedNativeExpression<TypedFora::Abi::HomogenousNoncontiguousDoubleVectorStash> self() const
		{
		return TypedNativeExpression<TypedFora::Abi::HomogenousNoncontiguousDoubleVectorStash>(mThis);
		}

	TypedNativeExpression<bool> dim1IsOutOfBounds() const
		{
		return offsetStop1() < offsetStart1() && offsetStart1() == TypedNativeExpression<int64_t>(1);
		}

	TypedNativeExpression<bool> dim2IsOutOfBounds() const
		{
		return offsetStop1() < offsetStart1() && offsetStart1() == TypedNativeExpression<int64_t>(2);
		}

	TypedNativeExpression<bool> needsVectorLoad() const
		{
		return offsetStop1() == offsetStart1();
		}

	TypedNativeExpression<int64_t> offsetStart1() const
		{
		return TypedNativeExpression<int64_t>(mThis[0]);
		}

	TypedNativeExpression<int64_t> offsetStop1() const
		{
		return TypedNativeExpression<int64_t>(mThis[1]);
		}

	TypedNativeExpression<pair<int64_t, int64_t>* > validRangeTable() const
		{
		return TypedNativeExpression<pair<int64_t, int64_t>* >(mThis[2]);
		}

	TypedNativeExpression<pair<uint8_t*, int64_t>* > pointerTable() const
		{
		return TypedNativeExpression<pair<HomogenousNoncontiguousDoubleVectorStashSpecialType*, int64_t>* >(mThis[3])
			.cast<pair<uint8_t*, int64_t>* >();
		}

	TypedNativeExpression<bool> offsetPairIsValid(TypedNativeExpression<int64_t> offset1, TypedNativeExpression<int64_t> offset2) const
		{
		using namespace TypedNativeExpressionHelpers;
		
		TypedNativeVariable<pair<int64_t, int64_t> > validRange;

		return if_(offset1 < this->offsetStart1() || offset1 >= this->offsetStop1(),
			TypedNativeExpression<bool>(false),
			let(validRange, 
				validRangeTable()[offset1],
				offset2 >= validRange.first() && offset2 < validRange.second()
				)
			);
		}

	//compute &x[i1][i2]...[in] - &x for a 'x' of type 'compositeType' and 'i1..in' = indices
	static int64_t computeOffsetOfIndicesWithinType(ImmutableTreeVector<uword_t> indices, NativeType compositeType)
		{
		int64_t offset = 0;

		for (auto ix: indices)
			{
			@match NativeType(compositeType)
				-| Composite(subtypes) ->> {
					lassert(ix >= 0 && ix < subtypes.size());

					for (long k = 0; k < ix; k++)
						offset += subtypes[k].packedSize();

					compositeType = subtypes[ix];
					}
			}

		return offset;
		}

	TypedNativeExpression<TypedFora::Abi::HomogenousNoncontiguousDoubleVectorStash> updatedStash(
								TypedNativeExpression<TypedFora::Abi::VectorRecord> vecExpr,
								TypedNativeExpression<int64_t> offset1,
								TypedNativeExpression<int64_t> offset2,
								TypedNativeExpression<void> ifOutOfBoundsExpr1,
								TypedNativeExpression<void> ifOutOfBoundsExpr2,
								ImmutableTreeVector<uword_t> indicesWithinExpr1,
								NativeType typeOfExpr1
								)
		{
		using namespace TypedNativeExpressionHelpers;

		TypedNativeVariable<TypedFora::Abi::HomogenousNoncontiguousDoubleVectorStash> newStash, newStashWithoutLoadCheck;

		int64_t offsetWithinExpr1 = computeOffsetOfIndicesWithinType(indicesWithinExpr1, typeOfExpr1);

		return 
			if_(offsetPairIsValid(offset1, offset2),
				self(),
				let(newStashWithoutLoadCheck,
					let(newStash,
						makeTypedNativeLibraryFunction(&TypedFora::Abi::HomogenousNoncontiguousDoubleVectorStash::updateStash)(
							TypedNativeExpression<TypedFora::Abi::HomogenousNoncontiguousDoubleVectorStash>(mThis),
							TypedNativeExpression<TypedFora::Abi::PooledVectorRecord>(vecExpr.getExpression()), 
							offset1,
							offset2,
							TypedNativeExpression<int64_t>(offsetWithinExpr1)
							),
						if_(newStash.needsVectorLoad(),
							TypedNativeExpression<TypedFora::Abi::HomogenousNoncontiguousDoubleVectorStash>(
								makeTypedNativeLibraryFunction(&TypedFora::Abi::HomogenousNoncontiguousDoubleVectorStash::getLoadRequest)(
									vecExpr,
									offset1,
									offset2,
									TypedNativeExpression<int64_t>(offsetWithinExpr1)
									).loadCheck().getExpression()
								),
							newStash
							)
						).wrapInEmptyCFGLayer(),
					if_(newStashWithoutLoadCheck.dim1IsOutOfBounds(),
						TypedNativeExpression<TypedFora::Abi::HomogenousNoncontiguousDoubleVectorStash>(
							ifOutOfBoundsExpr1.getExpression()
							),
						if_(newStashWithoutLoadCheck.dim2IsOutOfBounds(),
							TypedNativeExpression<TypedFora::Abi::HomogenousNoncontiguousDoubleVectorStash>(
								ifOutOfBoundsExpr2.getExpression()
								),
							newStashWithoutLoadCheck
							)
						)
					),
				//almost always, we will just get 'self'
				.999999
				)
			.taggedWith(
				NativeExpressionTag::HomogenousDoubleVectorStashCheck(
					vecExpr.getExpression(),
					mThis,
					offset1.getExpression(),
					offset2.getExpression(),
					offsetWithinExpr1
					)
				);
		}

	TypedNativeExpression<uint8_t*> getStashedOffset(
				TypedNativeExpression<int64_t> offset1,
				TypedNativeExpression<int64_t> offset2
				) const
		{
		using namespace TypedNativeExpressionHelpers;

		TypedNativeVariable<pair<uint8_t*, int64_t> > lookup;

		return let(
			lookup, 
			this->pointerTable()[offset1],
			lookup.first() + lookup.second() * offset2
			);
		}

private:
	NativeExpression mThis;
};

