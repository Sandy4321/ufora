/***************************************************************************
    Copyright 2015 Ufora Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
****************************************************************************/

#include "HomogenousDoubleVectorStashRecord.hppml"
#include "ForaValueArraySlice.hppml"
#include "VectorHandle.hpp"
#include "../../../core/Logging.hpp"
#include "../../../core/Clock.hpp"


namespace TypedFora {
namespace Abi {

HomogenousDoubleVectorStashRecord::HomogenousDoubleVectorStashRecord(
                                        MemoryPool* inPool,
                                        const VectorRecord& vector,
                                        int64_t offsetWithinFirstVector
                                        ) :
        mPool(inPool),
        mPointers(nullptr),
        mValidRanges(nullptr),
        mVector(vector),
        mOffsetWithinFirstVector(offsetWithinFirstVector),
        mTransposedArray(nullptr),
        mTransposedArrayInUse(0),
        mOrigPointers(0)
    {
    mStash.stashRecord() = this;
    }

HomogenousDoubleVectorStashRecord::~HomogenousDoubleVectorStashRecord()
    {
    if (mPointers)
        mPool->free((uint8_t*)mPointers);
    if (mValidRanges)
        mPool->free((uint8_t*)mValidRanges);
    if (mTransposedArray)
        mPool->free((uint8_t*)mTransposedArray);
    if (mOrigPointers)
        mPool->free((uint8_t*)mOrigPointers);
    }

namespace {

// Xdim, Ydim are the dimensions of the *in array. 
// (x0,y0) and (X_block_size, Y_block_size) define the sub-array to be transposed.
void cacheObliviousTranspose(pair<uint8_t*, int64_t>* in, pair<uint8_t*, int64_t>* out, int64_t x0, int64_t y0, int64_t X_block_size, int64_t Y_block_size)
    {
    // Controls performance. It should be set as low as possible without losing 
    // too much performance from excessive recursive decomposition.
    constexpr int64_t BLOCK_SIZE_LIMIT = 64; 
    if (X_block_size <= BLOCK_SIZE_LIMIT  &&  Y_block_size <= BLOCK_SIZE_LIMIT)
        {
        for (int64_t x = x0; x < x0+X_block_size; ++x)
            for (int64_t y = y0; y < y0+Y_block_size; ++y)
                {
                ((int64_t*)(out[x].first + out[x].second * y))[0] = 
                    ((int64_t*)(in[x].first + in[x].second * y))[0];
                }
        }
    else if (X_block_size > BLOCK_SIZE_LIMIT  &&  Y_block_size > BLOCK_SIZE_LIMIT)
        { // split in both directions
        int64_t xMid = X_block_size / 2;
        int64_t yMid = Y_block_size / 2;
        cacheObliviousTranspose(in, out, x0, y0, xMid, yMid);
        cacheObliviousTranspose(in, out, x0+xMid, y0, X_block_size-xMid, yMid);
        cacheObliviousTranspose(in, out, x0, y0+yMid, xMid, Y_block_size-yMid);
        cacheObliviousTranspose(in, out, x0+xMid, y0+yMid, X_block_size-xMid, Y_block_size-yMid);
        }
    else if (X_block_size > BLOCK_SIZE_LIMIT)
        { // split along X-axis
        int64_t xMid = X_block_size / 2;
        cacheObliviousTranspose(in, out, x0, y0, xMid, Y_block_size);
        cacheObliviousTranspose(in, out, x0+xMid, y0, X_block_size-xMid, Y_block_size);
        }
    else // Y_block_size > BLOCK_SIZE_LIMIT
        { // split along Y-axis
        int64_t yMid = Y_block_size / 2;
        cacheObliviousTranspose(in, out, x0, y0, X_block_size, yMid);
        cacheObliviousTranspose(in, out, x0, y0+yMid, X_block_size, Y_block_size-yMid);
        }

    }

}

void HomogenousDoubleVectorStashRecord::updateStashForOffsets(int64_t offset1, int64_t offset2)
    {
    if (offset1 >= mStash.offset1Start() && offset1 < mStash.offset1Stop() && 
            offset2 >= mStash.offset2Start() && offset2 < mStash.offset2Stop())
        return;

    int64_t vectorSize = mVector.size();

    if (!mPointers)
        {
        mPointers = (std::pair<uint8_t*, int64_t>*)mPool->allocate(sizeof(std::pair<uint8_t*, int64_t>) * vectorSize * 2);
        mValidRanges = (std::pair<int64_t, int64_t>*)mPool->allocate(sizeof(std::pair<int64_t, int64_t>) * vectorSize * 2);

        for (long k = 0; k < vectorSize * 2; k++)
            {
            mPointers[k] = std::pair<uint8_t*, int64_t>();
            mValidRanges[k] = std::pair<int64_t, int64_t>();
            }

        mStash.pointerAndStrideTable() = mPointers + vectorSize;
        }

    if (mTransposedArrayInUse)
        {
        mTransposedArrayInUse = false;
        std::swap(mPointers, mOrigPointers);
        mStash.offset2Start() = mOrigValidRange2.first;
        mStash.offset2Stop() = mOrigValidRange2.second;
        }

    pair<int64_t, int64_t> validDim2 = mValidRanges[offset1 + vectorSize];

    if (offset2 < validDim2.first || offset2 >= validDim2.second)
        {
        mapColumn(offset1, offset2);
        validDim2 = mValidRanges[offset1 + vectorSize];
        }

    //now update the stash to take into account what we have at 'mPointers' and 'mValidRanges'
    if (offset1 == mStash.offset1Stop() && offset2 >= mStash.offset2Start() && offset2 < mStash.offset2Stop())
        {
        mStash.offset1Stop()++;
        mStash.offset2Start() = std::max<int64_t>(mStash.offset2Start(), validDim2.first);
        mStash.offset2Stop() = std::min<int64_t>(mStash.offset2Stop(), validDim2.second);
        }
        else
    if (offset1 + 1 == mStash.offset1Start() && offset2 >= mStash.offset2Start() && offset2 <= mStash.offset2Stop())
        {
        mStash.offset1Start()--;
        mStash.offset2Start() = std::max<int64_t>(mStash.offset2Start(), validDim2.first);
        mStash.offset2Stop() = std::min<int64_t>(mStash.offset2Stop(), validDim2.second);
        }
        else
        {
        mStash.offset1Start() = offset1;
        mStash.offset1Stop() = offset1+1;
        mStash.offset2Start() = validDim2.first;
        mStash.offset2Stop() = validDim2.second;
        }

    if (mStash.offset1Start() == 0 && mStash.offset1Stop() == vectorSize && mObjectSizeWithinSecondVector == sizeof(int64_t) && vectorSize <= 512)
        {
        constexpr int64_t maxTransposeRows = 128;

        if (!mTransposedArray)
            {
            mTransposedArray = 
                (int64_t*)mPool->allocate(sizeof(int64_t) * vectorSize * maxTransposeRows);
            mOrigPointers = (std::pair<uint8_t*, int64_t>*)mPool->allocate(sizeof(std::pair<uint8_t*, int64_t>) * vectorSize * 2);
            LOG_TEST << "Allocating an array...";
            }

        double t0 = curClock();

        int64_t newStride = sizeof(int64_t) * vectorSize;

        int64_t offset2Start = offset2;
        int64_t offset2Stop = std::min<int64_t>(mStash.offset2Stop(), offset2 + maxTransposeRows);

        for (long k = 0; k < vectorSize; k++)
            mOrigPointers[vectorSize + k] = make_pair((uint8_t*)(mTransposedArray + k) - newStride * offset2Start, newStride);

        //cacheObliviousTranspose(mPointers + vectorSize, mOrigPointers + vectorSize, 0, offset2Start, vectorSize, offset2Stop - offset2Start);

        std::swap(mPointers, mOrigPointers);
        mTransposedArrayInUse = true;
        mOrigValidRange2.first = mStash.offset2Start();
        mOrigValidRange2.second = mStash.offset2Stop();
        mStash.offset2Start() = offset2Start;
        mStash.offset2Stop() = offset2Stop;
        }
    }

void HomogenousDoubleVectorStashRecord::mapColumn(int64_t offset1, int64_t offset2)
    {
    int64_t vectorSize = mVector.size();
    
    int64_t realOffset1 = (offset1 < 0 ? offset1 + vectorSize : offset1);

    lassert_dump(realOffset1 >= 0 && realOffset1 < vectorSize, offset1);

    TypedFora::Abi::ForaValueArraySlice slice = mVector.sliceForOffset(realOffset1);

    auto offset1Ptr = slice.offsetFor(realOffset1);
    lassert(offset1Ptr);

    const VectorRecord* innerVector = (const VectorRecord*)(offset1Ptr + mOffsetWithinFirstVector);

    mObjectSizeWithinSecondVector = innerVector->jor()[0].type()->size();

    if (innerVector->dataPtr() && innerVector->dataPtr()->unpagedValues() && innerVector->dataPtr()->pagedAndPageletTreeValueCount() == 0)
        {
        for (long k = 0; k < 8 && realOffset1 + k < slice.mapping().highIndex(); k++)
            {
            const VectorRecord* kth_innerVector = (const VectorRecord*)(slice.offsetFor(realOffset1 + k) + mOffsetWithinFirstVector);

            auto unpagedValues = kth_innerVector->dataPtr()->unpagedValues();

            if (unpagedValues && innerVector->dataPtr()->pagedAndPageletTreeValueCount() == 0)
                {
                //this vector is completely unpaged, so we can do the mapping directly
                auto firstPtr = unpagedValues->offsetFor(kth_innerVector->offset());
                auto secondPtr = unpagedValues->offsetFor(kth_innerVector->offset() + kth_innerVector->stride());

                int64_t innerVecSize = kth_innerVector->size();
                int64_t stride = secondPtr - firstPtr;

                if (offset2 < 0)
                    {
                    mValidRanges[offset1 + vectorSize + k] = make_pair(-innerVecSize, 0);
                    mPointers[offset1 + vectorSize + k] = make_pair(firstPtr + stride * innerVecSize, stride);
                    }
                else
                    {
                    mValidRanges[offset1 + vectorSize + k] = make_pair(0, innerVecSize);
                    mPointers[offset1 + vectorSize + k] = make_pair(firstPtr, stride);
                    }
                }
            }
        }
    else
        {
        int64_t realOffset2 = (offset2 < 0 ? offset2 + innerVector->size() : offset2);

        TypedFora::Abi::ForaValueArraySlice innerSlice = innerVector->sliceForOffset(realOffset2);

        lassert(innerSlice.mapping().indexIsValid(realOffset2));

        int64_t minOffset2 = innerSlice.mapping().lowIndex();
        int64_t maxOffset2 = innerSlice.mapping().highIndex();

        if (offset2 < 0)
            {
            minOffset2 -= innerVector->size();
            maxOffset2 -= innerVector->size();
            }

        uint8_t* basePtr = innerSlice.offsetFor(realOffset2);

        //should be true because we checked that 'realOffset2' was a valid index
        lassert(basePtr);

        int64_t stride = 0;

        if (innerSlice.mapping().indexIsValid(realOffset2 + 1))
            stride = innerSlice.offsetFor(realOffset2 + 1) - basePtr;
            else
        if (innerSlice.mapping().indexIsValid(realOffset2 - 1))
            stride = basePtr - innerSlice.offsetFor(realOffset2 - 1);

        lassert_dump(minOffset2 < maxOffset2, minOffset2 << " vs. " << maxOffset2);

        mValidRanges[offset1 + vectorSize] = make_pair(minOffset2, maxOffset2);
        mPointers[offset1 + vectorSize] = make_pair(basePtr - stride * offset2, stride);
        }
    }

HomogenousDoubleVectorStash HomogenousDoubleVectorStashRecord::getStash() const
    {
    lassert(!mStash.dim1IsOutOfBounds());
    lassert(!mStash.dim2IsOutOfBounds());

    return mStash;
    }

}
}
